<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Quinn</title>
        <link>https://example.com/</link>
        <description>Recent content on Quinn</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 02 Mar 2021 11:13:47 +0800</lastBuildDate><atom:link href="https://example.com/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>[ Pulsar ] 1. Pulsar本地安装</title>
        <link>https://example.com/p/pulsar-1.-pulsar%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85/</link>
        <pubDate>Tue, 02 Mar 2021 11:13:47 +0800</pubDate>
        
        <guid>https://example.com/p/pulsar-1.-pulsar%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85/</guid>
        <description>&lt;h1 id=&#34;pulsar本地单机安装&#34;&gt;Pulsar本地单机安装&lt;/h1&gt;
&lt;h2 id=&#34;1-os要求&#34;&gt;1. OS要求&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;目前Pulsar仅支持操作系统 &lt;strong&gt;MacOS&lt;/strong&gt; 与 &lt;strong&gt;Linux&lt;/strong&gt;，使用Pulsar，需保证已安装 &lt;a class=&#34;link&#34; href=&#34;https://www.oracle.com/java/technologies/javase-downloads.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Oracle的 &lt;strong&gt;Java 8&lt;/strong&gt;&lt;/a&gt; 运行环境。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-安装二进制版本&#34;&gt;2. 安装二进制版本&lt;/h2&gt;
</description>
        </item>
        <item>
        <title>[ Standard ] 1.关于Restful规范</title>
        <link>https://example.com/p/standard-1.%E5%85%B3%E4%BA%8Erestful%E8%A7%84%E8%8C%83/</link>
        <pubDate>Mon, 01 Mar 2021 11:13:47 +0800</pubDate>
        
        <guid>https://example.com/p/standard-1.%E5%85%B3%E4%BA%8Erestful%E8%A7%84%E8%8C%83/</guid>
        <description>&lt;h1 id=&#34;关于restful规范&#34;&gt;关于Restful规范&lt;/h1&gt;
&lt;h2 id=&#34;1-restful-api-design定义&#34;&gt;1. Restful API Design定义&lt;/h2&gt;
&lt;h2 id=&#34;2-action命名规范&#34;&gt;2. Action命名规范&lt;/h2&gt;
&lt;h2 id=&#34;3-自定义方法&#34;&gt;3. 自定义方法&lt;/h2&gt;
&lt;h3 id=&#34;31&#34;&gt;3.1&lt;/h3&gt;
</description>
        </item>
        <item>
        <title>[ Interview ] 2. 面试之算法</title>
        <link>https://example.com/p/interview-2.-%E9%9D%A2%E8%AF%95%E4%B9%8B%E7%AE%97%E6%B3%95/</link>
        <pubDate>Fri, 08 Jan 2021 01:13:47 +0800</pubDate>
        
        <guid>https://example.com/p/interview-2.-%E9%9D%A2%E8%AF%95%E4%B9%8B%E7%AE%97%E6%B3%95/</guid>
        <description>&lt;h1 id=&#34;面试之算法&#34;&gt;面试之算法&lt;/h1&gt;
&lt;h2 id=&#34;1-删除userlist中年龄大于20的user对象&#34;&gt;1. 删除UserList中年龄大于20的User对象&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// User实体类
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integet&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;解题思路：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此题按照最简单的lambda方式进行解答(JDK8才支持)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;userList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// removeIf(Predicate&amp;lt;? super E&amp;gt; filter)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;userList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;removeIf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-从1000w个数中取出最小的10个数并按照顺序打印&#34;&gt;2. 从1000W个数中取出最小的10个数，并按照顺序打印。&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;解题思路：&lt;/strong&gt;
首先应该想到堆排序(&lt;strong&gt;Top K堆问题&lt;/strong&gt;)，大根堆(前k小)或小根堆(后k大)。在Java中有已经实现的&lt;em&gt;PriorityQueue&lt;/em&gt;，解决此问题将最为简单，复杂度为&lt;em&gt;&lt;strong&gt;O(NlogK)&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;本题是求前&lt;code&gt;K&lt;/code&gt;小，因此选用一个容量为&lt;code&gt;K&lt;/code&gt;的大根堆，每次poll出最大的数，则堆中保留的则是前&lt;code&gt;K&lt;/code&gt;项小。(谨记：需要不可用小根堆，小根堆需把全部元素入堆，时间复杂度为&lt;em&gt;&lt;strong&gt;O(NlogN)&lt;/strong&gt;&lt;/em&gt;,将不再是&lt;em&gt;&lt;strong&gt;O(NlogK)&lt;/strong&gt;&lt;/em&gt;)，Java中&lt;em&gt;PriorityQueue&lt;/em&gt;默认为&lt;strong&gt;小根堆&lt;/strong&gt;，需作出调整重写比较器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MaxHeap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;77&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;883&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;99983&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2772&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;848&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3663&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2626&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;737&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2772&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;8388&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;266&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;83&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;72&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;7272&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;83883&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;27727&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;263&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;840&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2740&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;884&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 重写PriorityQueue为大根堆
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// PriorityQueue&amp;lt;Integer&amp;gt; queue = new PriorityQueue&amp;lt;&amp;gt;();默认为小根堆
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;PriorityQueue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PriorityQueue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;offer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]);&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;peek&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;poll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;offer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]);&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;poll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-3个线程abc存在依赖关系b依赖a执行结束c依赖b执行结束请设计实现&#34;&gt;3. 3个线程A、B、C存在依赖关系，B依赖A执行结束，C依赖B执行结束，请设计实现。&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;解题思路：&lt;/strong&gt;
主要考察多线程Thread对象的wait()、notify()以及线程间共享的信号量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Lock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lockA&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Lock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lockB&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lockA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lockA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lockB&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lockB&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getFlag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setFlag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;flag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Lock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;lock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;thread A starting &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getFlag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;notify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setFlag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Lock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lockA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Lock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lockB&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lockA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lockB&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;lockA&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lockA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;lockB&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lockB&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lockA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

            &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lockA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getFlag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;lockA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setFlag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;lockA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Thread B starting&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

                &lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lockB&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lockB&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getFlag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;lockB&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;notify&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
                    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;lockB&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setFlag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
                    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Lock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;lock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getFlag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setFlag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Thread C starting&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * 给定一个二叉树, 检查它是否是镜像对称的
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * 例如以下是镜像对称的
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  *      1
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  *     / \
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  *    2   2
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  *   / \ / \
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  *  3  4 4  3
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * 下面这个则不是镜像对称的
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  *      1
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  *     / \
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  *    2   2
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  *     \   \
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  *      3   3
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * TreeNode类的定义:
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * @param TreeNode 一颗二叉树
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * @return boolean 是否是对称的
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  */&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 以下给出TreeNode类, 请勿修改
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TreeNode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解答代码&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * 对任意一个Map&amp;lt;String, Object&amp;gt;, 其 key 为 String,
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * 其 value 为 Map&amp;lt;String, Object&amp;gt; Object[] Number String 中的任意一种,
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * 显然叶子节点是 value 类型为 Number 或 String的节点,
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * 将 Map 转为多条字符串, 每条字符串表达其中一个叶子节点,
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * 比如:
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * {&amp;#34;a&amp;#34;:{&amp;#34;b&amp;#34;:[&amp;#34;v&amp;#34;,2,{&amp;#34;c&amp;#34;:0}]},&amp;#34;d&amp;#34;:[1,null,3]}
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * 将转化为以下这些字符串
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * a.b[0] = v
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * a.b[1] = 2
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * a.b[2].c = 0
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * d[0] = 1
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * d[1] = null
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * d[2] = 3
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * @param map 上述的 map
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * @return 所有的字符串
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解答代码&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * 注意! 本题不要遍历二维数组. 要求时间复杂度严格低于n^2, 否则视为不得分
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * 现有一个n\*n的二维正整数数组nums，每行元素保证递增，每列元素保证递增，
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    求某正整数x是否存在于该二维数组中，需要尽量优化时间和空间复杂度；
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * @param int[][] nums
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * @param int x 目标数
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * @return boolean
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解答代码&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[ Interview ] 3. 面试之Java</title>
        <link>https://example.com/p/interview-3.-%E9%9D%A2%E8%AF%95%E4%B9%8Bjava/</link>
        <pubDate>Fri, 08 Jan 2021 01:13:47 +0800</pubDate>
        
        <guid>https://example.com/p/interview-3.-%E9%9D%A2%E8%AF%95%E4%B9%8Bjava/</guid>
        <description>&lt;h1 id=&#34;面试&#34;&gt;面试&lt;/h1&gt;
&lt;h2 id=&#34;x_q&#34;&gt;X_Q&lt;/h2&gt;
&lt;h3 id=&#34;1jvm垃圾回收机制&#34;&gt;1.JVM垃圾回收机制&lt;/h3&gt;
&lt;p&gt;Java编程中，程序员不需要刻意显式进行垃圾回收去释放一个对象内存，而是JVM会进行自动垃圾回收。
JVM中存在一个 &lt;strong&gt;&lt;code&gt;优先级较低&lt;/code&gt;&lt;/strong&gt; 的线程，只有当 &lt;strong&gt;&lt;code&gt;JVM处于空闲&lt;/code&gt;&lt;/strong&gt; 或者 &lt;strong&gt;&lt;code&gt;堆空间不足&lt;/code&gt;&lt;/strong&gt; 的情况触发执行。此过程中，将扫描到 &lt;strong&gt;没有被引用的对象&lt;/strong&gt; 防止垃圾回收集合中，进行垃圾回收。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;判断对象是否可以被回收&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;引用计数器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为每一个对象创建一个引用计数器，有引用此对象，计数器进行+1；引用释放后，计数器进行-1。当对象引用计数器 == 0时，说明此对象可以进行回收。(&lt;strong&gt;不能解决循环引用问题&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可达性分析算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从GC Roots开始向下搜索，走过的搜索路径将形成引用链，当一个对象到 &lt;strong&gt;GC Roots&lt;/strong&gt;不存在任何引用链式，说明此对象可以进行回收。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2什么是netty&#34;&gt;2.什么是Netty？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;见 &lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/netty/6_1_netty&#34; &gt;Netty&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3netty粘包拆包&#34;&gt;3.Netty粘包/拆包&lt;/h3&gt;
&lt;h3 id=&#34;3kubernetes工作原理&#34;&gt;3.Kubernetes工作原理&lt;/h3&gt;
&lt;h3 id=&#34;4快排实现原理&#34;&gt;4.快排实现原理&lt;/h3&gt;
&lt;h2 id=&#34;b_d&#34;&gt;B_D&lt;/h2&gt;
&lt;h3 id=&#34;1-hash最终一致性算法&#34;&gt;1. Hash最终一致性算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;算法目标：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当&lt;code&gt;K&lt;/code&gt;个Key的请求时，后台增减节点，只会引起 &lt;strong&gt;K/N&lt;/strong&gt; 的 Key发生重新映射。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在后台节点稳定时，同一个key的每次请求映射到的节点是一样的。&lt;/li&gt;
&lt;li&gt;在后台节点增减时，此算法尽量将 &lt;strong&gt;K&lt;/strong&gt; 个Key映射到之前相同的节点上。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hash存在问题：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假定N为后台服务节点数，当前台携带关键字key发出请求时，我们通常将key进行Hash后采用 &lt;strong&gt;&lt;code&gt;模运算(hash(key)%N)&lt;/code&gt;&lt;/strong&gt; 来讲请求分发在不同的节点上。&lt;/li&gt;
&lt;li&gt;对前台请求于&lt;code&gt;后台无状态服务节点&lt;/code&gt;不敏感的场景而言，只要请求key具有一定的随机性，哪怕节点动态增删，该算法对于后台而言一样可以起到很好的负载均衡效果。&lt;/li&gt;
&lt;li&gt;但在对于&lt;code&gt;分布式缓存&lt;/code&gt;，或者&lt;code&gt;分布式数据&lt;/code&gt;这样&lt;code&gt;有状态服务&lt;/code&gt;的情况下，上述方式将存在问题。因为后台节点的增删会引起几乎所有的Key的重新映射：
&lt;ul&gt;
&lt;li&gt;针对分布式缓存而言，均发生cache miss；&lt;/li&gt;
&lt;li&gt;针对分布式数据库而言，发生数据错乱的情况，影响都是灾难性的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;判断标准：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平衡性(Balance)：指哈希的结果能够尽可能分不到所有的缓冲中，这样可以使得所有缓冲空间都得到利用。&lt;/li&gt;
&lt;li&gt;单调性(Monotonicity)：单调性是指如果已经有一些内容通过Hash算法分配到了缓冲中，又有新的缓冲加入到系统中，Hash的结果应该能够保证原有已分配的内容可以被映射到原有的或者新的缓冲中去，而不会被映射到旧的缓冲集合中的其他缓冲区。&lt;/li&gt;
&lt;li&gt;分散性(Spread)：在分布式环境中，终端有可能看不到所有的缓冲。不同的终端可能通过Hash的过程将同样的缓冲内容应设在不同的缓冲中。&lt;code&gt;应尽量降低分散性&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;负载(Load)：实际上是另一个角度看待分散性。对于一个特定的缓冲区而言，可能被不同的用户映射到不同的内容。&lt;code&gt;应尽量降低缓冲的负荷&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hash一致性算法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是一个2^32个点组成的Hash圆环&lt;/li&gt;
&lt;li&gt;按照 &lt;strong&gt;顺时针方向&lt;/strong&gt; 进行组织&lt;/li&gt;
&lt;li&gt;将数据 &lt;strong&gt;Key&lt;/strong&gt; 使用相同的 &lt;code&gt;hash()&lt;/code&gt; 计算出Hash值，并确定在此 Hash环 上的位置，从此位置按照 &lt;strong&gt;顺时针方式&lt;/strong&gt; 寻找，碰到的第一台节点将是定位到的节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hash环发生数据倾斜&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在服务节点太少的情况，数据容易发生倾斜&lt;/li&gt;
&lt;li&gt;解决办法：
&lt;ul&gt;
&lt;li&gt;增加虚拟节点，形成均匀的Hash环避免数据倾斜。&lt;/li&gt;
&lt;li&gt;通过 &lt;strong&gt;Hash(&amp;quot;${Node1}#1&amp;quot;)&lt;/strong&gt; 的方式构造成虚拟节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-tcp与udp的区别&#34;&gt;2. TCP与UDP的区别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;TCP
&lt;ul&gt;
&lt;li&gt;面向有连接
&lt;ul&gt;
&lt;li&gt;发送数据前两端必须进行连接。因 &lt;strong&gt;三次握手&lt;/strong&gt; 建立连接，使得数据传输更加可靠&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;仅支持单播方式&lt;/li&gt;
&lt;li&gt;面向字节流
&lt;ul&gt;
&lt;li&gt;不保留报文边界，通过字节流的方式进行传输&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可靠传输
&lt;ul&gt;
&lt;li&gt;为保证可靠传输，每个包都拥有序号，同时保证包传输的顺序性也保证包的完整性。&lt;/li&gt;
&lt;li&gt;接收端接收到数据后需要返回确认帧，如果在规定时延内发送端未收到确认帧，将视为丢包进行重传。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;拥塞机制
&lt;ul&gt;
&lt;li&gt;在网络出现拥塞的情况下，TCP可以减小向网络注入数据的速率和数量，缓解拥塞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提供全双工通信
&lt;ul&gt;
&lt;li&gt;通讯双方的应用程序在任何时候都能发送数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UDP
&lt;ul&gt;
&lt;li&gt;面向无连接&lt;/li&gt;
&lt;li&gt;支持单播、多播、广播方式&lt;/li&gt;
&lt;li&gt;面向报文
&lt;ul&gt;
&lt;li&gt;UDP对应用成交付的报文不合并不拆分，而是保留报文的边界，应用程序必须要控制合适的报文大小。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不可靠性
&lt;ul&gt;
&lt;li&gt;通信不需要建立连接。想发就发，并且不关心对方接收到的数据是否正确无误&lt;/li&gt;
&lt;li&gt;没有拥塞控制，可能出现丢包情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;头部数据小，数据传输高效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-tcp如何保证网络安全的&#34;&gt;3. TCP如何保证网络安全的&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;  即TCP的特性&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;4-tcp三次握手&#34;&gt;4. TCP三次握手&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一次握手
&lt;ul&gt;
&lt;li&gt;客户端 向 服务端 发出连接请求的报文，请求发送成功后，客户端进入 &lt;code&gt;SYN-SENT&lt;/code&gt; 状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第二次握手
&lt;ul&gt;
&lt;li&gt;服务端 收到 客户端 连接请求的报文后，如同意连接，发出一个应答，发送完成后进入 &lt;code&gt;SYN-RECEIVED&lt;/code&gt; 状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第三次握手
&lt;ul&gt;
&lt;li&gt;当 客户端 收到连接同意的应答后，需向服务端发送一个确认报文。发送完成后，客户端进入 &lt;code&gt;ESTABLISHED&lt;/code&gt; 状态， 服务端 收到这个确认应答后也将进入 &lt;code&gt;ESTABLISHED&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-tcp四次挥手&#34;&gt;5. TCP四次挥手&lt;/h3&gt;
&lt;p&gt;（1）：客户端发送终止命令FIN&lt;/p&gt;
&lt;p&gt;（2）：服务端收到后回复ACK，处于close_wait状态&lt;/p&gt;
&lt;p&gt;（3）：服务器将关闭前需要发送信息发送给客户端后处于last_ack状态&lt;/p&gt;
&lt;p&gt;（4）：客户端收到FIN后发送ack后处于tim-wait而后进入close状态&lt;/p&gt;
&lt;h3 id=&#34;5-kubernetes中pod间如何通讯的&#34;&gt;5. Kubernetes中Pod间如何通讯的&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;通过 &lt;code&gt;CNI&lt;/code&gt;(Container Network Interface) 进行网络通讯。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;6-mysql索引&#34;&gt;6. Mysql索引&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/database/sql/mysql/2_2_sql_index&#34; &gt;Mysql索引&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;7-mysql-b-tree索引实现原理&#34;&gt;7. Mysql B+ Tree索引实现原理&lt;/h3&gt;
&lt;h3 id=&#34;8-zookeeper在kafka中的作用&#34;&gt;8. Zookeeper在Kafka中的作用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Broker注册&lt;/p&gt;
&lt;p&gt;分布式下的Broker之间相互独立，需要一个注册中心将其Broker集群管理起来，Zookeeper将会对Broker集群列表进行记录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Topic注册&lt;/p&gt;
&lt;p&gt;同一个Topic的消息会被分成多个分区分散在不同的Broker，Zookeeper将会维护分区信息以及与broker之间对应关系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;负责Producer、Consumer负载均衡&lt;/p&gt;
&lt;p&gt;Zookeeper通过负载均衡，协助Producer、Consumer将消息合理的发送或消费到指定的Broker。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分区与Consumer的关系&lt;/p&gt;
&lt;p&gt;每一个消费者一旦确定一个消息分区的消费能力，需要将其对应信息写入至Zookeeper对应消息分区的临时节点上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;记录Consumer消费进度Offset&lt;/p&gt;
&lt;p&gt;在Consumer对指定消息分区进行消费的过程中，会定时将分区消息的Offset记录到Zookeeper上。以便此消费者重启或变更其他消费者消费时再次继续进行消费。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;9-有没有做过dockerimage精简&#34;&gt;9. 有没有做过DockerImage精简&lt;/h3&gt;
&lt;h3 id=&#34;10-服务是如何在服务器运行的如何实现发布dockerimage发布的&#34;&gt;10. 服务是如何在服务器运行的，如何实现发布DockerImage发布的&lt;/h3&gt;
</description>
        </item>
        <item>
        <title>[ RocketMQ ] 1.面试</title>
        <link>https://example.com/p/rocketmq-1.%E9%9D%A2%E8%AF%95/</link>
        <pubDate>Fri, 08 Jan 2021 01:13:47 +0800</pubDate>
        
        <guid>https://example.com/p/rocketmq-1.%E9%9D%A2%E8%AF%95/</guid>
        <description>&lt;h1 id=&#34;面试准备&#34;&gt;面试准备&lt;/h1&gt;
&lt;h2 id=&#34;1-什么是解耦&#34;&gt;1. 什么是解耦&lt;/h2&gt;
&lt;h2 id=&#34;2-什么是异步&#34;&gt;2. 什么是异步&lt;/h2&gt;
&lt;h2 id=&#34;3-什么是消峰填谷&#34;&gt;3. 什么是消峰填谷&lt;/h2&gt;
&lt;h2 id=&#34;4-rocketmq执行流程&#34;&gt;4. RocketMQ执行流程&lt;/h2&gt;
&lt;h2 id=&#34;5-怎么理解producer&#34;&gt;5. 怎么理解Producer&lt;/h2&gt;
&lt;h2 id=&#34;6-怎么理解consumer&#34;&gt;6. 怎么理解Consumer&lt;/h2&gt;
&lt;h2 id=&#34;7-消费者消费模式有哪些&#34;&gt;7. 消费者消费模式有哪些&lt;/h2&gt;
&lt;h2 id=&#34;8-消费者获取消息有几种模式&#34;&gt;8. 消费者获取消息有几种模式&lt;/h2&gt;
&lt;h2 id=&#34;9-定时消息是什么样的如何实现的&#34;&gt;9. 定时消息是什么样的？如何实现的？&lt;/h2&gt;
&lt;h2 id=&#34;10-rocketmq如何保证高可用的&#34;&gt;10. RocketMQ如何保证高可用的？&lt;/h2&gt;
&lt;h2 id=&#34;11-如何保证消息不被重复消费或者说如何保证消息消费是的幂等性&#34;&gt;11. 如何保证消息不被重复消费？或者说如何保证消息消费是的幂等性？&lt;/h2&gt;
&lt;h2 id=&#34;12-如何保证消息的可靠性传输若消息出现丢失如何处理&#34;&gt;12. 如何保证消息的可靠性传输？若消息出现丢失如何处理？&lt;/h2&gt;
&lt;h2 id=&#34;13-如何保证消息的顺序性&#34;&gt;13. 如何保证消息的顺序性？&lt;/h2&gt;
&lt;h2 id=&#34;14-如何解决消息队列的延时以及过期失效问题&#34;&gt;14. 如何解决消息队列的延时以及过期失效问题？&lt;/h2&gt;
&lt;h2 id=&#34;15-消息队列满了以后如何处理有几百万消息持续挤压几小时如何解决&#34;&gt;15. 消息队列满了以后如何处理？有几百万消息持续挤压几小时，如何解决？&lt;/h2&gt;
&lt;h2 id=&#34;16-如何解决高性能读写数据问题&#34;&gt;16. 如何解决高性能读写数据问题？&lt;/h2&gt;
</description>
        </item>
        <item>
        <title>[ Interview ] 1. 面试之清单</title>
        <link>https://example.com/p/interview-1.-%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%B8%85%E5%8D%95/</link>
        <pubDate>Thu, 07 Jan 2021 01:13:47 +0800</pubDate>
        
        <guid>https://example.com/p/interview-1.-%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%B8%85%E5%8D%95/</guid>
        <description>&lt;h1 id=&#34;面试之清单&#34;&gt;面试之清单&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;加粗加斜&lt;/strong&gt;&lt;/em&gt; : &lt;code&gt;为本人面试所遇到重复出现的点儿&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加粗&lt;/strong&gt; : &lt;code&gt;为本人面试所遇到的点儿&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;正常 : &lt;code&gt;为本人面试刷的面经&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;algorithm&#34;&gt;&lt;strong&gt;Algorithm&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;sort&#34;&gt;&lt;strong&gt;Sort&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;strong&gt;手撸插入排序&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;strong&gt;手撸二分查找&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;em&gt;&lt;strong&gt;堆排序(Top K)&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;strong&gt;快素排序思想&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;strong&gt;反转单链表&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;strong&gt;合并二叉树(递归与非递归两种办法)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java&#34;&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;basic&#34;&gt;&lt;strong&gt;Basic&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;strong&gt;Object是所有对象的父类，那Object类中有哪些方法&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;strong&gt;hashCode()与equals()有什么关系&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;String、StringBuilder、StringBuffer区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;反射机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;方法(静态、一般方法)；代码块(this，ClassName.class)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;collections&#34;&gt;&lt;strong&gt;Collections&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;List之ArrayList&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;List之LinkedList&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;List之Vector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/base/2_basic/2_4_hashmap&#34; &gt;&lt;em&gt;&lt;strong&gt;Map之HashMap&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;Map之LinkedHashMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;Map之ConcurrentHashMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;Map之TreeMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;HashTable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;Set之HashSet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;Set之TreeSet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;Queue之ArrayBlockingQueue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;Queue之ConcurrentLinkedQueue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;Queue之LinkedBlockingQueue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;thread&#34;&gt;&lt;strong&gt;Thread&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;em&gt;&lt;strong&gt;线程的几种状态以及如何转化的&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;三种线程初始化方法的区别(&lt;code&gt;Thread&lt;/code&gt;,&lt;code&gt;Callable&lt;/code&gt;,&lt;code&gt;Runnable&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;em&gt;&lt;strong&gt;线程池几个重要参数&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;em&gt;&lt;strong&gt;线程池四种拒绝策略&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;em&gt;&lt;strong&gt;线程池四个类型&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;线程池(&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;)原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;关于锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/base/4_thread/4_3_synchronized#%e9%94%81%e5%8d%87%e7%ba%a7&#34; &gt;&lt;em&gt;&lt;strong&gt;&lt;code&gt;synchronized&lt;/code&gt;锁以及锁升级&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;code&gt;ReentrantLock&lt;/code&gt;与&lt;code&gt;synchronized&lt;/code&gt;区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;有界、无界任务队列，手写BlockingQueue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/base/4_thread/4_3_synchronized#threadlocal%e7%9a%84%e5%8e%9f%e7%90%86%e5%92%8c%e5%ba%94%e7%94%a8&#34; &gt;&lt;code&gt;ThreadLocal&lt;/code&gt;：底层数据结构、ThreadLocalMap、原理、应用场景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;code&gt;Atomic类&lt;/code&gt;：原理、应用场景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;code&gt;Volatile&lt;/code&gt;：原理、有序性、可见性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jvm&#34;&gt;&lt;strong&gt;JVM&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/base/3_jvm/3_jvm_memory_monitor#1-jvm-%e5%86%85%e5%ad%98%e7%bb%93%e6%9e%84&#34; &gt;&lt;strong&gt;JVM内存结构&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;strong&gt;final修饰的常量处于JVM中哪部分内存&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/base/3_jvm/2_jvm_gc#1-%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6%e6%9c%ba%e5%88%b6&#34; &gt;&lt;strong&gt;JVM垃圾回收机制&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/base/3_jvm/2_jvm_gc#2-%e5%bc%95%e7%94%a8%e7%b1%bb%e5%9e%8b&#34; &gt;&lt;strong&gt;引用类型&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/base/3_jvm/2_jvm_gc#7-%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6%e5%99%a8&#34; &gt;&lt;strong&gt;JVM垃圾回收器，各有什么特点&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/base/3_jvm/2_jvm_gc#6-%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6%e7%ae%97%e6%b3%95&#34; &gt;&lt;strong&gt;垃圾回收算法&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/base/3_jvm/2_jvm_gc#4-%e5%9c%a8java%e4%b8%ad%e5%af%b9%e8%b1%a1%e4%bb%80%e4%b9%88%e6%97%b6%e5%80%99%e5%8f%af%e4%bb%a5%e8%a2%ab%e8%bf%9b%e8%a1%8c%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6&#34; &gt;&lt;strong&gt;对象什么时间可以被回收&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/base/3_jvm/2_jvm_gc#9-%e6%96%b0%e7%94%9f%e4%bb%a3%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6%e5%99%a8%e4%b8%8e%e8%80%81%e5%b9%b4%e4%bb%a3%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6%e5%99%a8%e6%9c%89%e5%93%aa%e4%ba%9b%e5%8c%ba%e5%88%ab%e6%98%af%e4%bb%80%e4%b9%88&#34; &gt;&lt;strong&gt;新生代垃圾回收器与老年代垃圾回收器有哪些？区别是什么？&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/base/3_jvm/2_jvm_gc#8-%e5%85%b3%e4%ba%8ecms%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6%e5%99%a8&#34; &gt;&lt;strong&gt;CMS垃圾回收器&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;strong&gt;JVM中Survivor空间是做什么的&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/base/3_jvm/4_jvm_class_loader#4-%e7%b1%bb%e8%a3%85%e8%bd%bd%e7%9a%84%e6%89%a7%e8%a1%8c%e8%bf%87%e7%a8%8b&#34; &gt;&lt;strong&gt;类加载器&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/base/3_jvm/4_jvm_class_loader#5-%e4%bb%80%e4%b9%88%e6%98%af%e5%8f%8c%e4%ba%b2%e5%a7%94%e6%b4%be%e6%a8%a1%e5%9e%8b&#34; &gt;&lt;strong&gt;双亲委派模型&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/base/3_jvm/4_jvm_class_loader#6-tomcat%e6%89%93%e7%a0%b4%e5%8f%8c%e4%ba%b2%e5%a7%94%e6%b4%be&#34; &gt;Tomcat打破双亲委派&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;strong&gt;类加载机制&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;strong&gt;类加载&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java-framework&#34;&gt;&lt;strong&gt;Java Framework&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;spring&#34;&gt;&lt;strong&gt;Spring&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/spring/spring/1_spring_ioc#4-springioc&#34; &gt;&lt;em&gt;&lt;strong&gt;SpringIOC原理&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/spring/spring/1_spring_ioc#5-spring%e5%ae%b9%e5%99%a8%e5%8a%a0%e8%bd%bdbean&#34; &gt;&lt;em&gt;&lt;strong&gt;容器加载Bean流程&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/spring/spring/1_spring_ioc#8-springaop&#34; &gt;&lt;em&gt;&lt;strong&gt;SpringAOP原理&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/spring/spring/1_spring_ioc#1-springbeanfactory%e4%b8%8efactorybean%e7%9a%84%e5%8c%ba%e5%88%ab&#34; &gt;FactoryBean 与 BeanFactory区别&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/spring/spring/1_spring_ioc#6-spring%e4%b8%89%e7%ba%a7%e7%bc%93%e5%ad%98&#34; &gt;&lt;em&gt;&lt;strong&gt;Spring三级缓存&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/spring/spring/1_spring_ioc#7-spring%e5%be%aa%e7%8e%af%e4%be%9d%e8%b5%96&#34; &gt;&lt;em&gt;&lt;strong&gt;SpringBoot循环依赖&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/spring/spring/1_spring_ioc#17-springboot%e8%ae%a2%e9%98%85%e5%8f%91%e5%b8%83%e6%a8%a1%e5%bc%8fapplicationevent%e5%a4%84%e4%ba%8e%e4%bb%80%e4%b9%88%e8%a7%92%e8%89%b2%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0%e7%9a%84&#34; &gt;&lt;em&gt;&lt;strong&gt;SpringBoot订阅发布模式。ApplicationEvent处于什么角色，如何实现的？&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/spring/spring/1_spring_ioc#9-jdk%e5%8a%a8%e6%80%81%e4%bb%a3%e7%90%86%e5%92%8ccglib%e5%8a%a8%e6%80%81%e4%bb%a3%e7%90%86%e7%9a%84%e5%8c%ba%e5%88%ab&#34; &gt;&lt;em&gt;&lt;strong&gt;JDK动态代理和CGLIB动态代理的区别&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/spring/spring/1_spring_ioc#15-springaop%e5%b8%b8%e7%94%a8%e7%9a%84%e5%88%87%e5%85%a5%e7%82%b9&#34; &gt;&lt;em&gt;&lt;strong&gt;SpringAOP常用的切入点&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/spring/spring/1_spring_ioc#16-springioc%e5%b8%b8%e7%94%a8%e6%b3%a8%e8%a7%a3&#34; &gt;&lt;em&gt;&lt;strong&gt;SpringIOC常用注解&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/spring/spring/1_spring_ioc#12-@autowired%e4%b8%8e@resource%e5%8c%ba%e5%88%ab&#34; &gt;&lt;em&gt;&lt;strong&gt;@Autowired与@Resource区别&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/spring/spring/1_spring_ioc#13-@qualifier%e4%b8%8e@autowired&#34; &gt;&lt;em&gt;&lt;strong&gt;@Qualifier与@Autowired&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/spring/spring/1_spring_ioc#14-springboot%e4%b8%8a%e4%b8%8b%e6%96%87%e5%88%87%e6%8d%a2&#34; &gt;&lt;em&gt;&lt;strong&gt;SpringBoot上下文切换&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;strong&gt;SpringBoot编译打包后包的结构?通过main()函数作为主入口的程序打包后如何启动？&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/spring/spring/1_spring_ioc#11-spring%e5%90%af%e5%8a%a8%e5%8a%a0%e8%bd%bd%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6%e7%9a%84%e6%b5%81%e7%a8%8b&#34; &gt;&lt;strong&gt;Spring启动加载配置文件的流程&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/spring/spring/1_spring_ioc#10-%e8%87%aa%e5%8a%a8%e8%a3%85%e9%85%8d&#34; &gt;自动装配&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mybatis&#34;&gt;&lt;strong&gt;MyBatis&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/spring/mybatis/1-mybatis-interview#1-mybatis%e4%ba%8c%e7%ba%a7%e7%bc%93%e5%ad%98&#34; &gt;MyBatis二级缓存&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/coding/java/spring/mybatis/1-mybatis-interview#2-mybatis%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86&#34; &gt;Mybatis原理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;netty&#34;&gt;&lt;strong&gt;Netty&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/netty/6_1_netty#1-%e4%b8%ba%e4%bb%80%e4%b9%88%e7%94%a8netty&#34; &gt;&lt;em&gt;&lt;strong&gt;聊聊Netty&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/netty/6_1_netty#6-netty%e4%b8%adtcp%e7%b2%98%e5%8c%85%e6%8b%86%e5%8c%85&#34; &gt;&lt;em&gt;&lt;strong&gt;Netty中的拆包、粘包是为什么？如何解决？&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/netty/6_1_netty#4-netty%e7%ba%bf%e7%a8%8b%e6%a8%a1%e5%9e%8b&#34; &gt;&lt;em&gt;&lt;strong&gt;Netty的线程模型&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/netty/6_1_netty#3-netty%e6%a0%b8%e5%bf%83%e7%bb%84%e4%bb%b6&#34; &gt;&lt;em&gt;&lt;strong&gt;Netty的重要组件&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/netty/6_1_netty#5-eventloopgroup%e6%98%af%e4%bb%80%e4%b9%88%e4%b8%8eeventloop%e5%85%b3%e7%b3%bb&#34; &gt;&lt;em&gt;&lt;strong&gt;Netty中EventLoopGroup与EventLoop什么区别&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dubbo&#34;&gt;&lt;strong&gt;Dubbo&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/dubbo/1_2_dubbo_spi#1-dubbo-spi%e4%b8%8ejava-spi&#34; &gt;&lt;em&gt;&lt;strong&gt;Dubbo中的SPI，为什么不适用JDK的SPI？&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/dubbo/1_2_dubbo_spi&#34; &gt;Dubbo中的SPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/dubbo/1_1_dubbobase#2-dubbo%e6%9c%8d%e5%8a%a1%e6%b3%a8%e5%86%8c%e4%b8%8e%e5%8f%91%e7%8e%b0%e6%b5%81%e7%a8%8b&#34; &gt;&lt;strong&gt;Dubbo服务注册与发现流程&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/dubbo/1_3_dubbo_communication#1-dubbo%e5%a4%9a%e7%ba%bf%e7%a8%8b%e9%80%9a%e4%bf%a1%e5%8e%9f%e7%90%86&#34; &gt;&lt;strong&gt;Dubbo通信原理&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/dubbo/1_3_dubbo_communication#&#34; &gt;Dubbo分层&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/dubbo/1_1_dubbobase#3-1-dubbo%e6%9c%8d%e5%8a%a1%e6%9a%b4%e9%9c%b2%e8%bf%87%e7%a8%8b&#34; &gt;&lt;strong&gt;Dubbo服务暴露流程&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/dubbo/1_1_dubbobase#3-2-dubbo%e6%9c%8d%e5%8a%a1%e5%bc%95%e7%94%a8%e8%bf%87%e7%a8%8b&#34; &gt;&lt;strong&gt;Dubbo服务引用流程&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/dubbo/1_1_dubbobase#4-dubbo%e7%9a%84%e7%ae%a1%e7%90%86%e6%8e%a7%e5%88%b6%e5%8f%b0%e8%83%bd%e5%81%9a%e4%bb%80%e4%b9%88&#34; &gt;&lt;strong&gt;Dubbo的管理控制台能做什么&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/dubbo/1_1_dubbobase#5-dubbo%e9%9b%86%e7%be%a4%e5%ae%b9%e9%94%99%e6%96%b9%e6%a1%88&#34; &gt;Dubbo集群容错方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/dubbo/1_1_dubbobase#6-dubbo%e6%94%af%e6%8c%81%e4%bb%80%e4%b9%88%e5%8d%8f%e8%ae%ae&#34; &gt;Dubbo支持什么协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/dubbo/1_1_dubbobase#7-dubbo%e5%a6%82%e4%bd%95%e5%81%9a%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1&#34; &gt;Dubbo如何做负载均衡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/dubbo/1_1_dubbobase#8-dubbo%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0%e5%bc%82%e6%ad%a5%e8%b0%83%e7%94%a8&#34; &gt;Dubbo如何实现异步调用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/dubbo/1_1_dubbobase#9-%e5%9c%a8provider%e4%b8%8a%e5%8f%af%e4%bb%a5%e9%85%8d%e7%bd%aeconsumer%e7%ab%af%e7%9a%84%e5%b1%9e%e6%80%a7%e6%9c%89%e5%93%aa%e4%ba%9b&#34; &gt;Dubbo在Provide上可以配置Consumer哪些属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/dubbo/1_1_dubbobase#10-zookeeper%e5%92%8cdubbo%e7%9a%84%e5%85%b3%e7%b3%bb&#34; &gt;Zookeeper和Dubbo的关系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/dubbo/1_1_dubbobase#11-dubbo%e5%88%86%e5%b1%82&#34; &gt;Dubbo分层&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;zookeeper&#34;&gt;&lt;strong&gt;Zookeeper&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;em&gt;一致性算法原理&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;选举流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/register_center/zookeeper/2-zookeeper-base#1-zan%e5%8d%8f%e8%ae%ae&#34; &gt;ZAB协议&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kafka&#34;&gt;&lt;strong&gt;Kafka&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;strong&gt;Zookeeper在Kafka中的作用&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rocketmq&#34;&gt;&lt;strong&gt;RocketMQ&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;elasticsearch&#34;&gt;&lt;strong&gt;ElasticSearch&lt;/strong&gt;&lt;/h3&gt;
&lt;h2 id=&#34;middleware&#34;&gt;&lt;strong&gt;Middleware&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;redis&#34;&gt;&lt;strong&gt;Redis&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;em&gt;&lt;strong&gt;什么是击穿？什么是雪崩？&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;em&gt;&lt;strong&gt;Redis支持的几种数据结构&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/database/nosql/redis/1_redis_interview#1-%e4%bb%80%e4%b9%88%e6%98%af%e8%b7%b3%e8%a1%a8&#34; &gt;&lt;em&gt;&lt;strong&gt;Redis跳表&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/database/nosql/redis/1_redis_interview#2-redis%e4%b8%adbitmap&#34; &gt;&lt;strong&gt;Redis中的BitMap&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mysql&#34;&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/database/sql/mysql/2_2_sql_index#1-%e7%b4%a2%e5%bc%95%e7%b1%bb%e5%9e%8b&#34; &gt;&lt;em&gt;&lt;strong&gt;讲讲Mysql索引&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;strong&gt;Mysql中&lt;code&gt;B+ Tree&lt;/code&gt;索引原理&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/database/sql/mysql/2_2_sql_index#2-mysql%e7%b4%a2%e5%bc%95%e5%a4%b1%e6%95%88%e7%9a%84%e5%87%a0%e7%a7%8d%e6%83%85%e5%86%b5&#34; &gt;&lt;em&gt;&lt;strong&gt;Mysql索引失效的几种情况&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/middleware/database/sql/mysql/2_2_sql_index#3-%e5%bc%ba%e5%88%b6%e7%b4%a2%e5%bc%95&#34; &gt;&lt;em&gt;&lt;strong&gt;Mysql强制索引&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;em&gt;&lt;strong&gt;分库分表如何实现的&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;em&gt;&lt;strong&gt;分库分表中间件&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;distribution&#34;&gt;&lt;strong&gt;Distribution&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;base&#34;&gt;&lt;strong&gt;Base&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/algorithm/ext/3_base_knowledge_2021_01_09#1-hash%e6%9c%80%e7%bb%88%e4%b8%80%e8%87%b4%e6%80%a7%e7%ae%97%e6%b3%95&#34; &gt;&lt;strong&gt;一致性Hash算法&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kubernetes&#34;&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;strong&gt;Kubernetes中Pod间是如何通信的&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;strong&gt;Kubernetes中IngressController&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;操作系统&#34;&gt;&lt;strong&gt;操作系统&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;tcpip&#34;&gt;&lt;strong&gt;TCP/IP&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/algorithm/ext/3_base_knowledge_2021_01_09#4-tcp%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b&#34; &gt;&lt;em&gt;&lt;strong&gt;TCP三次握手/四次挥手&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/post/algorithm/ext/3_base_knowledge_2021_01_09#2-tcp%e4%b8%8eudp%e7%9a%84%e5%8c%ba%e5%88%ab&#34; &gt;&lt;em&gt;&lt;strong&gt;TCP与UDP的区别&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多线程与并发&#34;&gt;&lt;strong&gt;多线程与并发&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;strong&gt;说说进程、线程、协程&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;strong&gt;操作系统的互斥锁原理，阻塞过程中(抢锁失败)线程会做什么&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计模式&#34;&gt;&lt;strong&gt;设计模式&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;观察者模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;单例模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[ Netty ] 1.Netty基础</title>
        <link>https://example.com/p/netty-1.netty%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Tue, 05 Jan 2021 10:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/netty-1.netty%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;h1 id=&#34;netty基础&#34;&gt;Netty基础&lt;/h1&gt;
&lt;h2 id=&#34;从一答一问开始netty&#34;&gt;从一答一问开始Netty&lt;/h2&gt;
&lt;h3 id=&#34;1-为什么用netty&#34;&gt;1. 为什么用Netty？&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;a. Netty是一个基于JDK NIO的Client/Server架构的框架。可以快速进行网络开发&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
b. 相比JDK NIO，极大简化TCP、UDP套接字服务器网络变成，并且性能、安全性出色&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
c. 支持多种协议：FTP、SMTP、HTTP以及各种二进制和基于文本的传统协议&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
d. 统一的API、支持多种传输类型&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;阻塞、非阻塞I/O&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
e. 简单且强大的线程模型&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
f. 自带编解码器解决粘包、拆包问题&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
g. 自带各种协议栈&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
h. 安全性不错，支持完整的SSL/TLS及StartTLS协议&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
i. 相比JDK NIO，API具有更高吞吐量、更低延迟、更低资源消耗和更少的内存复制&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
j. 成熟项目很多：Dubbo、RocketMQ。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-netty应用场景&#34;&gt;2. Netty应用场景&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;a. RPC框架的网络通信工具
b. 自实现HTTP服务器
c. 实现即时通信系统
d. 实现消息推送系统
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-netty核心组件&#34;&gt;3. Netty核心组件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Channel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对网络操作的抽象类。除I/O基本操作之外，支持&lt;code&gt;bind()&lt;/code&gt;,&lt;code&gt;connect()&lt;/code&gt;,&lt;code&gt;read()&lt;/code&gt;,&lt;code&gt;write()&lt;/code&gt;操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;EventLoop&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;EventLoop是Netty的核心抽象，用于处理连接在生命周期中所发生的事件。
主要作用：负责监听网络事件并调用事件处理器进行相关的I/O操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/strong&gt; 负责处理注册到其上的 &lt;strong&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/strong&gt; 处理I/O操作，两者配合参与I/O操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ChannelFuture&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Netty是&lt;code&gt;异步非阻塞&lt;/code&gt;，所有的I/O操作都是异步。所以不可以立即得到操作结果。但是&lt;/p&gt;
&lt;p&gt;（1）通过 &lt;strong&gt;&lt;code&gt;ChannelFuture&lt;/code&gt;&lt;/strong&gt; 接口的 &lt;strong&gt;&lt;code&gt;addListener()&lt;/code&gt;&lt;/strong&gt; 注册一个 &lt;strong&gt;&lt;code&gt;ChannelFutureListener&lt;/code&gt;&lt;/strong&gt; 对象，操作执行成功或失败后，监听会自动触发返回结果；&lt;/p&gt;
&lt;p&gt;（2）也可以通过 &lt;strong&gt;&lt;code&gt;ChannelFuture&lt;/code&gt;&lt;/strong&gt; 的 &lt;strong&gt;&lt;code&gt;channel()&lt;/code&gt;&lt;/strong&gt; 获取关联的 &lt;strong&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/strong&gt; 对象；&lt;/p&gt;
&lt;p&gt;（3) 也可以通过 &lt;strong&gt;&lt;code&gt;ChannelFuture&lt;/code&gt;&lt;/strong&gt; 的 &lt;strong&gt;&lt;code&gt;sync()&lt;/code&gt;&lt;/strong&gt; 进行让异步的操作变成同步。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ChannelHandler&lt;/strong&gt;与&lt;strong&gt;ChannelPipeline&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ChannelHandler&lt;/strong&gt; 是消息的具体处理器。他负责处理读写操作、客户端连接等事情。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ChannelPipeline&lt;/strong&gt; 为 &lt;strong&gt;ChannelHandler&lt;/strong&gt; 链提供了一个容器并定义了用于沿着链传播入站和出站事件流的 API 。当 &lt;strong&gt;Channel&lt;/strong&gt; 被创建时，它会被自动地分配到它专属的 &lt;strong&gt;ChannelPipeline&lt;/strong&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们可以在 ChannelPipeline 上通过 addLast() 方法添加一个或者多个ChannelHandler ，因为一个数据或者事件可能会被多个 Handler 处理。当一个 ChannelHandler 处理完之后就将数据交给下一个 ChannelHandler 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-netty线程模型&#34;&gt;4. Netty线程模型&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;单线程模型&lt;/p&gt;
&lt;p&gt;一个线程需要执行处理所有的 accept、read、decode、process、encode、send 事件。对于高负载、高并发，并且对性能要求比较高的场景不适用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//1.eventGroup既用于处理客户端连接，又负责具体的处理。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;EventLoopGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventGroup&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NioEventLoopGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//2.创建服务端启动引导/辅助类：ServerBootstrap
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;ServerBootstrap&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ServerBootstrap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;boobtstrap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eventGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//......
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多线程模型&lt;/p&gt;
&lt;p&gt;一个 Acceptor 线程只负责监听客户端的连接，一个 NIO 线程池负责具体处理
满足绝大部分应用场景，并发连接量不大的时候没啥问题，但是遇到并发连接大的时候就可能会出现问题，成为性能瓶颈。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 1.bossGroup 用于接收连接，workerGroup 用于具体的处理
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EventLoopGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bossGroup&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NioEventLoopGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;EventLoopGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;workerGroup&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NioEventLoopGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//2.创建服务端启动引导/辅助类：ServerBootstrap
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;ServerBootstrap&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ServerBootstrap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//3.给引导类配置两大线程组,确定了线程模型
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bossGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;workerGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//......
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主从多线程模型&lt;/p&gt;
&lt;p&gt;从一个 主线程 NIO 线程池中选择一个线程作为 Acceptor 线程，绑定监听端口，接收客户端连接的连接，其他线程负责后续的接入认证等工作。连接建立完成后，Sub NIO 线程池负责具体处理 I/O 读写。如果多线程模型无法满足你的需求的时候，可以考虑使用主从多线程模型 。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 1.bossGroup 用于接收连接，workerGroup 用于具体的处理
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EventLoopGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bossGroup&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NioEventLoopGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;EventLoopGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;workerGroup&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NioEventLoopGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//2.创建服务端启动引导/辅助类：ServerBootstrap
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;ServerBootstrap&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ServerBootstrap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//3.给引导类配置两大线程组,确定了线程模型
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bossGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;workerGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//.....
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;5-eventloopgroup是什么与eventloop关系&#34;&gt;5. EventLoopGroup是什么？与EventLoop关系。&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;EventLoop&lt;/code&gt; 的主要作用实际就是负责监听网络事件并调用事件处理器进行相关 I/O 操作的处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;EventLoopGroup&lt;/code&gt; 包含多个 &lt;code&gt;EventLoop&lt;/code&gt;（每一个 &lt;code&gt;EventLoop&lt;/code&gt; 通常内部包含一个线程）。
并且 EventLoop 处理的 I/O 事件都将在它专有的 Thread 上被处理，即 Thread 和 EventLoop 属于 1 : 1 的关系，从而保证线程安全。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BossEventLoopGroup&lt;/code&gt; &lt;code&gt;用于接收连接，WorkerEventLoopGroup&lt;/code&gt; 用于具体的处理（消息的读写以及其他逻辑处理）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当客户端通过 &lt;strong&gt;connect()&lt;/strong&gt; 连接服务端时，&lt;code&gt;BossEventLoopGroup&lt;/code&gt; 处理客户端连接请求。当客户端处理完成后，会将这个连接提交给 &lt;code&gt;WorkerEventLoopGroup&lt;/code&gt; 来处理，然后 &lt;code&gt;WorkerEventLoopGroup&lt;/code&gt; 负责处理其 IO 相关操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;6-netty中tcp粘包拆包&#34;&gt;6. Netty中TCP粘包、拆包&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;TCP 粘包/拆包&lt;/strong&gt; 就是基于 TCP 发送数据的时候，出现了多个字符串“粘”在了一起或者一个字符串被“拆”开的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决办法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Netty 自带的解码器
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;LineBasedFrameDecoder&lt;/strong&gt; : 发送端发送数据包的时候，每个数据包之间以换行符作为分隔，&lt;strong&gt;LineBasedFrameDecoder&lt;/strong&gt; 的工作原理是它依次遍历 &lt;strong&gt;ByteBuf&lt;/strong&gt; 中的可读字节，判断是否有换行符，然后进行相应的截取。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DelimiterBasedFrameDecoder&lt;/strong&gt; : 可以自定义分隔符解码器，&lt;strong&gt;LineBasedFrameDecoder&lt;/strong&gt; 实际上是一种特殊的 &lt;strong&gt;DelimiterBasedFrameDecoder&lt;/strong&gt; 解码器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FixedLengthFrameDecoder&lt;/strong&gt;: 固定长度解码器，它能够按照指定的长度对消息进行相应的拆包。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LengthFieldBasedFrameDecoder&lt;/strong&gt; + &lt;strong&gt;LengthFieldPrepender&lt;/strong&gt; 配合使用: 处理粘拆包的主要思想是在生成的数据包中添加一个长度字段，用于记录当前数据包的长度。(&lt;strong&gt;分为有头部的拆包与粘包、长度字段在前且有头部的拆包与粘包、多扩展头部的拆包与粘包。&lt;/strong&gt;)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LengthFieldBasedFrameDecoder&lt;/code&gt;会按照参数指定的包长度偏移量数据对接收到的数据进行解码，从而得到目标消息体数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LengthFieldPrepender&lt;/code&gt;则会在响应的数据前面添加指定的字节数据，这个字节数据中保存了当前消息体的整体字节数据长度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;自定义序列化编解码器
&lt;ul&gt;
&lt;li&gt;通过继承&lt;code&gt;LengthFieldBasedFrameDecoder&lt;/code&gt;和&lt;code&gt;LengthFieldPrepender&lt;/code&gt;来实现粘包和拆包的处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-netty长连接心跳机制&#34;&gt;7. Netty长连接、心跳机制&lt;/h3&gt;
&lt;p&gt;在 TCP 保持长连接的过程中，可能会出现断网等网络异常出现，异常发生的时候， client 与 server 之间如果没有交互的话，它们是无法发现对方已经掉线的。为了解决这个问题, 我们就需要引入 &lt;strong&gt;心跳机制&lt;/strong&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;心跳机制的工作原理是:&lt;/strong&gt; 在 client 与 server 之间在一定时间内没有数据交互时, 即处于 idle 状态时, 客户端或服务器就会发送一个特殊的数据包给对方, 当接收方收到这个数据报文后, 也立即发送一个特殊的数据报文, 回应发送方, 此即一个 PING-PONG 交互。所以, 当某一端收到心跳消息后, 就知道了对方仍然在线, 这就确保 TCP 连接的有效性.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Netty中的心跳机制实现：&lt;/strong&gt; TCP 实际上自带的就有长连接选项，本身是也有心跳包机制，也就是 TCP 的选项：SO_KEEPALIVE。但是，TCP 协议层面的长连接灵活性不够。所以，一般情况下我们都是在应用层协议上实现自定义心跳机制的，也就是在 Netty 层面通过编码实现。通过 Netty 实现心跳机制的话，核心类是 IdleStateHandler&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8-netty零拷贝&#34;&gt;8. Netty零拷贝&lt;/h3&gt;
&lt;p&gt;在 OS 层面上的 Zero-copy 通常指避免在 &lt;code&gt;用户态(User-space)&lt;/code&gt; 与 &lt;code&gt;内核态(Kernel-space)&lt;/code&gt; 之间来回拷贝数据。而在 Netty 层面，零拷贝主要体现在对于数据操作的优化。&lt;/p&gt;
&lt;p&gt;Netty 中的零拷贝体现在以下几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 Netty 提供的 &lt;code&gt;CompositeByteBuf&lt;/code&gt; 类， 可以将多个ByteBuffer 合并为一个逻辑上的 ByteBuffer， &lt;strong&gt;避免了各个 ByteBuf 之间的拷贝&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;ByteBuffer 支持 slice 操作， 因此可以将 ByteBuf 分解为多个共享同一个存储区域的 ByteBuf， &lt;strong&gt;避免了内存的拷贝&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;通过 FileRegion 包装的FileChannel.tranferTo 实现文件传输， 可以直接将文件缓冲区的数据发送到目标 Channel， &lt;strong&gt;避免了传统通过循环 write 方式导致的内存拷贝问题&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>[ Interview ] 2.面试准备</title>
        <link>https://example.com/p/interview-2.%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</link>
        <pubDate>Tue, 05 Jan 2021 01:13:47 +0800</pubDate>
        
        <guid>https://example.com/p/interview-2.%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</guid>
        <description>&lt;h1 id=&#34;面试准备&#34;&gt;面试准备&lt;/h1&gt;
&lt;h2 id=&#34;一学习路线&#34;&gt;一、学习路线&lt;/h2&gt;
&lt;h3 id=&#34;1java基础&#34;&gt;1.Java基础&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;面向对象特性：封装、继承、多态(动态绑定、向上转型)&lt;/li&gt;
&lt;li&gt;泛型、类型擦除&lt;/li&gt;
&lt;li&gt;反射、其原理及其优缺点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;,&lt;code&gt;final&lt;/code&gt;关键字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt;,&lt;code&gt;StringBuffer&lt;/code&gt;,&lt;code&gt;StringBuilder&lt;/code&gt;底层区别&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BIO&lt;/code&gt;、&lt;code&gt;NIO&lt;/code&gt;、&lt;code&gt;AIO&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Object类的方法&lt;/li&gt;
&lt;li&gt;自动拆箱与自动装箱&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2集合框架&#34;&gt;2.集合框架&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;List
&lt;ul&gt;
&lt;li&gt;ArrayList&lt;/li&gt;
&lt;li&gt;LinkedList&lt;/li&gt;
&lt;li&gt;Vector&lt;/li&gt;
&lt;li&gt;CopyOnWriteArrayList&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set
&lt;ul&gt;
&lt;li&gt;HashSet&lt;/li&gt;
&lt;li&gt;TreeSet&lt;/li&gt;
&lt;li&gt;LinkedHashSet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Queue
&lt;ul&gt;
&lt;li&gt;PriorityQueue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Map
&lt;ul&gt;
&lt;li&gt;HashMap&lt;/li&gt;
&lt;li&gt;TreeMap&lt;/li&gt;
&lt;li&gt;LinkedMap&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fast-fail，fast-safe机制&lt;/li&gt;
&lt;li&gt;源码分析(底层数据结构，插入、扩容过程)、线程安全分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3java虚拟机&#34;&gt;3.Java虚拟机&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;类加载机制、双亲委派模式、3种加载器(&lt;code&gt;BootstrapClassLoader&lt;/code&gt;，&lt;code&gt;ExtensionClassLoader&lt;/code&gt;，&lt;code&gt;ApplicationClassLoader&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;运行时内存分区(PC，Java虚拟机栈，本地方法栈，堆，方法区[永久代、元空间])&lt;/li&gt;
&lt;li&gt;JMM: Java内存模型分析&lt;/li&gt;
&lt;li&gt;引用计数、可达性分析&lt;/li&gt;
&lt;li&gt;垃圾回收算法：标记-清除、标记-整理、复制&lt;/li&gt;
&lt;li&gt;垃圾回收器：比较区别(Serial，ParNew，ParallelScavenge，CMS，G1)&lt;/li&gt;
&lt;li&gt;强、软、弱、虚引用&lt;/li&gt;
&lt;li&gt;内存溢出、内存泄漏排查&lt;/li&gt;
&lt;li&gt;JVM调优、常用命令&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4java并发&#34;&gt;4.Java并发&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;三种线程初始化方法的区别(&lt;code&gt;Thread&lt;/code&gt;,&lt;code&gt;Callable&lt;/code&gt;,&lt;code&gt;Runnable&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;线程池(ThreadPoolExecutor，7大参数、原理、四种拒绝策略、四个类型[Fixed、Single、Cached、Scheduled])&lt;/li&gt;
&lt;li&gt;Synchronized&lt;/li&gt;
&lt;li&gt;使用：方法(静态、一般方法)；代码块(this，ClassName.class)&lt;/li&gt;
&lt;li&gt;jdk1.6优化：锁粗化、锁消除、自适应自旋锁、偏向锁、轻量级锁&lt;/li&gt;
&lt;li&gt;锁升级的过程与细节：无锁-&amp;gt;偏向锁-&amp;gt;轻量级锁-&amp;gt;重量级锁(不可逆)&lt;/li&gt;
&lt;li&gt;ReentrantLock:与Synchronized区别、公平锁、非公平锁、可中断锁、原理、用法&lt;/li&gt;
&lt;li&gt;有界、无界任务队列，手写BlockingQueue&lt;/li&gt;
&lt;li&gt;乐观锁：CAS(优缺点，ABA问题，DCAS)&lt;/li&gt;
&lt;li&gt;悲观锁&lt;/li&gt;
&lt;li&gt;ThreadLocal：底层数据结构、ThreadLocalMap、原理、应用场景&lt;/li&gt;
&lt;li&gt;Atomic类：原理、应用场景&lt;/li&gt;
&lt;li&gt;Volatile：原理、有序性、可见性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5mysql&#34;&gt;5.MySQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;架构：Server层、引擎层(缓存、连接器、分析器、优化器、处理器)&lt;/li&gt;
&lt;li&gt;引擎：InnoDB、MyISAM、Memory的区别&lt;/li&gt;
&lt;li&gt;聚簇索引、非聚簇索引区别(从二叉平衡搜索树复习[AVL，红黑树]  -&amp;gt;  B树  -&amp;gt; B+树)&lt;/li&gt;
&lt;li&gt;MySQL、SQL语句优化&lt;/li&gt;
&lt;li&gt;覆盖索引、最左前缀匹配&lt;/li&gt;
&lt;li&gt;当前读、快照读&lt;/li&gt;
&lt;li&gt;MVCC原理(事务ID、隐藏字段、Undo、ReadView)&lt;/li&gt;
&lt;li&gt;Gap Lock、Next-Key Lock、Record Lock&lt;/li&gt;
&lt;li&gt;三大范式&lt;/li&gt;
&lt;li&gt;常用SQL&lt;/li&gt;
&lt;li&gt;连接：自连接、内连接(等值、非等值、自然连接)、外连接(左、右、全)&lt;/li&gt;
&lt;li&gt;Group BY 与 Having&lt;/li&gt;
&lt;li&gt;Explain&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5spring&#34;&gt;5.Spring&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;AOP原理(JDK动态代理、CGLIB动态代理)、IOC原理&lt;/li&gt;
&lt;li&gt;SpringBean生命周期&lt;/li&gt;
&lt;li&gt;SpringMVC原理&lt;/li&gt;
&lt;li&gt;SpringBoot常用注解&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6unix-network&#34;&gt;6.Unix Network&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OSI模型、TCP/IP模型&lt;/li&gt;
&lt;li&gt;TCP、UDP区别&lt;/li&gt;
&lt;li&gt;TCP可靠性传输原理
&lt;ul&gt;
&lt;li&gt;重传&lt;/li&gt;
&lt;li&gt;流量控制&lt;/li&gt;
&lt;li&gt;拥塞控制&lt;/li&gt;
&lt;li&gt;序列号、确认应答号&lt;/li&gt;
&lt;li&gt;校验和&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三次握手、四次挥手原理&lt;/li&gt;
&lt;li&gt;timewait、closewait&lt;/li&gt;
&lt;li&gt;HTTP
&lt;ul&gt;
&lt;li&gt;报文格式&lt;/li&gt;
&lt;li&gt;协议&lt;/li&gt;
&lt;li&gt;状态码&lt;/li&gt;
&lt;li&gt;无状态解决(Cookie、Session)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTPS
&lt;ul&gt;
&lt;li&gt;CA证书&lt;/li&gt;
&lt;li&gt;对称、非对称加密&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNS解析过程原理&lt;/li&gt;
&lt;li&gt;IP、ICMP、ARP、ROUTE协议&lt;/li&gt;
&lt;li&gt;攻击手段：XSS、CSRF、SQL注入、DOS、DDOS&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7os&#34;&gt;7.OS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;进程、线程、协程区别&lt;/li&gt;
&lt;li&gt;进程通信方式(管道、消息队列、共享内存、信号、信号量、socket)&lt;/li&gt;
&lt;li&gt;进程调度算法：
&lt;ul&gt;
&lt;li&gt;先进先出&lt;/li&gt;
&lt;li&gt;短作业优先&lt;/li&gt;
&lt;li&gt;时间片轮换&lt;/li&gt;
&lt;li&gt;多级反馈队列&lt;/li&gt;
&lt;li&gt;优先级调度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存管理
&lt;ul&gt;
&lt;li&gt;页面置换算法：手写LRU&lt;/li&gt;
&lt;li&gt;分段&lt;/li&gt;
&lt;li&gt;虚拟内存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二面试题锦&#34;&gt;二、面试题锦&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.算法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;手写最大堆&lt;/li&gt;
&lt;li&gt;一道 LeetCode 难问题：接雨水（动态规划解决）&lt;/li&gt;
&lt;li&gt;手写 LRU（要求用泛型写）、手写 DCL&lt;/li&gt;
&lt;li&gt;一道动态规划题目：不同路径&lt;/li&gt;
&lt;li&gt;手写个归并排序&lt;/li&gt;
&lt;li&gt;了解 A*算法吗？&lt;/li&gt;
&lt;li&gt;手写地杰斯特拉算法？&lt;/li&gt;
&lt;li&gt;说说深度优先搜索算法、回溯算法&lt;/li&gt;
&lt;li&gt;一道算法题：一个走迷宫问题，DFS+回溯解决&lt;/li&gt;
&lt;li&gt;一道算法题：最长公共子串&lt;/li&gt;
&lt;li&gt;两个栈实现队列&lt;/li&gt;
&lt;li&gt;最近公共祖先节点&lt;/li&gt;
&lt;li&gt;一道算法题：完全平方数（动态规划）&lt;/li&gt;
&lt;li&gt;手写一个堆排序。&lt;/li&gt;
&lt;li&gt;手写快排&lt;/li&gt;
&lt;li&gt;算法题：按 K 位反转链表&lt;/li&gt;
&lt;li&gt;一百亿个数，n 个机器，怎么排序？（桶排序）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;2.设计模式&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设计模式了解吗？几大类型？谈谈工厂模式？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;3.Java 集合&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;谈一下 Java 集合框架？HashMap 线程安全的吗？会出现什么问题？&lt;/li&gt;
&lt;li&gt;说说 fast-fail 和 fast-safe？&lt;/li&gt;
&lt;li&gt;讲讲 HashMap 的原理，put 过程？resize 过程？线程安全吗？死循环问题&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;4.Java 并发&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;知道哪些 Java 的锁？CAS 的缺点？Synchronized 优化内容？锁升级过程？&lt;/li&gt;
&lt;li&gt;线程池了解吗？原理？可以写个 BlockingQueue 吗？&lt;/li&gt;
&lt;li&gt;了解死锁吗？怎么解决？&lt;/li&gt;
&lt;li&gt;哪些对象可以作为 GC ROOTS&lt;/li&gt;
&lt;li&gt;谈谈公平锁和非公平锁？&lt;/li&gt;
&lt;li&gt;Synchronized 和 ReentrantLock 区别&lt;/li&gt;
&lt;li&gt;ThreadLocal 了解吗？原理？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;5.JVM&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;谈谈Java虚拟机你的认识？垃圾回收算法？垃圾回收器？&lt;/li&gt;
&lt;li&gt;Java是怎么进行垃圾回收的？&lt;/li&gt;
&lt;li&gt;谈谈Java虚拟机？类加载机制？&lt;/li&gt;
&lt;li&gt;知道双亲委派模式吗？有什么好处？&lt;/li&gt;
&lt;li&gt;Java运行时内存分区？&lt;/li&gt;
&lt;li&gt;讲一下CMS垃圾回收过程&lt;/li&gt;
&lt;li&gt;OOM 怎么排查？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;6.MySQL&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;InnoDB 和 MyISAM 区别？谈谈 MySQL 的各种引擎？&lt;/li&gt;
&lt;li&gt;知道聚簇索引和非聚簇索引吗？B 树和 B+树区别？&lt;/li&gt;
&lt;li&gt;说说 MySQL 的架构&lt;/li&gt;
&lt;li&gt;说说 MYSQL 优化策略？&lt;/li&gt;
&lt;li&gt;覆盖索引和非覆盖索引区别？&lt;/li&gt;
&lt;li&gt;MYSQL 优化方法有哪些？&lt;/li&gt;
&lt;li&gt;MySQL 的索引为什么快？有哪些索引？原理数据结构？&lt;/li&gt;
&lt;li&gt;谈谈各种索引？为什么用 B+树不用 B 树？&lt;/li&gt;
&lt;li&gt;B+ Tree索引和Hash索引区别？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;7. Redis&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;8.Spring&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;谈谈 Spring AOP 和 IOC&lt;/li&gt;
&lt;li&gt;SpringBoot 常用哪些注解？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;9.Mybatis&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mybatis&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;10.ElasticSearch&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ES&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;11.Kafka&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Kafka&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;12.Dubbo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;13.Netty&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;14.RocketMQ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;15.Zookeeper&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;16.OS&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DNS 解析过程&lt;/li&gt;
&lt;li&gt;进程间通信方式？哪种最高效？&lt;/li&gt;
&lt;li&gt;ARP 过程？&lt;/li&gt;
&lt;li&gt;进程调度算法？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;17.Network&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TCP 如何保证可靠性传输？（校验和，序列号和确认应答号，重传，流量控制，拥塞控制）&lt;/li&gt;
&lt;li&gt;TCP拥塞控制算法？&lt;/li&gt;
&lt;li&gt;TCP 和 UDP 区别？&lt;/li&gt;
&lt;li&gt;HTTP 的状态码记得哪些？&lt;/li&gt;
&lt;li&gt;ICMP 是哪层的？有什么用？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;18.分布式系统&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;谈谈你对分布式系统的认识？&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>[ Interview ] 1.面试准备</title>
        <link>https://example.com/p/interview-1.%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</link>
        <pubDate>Thu, 31 Dec 2020 11:13:47 +0800</pubDate>
        
        <guid>https://example.com/p/interview-1.%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</guid>
        <description>&lt;h1 id=&#34;面试准备&#34;&gt;面试准备&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Java线程池
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; JDK中JUC包
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; JVM调优：如果发现某个服务慢，如何排查，如何处理；发现某个服务器CPU100%了，应该如何处理
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;遵循六步走原则：
  1）找到罪魁祸首的进程
  2）分析进程对应的线程
  3）生成JVM当前时刻线程快照
  4）分析定位代码问题
  5）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 垃圾回收器G1与GC算法CMS
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Tomcat 如何实现类隔离
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Spring IOC原理
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Spring AOP原理
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Spring事务
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Dubbo服务发现、注册流程
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Dubbo通信原理
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Dubbo SPI与Java SPI
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Zookeeper选举协议
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 大数据量的排序如何处理
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 如何判断链表是回文链表、快排序、归并排序
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; MySQL调优：B+ Tree索引、Hash索引
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Mybatis的一、二级缓存
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Mybatis工作原理
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Redis Bitmap&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[ Dubbo ] 2. Dubbo中的SPI</title>
        <link>https://example.com/p/dubbo-2.-dubbo%E4%B8%AD%E7%9A%84spi/</link>
        <pubDate>Fri, 25 Dec 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/dubbo-2.-dubbo%E4%B8%AD%E7%9A%84spi/</guid>
        <description>&lt;h1 id=&#34;dubbo中的spi&#34;&gt;Dubbo中的SPI&lt;/h1&gt;
&lt;h2 id=&#34;1-dubbo-spi与java-spi&#34;&gt;&lt;strong&gt;1. Dubbo SPI与Java SPI&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SPI(Service Provider Interface)，主要用于框架，框架定义接口。
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不同使用者将存在不同需求，也必然出现不同实现方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而SPI就是通过定义一个特定的位置，Java SPI约定在Classpath下的&lt;code&gt;META-INF/services/&lt;/code&gt;路径下创建一个以服务接口命名的文件，然后文件中记录的是此jar包提供的具体实现类的全限定名，并由服务加载器&lt;code&gt;读取配置文件&lt;/code&gt;，&lt;code&gt;加载实现类&lt;/code&gt;，这样可以在运行时&lt;code&gt;动态为接口替换实现类&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dubbo SPI&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;并非是Java原生的SPI，而是重新实现的SPI。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Java SPI通过ServiceLoader进行加载；&lt;/li&gt;
&lt;li&gt;Dubbo SPI通过ExtensionLoader进行拓展加载。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;支持的注解：
&lt;ul&gt;
&lt;li&gt;@SPI(标记为拓展接口)&lt;/li&gt;
&lt;li&gt;@Adaptive(自适应拓展实现类标志)&lt;/li&gt;
&lt;li&gt;@Activate(自动激活条件标记)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;配置文件放在classpath下的META-INF/dubbo/以及
META-INF/dubbo/internal下&lt;/li&gt;
&lt;li&gt;Dubbo SPI增加了对拓展点IOC和AOP的支持，一个拓展点可以直接通过Setter注入其他拓展点。&lt;/li&gt;
&lt;li&gt;Java SPI会一次性实例化拓展点所有实现，如果有拓展实现初始化过程很耗时，并且用不上，将会造成资源浪费。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dubbo中SPI的具体实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;协议扩展(Protocol)&lt;/a&gt;：&lt;code&gt;RPC协议扩展，用于封装远程调用细节&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;调用拦截扩展(Filter)&lt;/a&gt;：&lt;code&gt;服务提供方和服务消费方调用过程拦截，Dubbo本身大多数功能都是基于此扩展点实现，每次远程方法执行，该拦截都会被执行&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;引用监听扩展(InvokerListener)&lt;/a&gt;：&lt;code&gt;当有服务被引用时触发此事件&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;暴露监听扩展(ExporterListener)&lt;/a&gt;：&lt;code&gt;当有服务被暴露时触发此事件&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;集群扩展(Cluster)&lt;/a&gt;：&lt;code&gt;当存在多个服务提供方时，将多个服务提供方组成一个集群，并伪装成一个服务提供方&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;路由扩展(RouterFactory)&lt;/a&gt;：&lt;code&gt;从多个服务提供方中选择一个进行调用&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;负载均衡(LoadBalance)&lt;/a&gt;：&lt;code&gt;从多个服务提供方中选择一个进行调用&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;合并扩展(Merger)&lt;/a&gt;：&lt;code&gt;合并返回结果，用于分组聚合&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;注册中心扩展(Registry)&lt;/a&gt;：&lt;code&gt;负责服务的注册与发现&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;监控扩展(Monitor)&lt;/a&gt; ：&lt;code&gt;负责服务调用次数以及调用时间的监控&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;扩展点加载扩展(ExtensionFactory)&lt;/a&gt;：&lt;code&gt;扩展本身的加载容器，可从不同容器加载扩展点&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;动态代理扩展(ProxyFactory)&lt;/a&gt;：&lt;code&gt;将Invoker接口转换成业务接口&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;编译器扩展(Compiler)&lt;/a&gt;： &lt;code&gt;Java代码编译器，用于动态生成字节码，加速调用&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;配置中心扩展(DynamicConfiguration)&lt;/a&gt;：&lt;code&gt;作为Key-Value存储&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;消息派发扩展(Dispatcher)&lt;/a&gt;：&lt;code&gt;通道信息派发器，用于指定线程池模型&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;线程池扩展(ThreadPool)&lt;/a&gt;：&lt;code&gt;服务提供方线程池的实现策略&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;序列化扩展(Serialization)&lt;/a&gt;：&lt;code&gt;将对象转化成字节流，用于网络传输，以及将字节流转为对象，用于接收到字节流数据时还原成对象&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;网络传输扩展(Transporter)&lt;/a&gt;：&lt;code&gt;远程通信的服务器以及客户端传输实现&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;信息交换扩展(Exchange)&lt;/a&gt;：``&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;组网扩展(Networker)&lt;/a&gt;：&lt;code&gt;对等网络节点组网器&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;Telnet命令扩展(TelnetHandler)&lt;/a&gt;：&lt;code&gt;所有服务器均支持telnet访问，用于人工干预&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;状态检查扩展(StatusChecker)&lt;/a&gt;：&lt;code&gt;检查服务依赖各种资源的状态，此状态检查可同时用于telnet的status命令和hosting的status页面&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;容器扩展(Container)&lt;/a&gt;：&lt;code&gt;服务容器扩展，用于自定义加载内容&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;缓存扩展(CacheFactory)&lt;/a&gt;：&lt;code&gt;用于请求参数作为Key，缓存返回结果&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;验证扩展(Validation)&lt;/a&gt;：&lt;code&gt;参数验证扩展点&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;日志适配扩展(LoggerAdapter)&lt;/a&gt;：&lt;code&gt;日志输出适配扩展点&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-详细了解dubbo-spi&#34;&gt;&lt;strong&gt;2. 详细了解Dubbo SPI&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;a-spi注解&#34;&gt;a. SPI注解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用@SPI仅能配置一种实现类，但是可以根据&lt;code&gt;@SPI(&amp;quot;dubbo&amp;quot;)&lt;/code&gt;指定不同的实现类，再调用ExtensionLoader获取实现类的时候，会加载配置文件中key所对应的实现类。&lt;/li&gt;
&lt;li&gt;多个模块编译后会将&lt;code&gt;META-INF/dubbo/&lt;/code&gt;或&lt;code&gt;META-INFO/dubbo/internal/&lt;/code&gt;下的统一拓展点的配置文件中的配置合并在一起。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;b-activate注解&#34;&gt;b. Activate注解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;被@Activate注解注释的扩展点默认被激活启用，还可以通过注解的&lt;code&gt;value&lt;/code&gt;属性指定此扩展点在什么情况下被自动激活&lt;/li&gt;
&lt;li&gt;被@Activate注解注释的扩展点，在获取实现类是不能再使用ExtensionLoader.getExtension(String name)，而应该使用&lt;code&gt;ExtensionLoader.getActivateExtension(URL url, String[] values)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;目的也是为了支持一个扩展点存在多个实现类需要同时启用的场景。&lt;/li&gt;
&lt;li&gt;主要是用扩展点(接口)的实现类上，所以此扩展点被@Activate注解的实现类都会在指定条件下自动激活&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c-adaptive注解&#34;&gt;c. Adaptive注解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Adaptive&lt;/code&gt;注解是Dubbo自适应拓展机制，最重要的三个字应该就是&lt;code&gt;自适应&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;目的： &lt;code&gt;拓展点在方法被调用的时候，根据运行时参数进行加载&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;实现： &lt;code&gt;Dubbo使用javassist为拓展接口生成具有代理功能的代码，然后通过JDK编译这段代码得到Class类，最后在通过反射创建代理类。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;应用：
&lt;ul&gt;
&lt;li&gt;在RPC远程调用过程中，会在url上携带参数，比如调用的目标是XxxService的yy()，而服务提供者XxxService具有多个实现类，那么可以在url上指定使用哪个实现类(配置文件中该实现类的key)，然后在通过SPI获取到此实现类的实例。&lt;/li&gt;
&lt;li&gt;javassist生成的代码，就是拿到方法的url参数，从url中动态获取配置的参数，然后通过SPI加载具体的实现类，最后调用实现类的方法&lt;/li&gt;
&lt;li&gt;所以，先判断方法url参数是否为Null，如果为Null则抛出异常，否则从url中获取参数，如果没有获取到也抛出异常，如果获取到就通过SPI获取实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[ Dubbo ] 3-1. Dubbo SPI中的Protocol扩展点</title>
        <link>https://example.com/p/dubbo-3-1.-dubbo-spi%E4%B8%AD%E7%9A%84protocol%E6%89%A9%E5%B1%95%E7%82%B9/</link>
        <pubDate>Fri, 25 Dec 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/dubbo-3-1.-dubbo-spi%E4%B8%AD%E7%9A%84protocol%E6%89%A9%E5%B1%95%E7%82%B9/</guid>
        <description>&lt;h1 id=&#34;dubbo-spi中的protocol扩展点&#34;&gt;Dubbo SPI中的Protocol扩展点&lt;/h1&gt;
</description>
        </item>
        <item>
        <title>[ Dubbo ] 3-2. Dubbo SPI中的Filter扩展点</title>
        <link>https://example.com/p/dubbo-3-2.-dubbo-spi%E4%B8%AD%E7%9A%84filter%E6%89%A9%E5%B1%95%E7%82%B9/</link>
        <pubDate>Fri, 25 Dec 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/dubbo-3-2.-dubbo-spi%E4%B8%AD%E7%9A%84filter%E6%89%A9%E5%B1%95%E7%82%B9/</guid>
        <description>&lt;h1 id=&#34;dubbo-spi中的filter扩展点&#34;&gt;Dubbo SPI中的Filter扩展点&lt;/h1&gt;
</description>
        </item>
        <item>
        <title>[ Dubbo ] 3. Dubbo通信原理</title>
        <link>https://example.com/p/dubbo-3.-dubbo%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/</link>
        <pubDate>Fri, 25 Dec 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/dubbo-3.-dubbo%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/</guid>
        <description>&lt;h1 id=&#34;dubbo通信原理&#34;&gt;Dubbo通信原理&lt;/h1&gt;
&lt;h2 id=&#34;1-dubbo多线程通信原理&#34;&gt;1. Dubbo多线程通信原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;获取DubboInvoker对象；&lt;/li&gt;
&lt;li&gt;将请求体信息封装在一个Request对象中，Request中会包括一个自增的id；&lt;/li&gt;
&lt;li&gt;然后将Request存到一个ConcurrentHashMap中（key=id，value= DefaultFuture）,将request数据写入Channel&lt;/li&gt;
&lt;li&gt;Consumer Thread执行Defaultfuture#get()方法等待返回结果&lt;/li&gt;
&lt;li&gt;服务提供方创建多线程处理用户请求，并将放回结果封装在Response中（包括Request#id）将response写入Channel&lt;/li&gt;
&lt;li&gt;消费方从Channel中收到数据以后，解析出id，从Map中解析出DefaultFuture唤醒Consumer Thread，返回结果&lt;/li&gt;
&lt;li&gt;DefaultFuture也会启动一个定时程序，检查在timeout内，结果是否返回，如果未返回，将DefaultFuture从map中移除，并抛出超时异常&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[ Dubbo ] 1.Dubbo基础概念</title>
        <link>https://example.com/p/dubbo-1.dubbo%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</link>
        <pubDate>Tue, 22 Dec 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/dubbo-1.dubbo%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</guid>
        <description>&lt;h1 id=&#34;dubbo基础概念&#34;&gt;Dubbo基础概念&lt;/h1&gt;
&lt;h2 id=&#34;1dubbo核心组件&#34;&gt;1.Dubbo核心组件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Provider： 暴露服务的服务提供方&lt;/li&gt;
&lt;li&gt;Consumer： 调用远程服务的消费方&lt;/li&gt;
&lt;li&gt;Register： 服务注册与发现注册中心&lt;/li&gt;
&lt;li&gt;Monitor：  监控中心和访问调用统计&lt;/li&gt;
&lt;li&gt;Container：服务运行时容器&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Dubbo分层主要为业务层、RPC层和Remote层，如果把每层进行详细划分的话，整体划分为：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;业务层：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;service:&lt;/strong&gt; 包含各业务代码的接口与实现；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RPC层：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;config:&lt;/strong&gt; 配置层，主要围绕ServiceConfig(暴露的服务配置)和ReferenceConfig(引用的服务配置)两个类展开，初始化配置信息；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;proxy:&lt;/strong&gt;    服务代理层，不论生产者还是消费者，Dubbo都会生成一个代理类，在调用远程接口时，就可以像本地接口一样，代理层自动做远程调用并返回结果；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;registry:&lt;/strong&gt;    注册层，负责Dubbo框架的服务注册与发现；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cluster:&lt;/strong&gt;     集群容错层，主要负责远程调用失败时的集群容错策略(如快速失败、快速重试等)；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;monitor:&lt;/strong&gt;    监控层，负责监控统计调用次数和调用时间等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;protocol:&lt;/strong&gt;    远程调用层，封装RPC调用具体过程，是Invoker暴露和引用的主要功能入口，负责管理Invoker的整个生命周期；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Remote层：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;exchange:&lt;/strong&gt;  信息交换层，封装请求相应模式，如同步请求转换为异步请求；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;transport:&lt;/strong&gt;  网络传输层，把网络传输抽象为统一接口；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;serialize:&lt;/strong&gt;  序列化层，将需要网络传输的数据极性序列化，转为二进制流。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2dubbo服务注册与发现流程&#34;&gt;2.Dubbo服务注册与发现流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Container负责启动，加载，运行服务提供者&lt;/li&gt;
&lt;li&gt;Provider启动时，向注册中心注册自己并提供服务&lt;/li&gt;
&lt;li&gt;Consumer启动时，向注册中心订阅自已需调用服务&lt;/li&gt;
&lt;li&gt;Register返回服务提供者地址列表给服务消费者，如运行期间，服务提供者发生变动，将通过长连接推送至服务消费者&lt;/li&gt;
&lt;li&gt;Consumer通过负载均衡算法(软方式)，选取注册中心所返回的服务提供者列表中的一个节点进行调用，如果调用失败将尝试其他节点进行调用&lt;/li&gt;
&lt;li&gt;Consumer、Provider将调用次数、时间记录于内存中，并定时每分钟发送至Monitor监控中心&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-1-dubbo服务暴露过程&#34;&gt;3-1. Dubbo服务暴露过程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dubbo 会在 Spring 实例化完 bean 之后，&lt;/li&gt;
&lt;li&gt;在刷新容器最后一步发布 ContextRefreshEvent 事件的时候，通知实现了 ApplicationListener 的 ServiceBean 类进行回调 onApplicationEvent 事件方法。&lt;/li&gt;
&lt;li&gt;Dubbo 会在这个方法中调用 ServiceBean 父类 ServiceConfig 的 export 方法，而该方法真正实现了服务的发布。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-2-dubbo服务引用过程&#34;&gt;3-2. Dubbo服务引用过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;服务暴露之后，客户端就要引用服务，然后才是调用的过程。&lt;/li&gt;
&lt;li&gt;首先客户端根据配置文件信息从注册中心订阅服务&lt;/li&gt;
&lt;li&gt;之后DubboProtocol根据订阅的得到provider地址和接口信息连接到服务端server，开启客户端client，然后创建invoker&lt;/li&gt;
&lt;li&gt;invoker创建完成之后，通过invoker为服务接口生成代理对象，这个代理对象用于远程调用provider，服务的引用就完成了&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-dubbo的管理控制台能做什么&#34;&gt;4. Dubbo的管理控制台能做什么&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;路由规则&lt;/li&gt;
&lt;li&gt;动态配置&lt;/li&gt;
&lt;li&gt;服务降级&lt;/li&gt;
&lt;li&gt;访问控制&lt;/li&gt;
&lt;li&gt;权重调整&lt;/li&gt;
&lt;li&gt;负载均衡等管理功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-dubbo集群容错方案&#34;&gt;5. Dubbo集群容错方案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Failover Cluster(默认方案)
&lt;ul&gt;
&lt;li&gt;失败后自动切换，出现失败将会重试其他服务节点(retries重试次数)&lt;/li&gt;
&lt;li&gt;通常用于读操作，但重试会带来很重的延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Failfast Cluster
&lt;ul&gt;
&lt;li&gt;快速失败&lt;/li&gt;
&lt;li&gt;只发起一次调用，失败后立即抛出异常&lt;/li&gt;
&lt;li&gt;用于写操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Failsafe Cluster
&lt;ul&gt;
&lt;li&gt;失败安全机制&lt;/li&gt;
&lt;li&gt;出现异常时，将进行忽略&lt;/li&gt;
&lt;li&gt;通常用于写入审计日志&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Failback Cluster
&lt;ul&gt;
&lt;li&gt;失败自动恢复&lt;/li&gt;
&lt;li&gt;后台记录下失败请求，通过定时回调进行重试&lt;/li&gt;
&lt;li&gt;常用于消息通知&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Forking Cluster
&lt;ul&gt;
&lt;li&gt;并行调用&lt;/li&gt;
&lt;li&gt;只要存在一个成功就返回&lt;/li&gt;
&lt;li&gt;通常用于实时性较高的读操作，但浪费资源&lt;/li&gt;
&lt;li&gt;可通过设定&lt;code&gt;forks&lt;/code&gt;的值为2，限制最大并行数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Broadcast Cluster
&lt;ul&gt;
&lt;li&gt;广播调用&lt;/li&gt;
&lt;li&gt;任意一台报错则报错，通常用于通知所有提供者更新缓存或者日志等资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-dubbo支持什么协议&#34;&gt;6. Dubbo支持什么协议&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;dubbo：单一长连接、NIO异步通讯，适用于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况&lt;/li&gt;
&lt;li&gt;hessian：短连接，http，适合页面传输、文件传输。与原生hessian服务互操作&lt;/li&gt;
&lt;li&gt;http：适用于同时给应用程序和浏览器使用时&lt;/li&gt;
&lt;li&gt;webservice：适用于系统集成，跨语言使用&lt;/li&gt;
&lt;li&gt;rmi：适用于常规的远程服务方法调用，与原生RMI服务互操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7-dubbo如何做负载均衡&#34;&gt;7. Dubbo如何做负载均衡&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dubbo:service&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;interface=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;loadbalance=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;random&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;dubbo:reference&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;interface=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;loadbalance=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34; random &amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RandomLoadBalance&lt;/strong&gt;: 随机负载均衡(默认方式)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RoundRobinLoadBalance&lt;/strong&gt;: 轮询负载均衡&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LeastActiveLoadBalance&lt;/strong&gt;: 最少活跃调用数(相同活跃数的随机)
&lt;ul&gt;
&lt;li&gt;活跃数指调用前后计数差&lt;/li&gt;
&lt;li&gt;使响应慢的Provider收到更少的请求，因为越慢的provider的调用前后计数差越大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ConsistentHashLoadBalance&lt;/strong&gt;: 一致性Hash负载均衡，相同参数的请求总是落在同一台机器上&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8-dubbo如何实现异步调用&#34;&gt;8. Dubbo如何实现异步调用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;API注入时添加异步调用标识
&lt;ul&gt;
&lt;li&gt;@Reference(interfaceClass=xxx.class,async-true)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;启动类开启异步调用
&lt;ul&gt;
&lt;li&gt;@EnableAsync&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异步调用接口添加异步调用代码
&lt;ul&gt;
&lt;li&gt;RpcContext.getContext.future()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;9-在provider上可以配置consumer端的属性有哪些&#34;&gt;9. 在Provider上可以配置Consumer端的属性有哪些&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;timeout：调用超时&lt;/li&gt;
&lt;li&gt;retries：重试次数(默认是2次)&lt;/li&gt;
&lt;li&gt;LoadBalance：负载均衡算法&lt;/li&gt;
&lt;li&gt;actives：消费者端最大并发调用限制&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dubbo:service&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;interface=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;com.alibaba.hello.api.HelloService&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;version=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;ref=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;helloService&amp;#34;&lt;/span&gt;
   &lt;span class=&#34;na&#34;&gt;timeout=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;300&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;retry=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;loadbalance=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;random&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;actives=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
 
&lt;span class=&#34;nt&#34;&gt;&amp;lt;dubbo:service&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;interface=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;com.alibaba.hello.api.WorldService&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;version=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;ref=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;helloService&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;timeout=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;300&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;retry=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;loadbalance=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;random&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;actives=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;dubbo:method&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;findAllPerson&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;timeout=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;10000&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;retries=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;9&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;loadbalance=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;leastactive&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;actives=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;dubbo:service/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;10-zookeeper和dubbo的关系&#34;&gt;10. Zookeeper和Dubbo的关系&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dubbo将注册中心进行抽象，使得它可以外接不同的存储媒介给注册中心提供服务&lt;/li&gt;
&lt;li&gt;使用Zookeeper作为存储媒介
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;负载均衡：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单注册中心的承载能力是有限的，在流量达到一定程度的时候就需要分流，负载均衡就是为了分流而存在的，一个 ZooKeeper 群配合相应的 Web 应用就可以很容易达到负载均衡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源同步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点之间的数据和资源需要同步，ZooKeeper集群就天然具备有这样的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命名服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过树状结构用于维护全局的服务地址列表&lt;/li&gt;
&lt;li&gt;服务提供者在启动的时候，向 ZooKeeper上的指定节点/dubbo/${serviceName}/providers目录下写入自己的URL地址，这样就可以完成服务发布&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Master选举：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分布式锁：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;独占锁
&lt;ul&gt;
&lt;li&gt;即一次只能有一个线程使用资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;共享锁
&lt;ul&gt;
&lt;li&gt;读锁共享，读写互斥，即可以有多线线程同时读同一个资源，如果要使用写锁也只能有一个线程使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;11-dubbo分层&#34;&gt;11. Dubbo分层&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分为三层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;business层：(业务逻辑层)自己提供接口进行实现、以及一些配置&lt;/li&gt;
&lt;li&gt;RPC层：(RPC调用核心层)封装了调用过程、负载均衡、集群容错、代理功能&lt;/li&gt;
&lt;li&gt;remoting层：对网络传输协议和数据转换的封装&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分为十层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;service：业务逻辑层&lt;/li&gt;
&lt;li&gt;config：配置层，初始化配置信息&lt;/li&gt;
&lt;li&gt;proxy：代理层，为Provider和Consumer提供代理&lt;/li&gt;
&lt;li&gt;register：服务注册层，封装服务注册与发现&lt;/li&gt;
&lt;li&gt;cluster：路由层，封装provider路由与负载均衡&lt;/li&gt;
&lt;li&gt;monitor：监控统计层，提供rpc调用时间、次数监控与统计&lt;/li&gt;
&lt;li&gt;protocol：远程调用层，封装rpc调用&lt;/li&gt;
&lt;li&gt;exchange：信息交换层，封装请求响应模式，同步转异步&lt;/li&gt;
&lt;li&gt;transport：网络传输层，对Netty的封装&lt;/li&gt;
&lt;li&gt;serialize：序列化层，对数据进行序列化、反序列化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;x-dubbo项目结构&#34;&gt;x. Dubbo项目结构&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ tree -L &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
.
├── dubbo-all
├── dubbo-bom
├── dubbo-build-tools
├── dubbo-cluster               &lt;span class=&#34;c1&#34;&gt;# 集群容错模块，涵盖负载均衡策略、集群容错策略及路由&lt;/span&gt;
├── dubbo-common                &lt;span class=&#34;c1&#34;&gt;# 通用逻辑模块，提供工具类和通用类型&lt;/span&gt;
├── dubbo-compatible            &lt;span class=&#34;c1&#34;&gt;# 兼容性模块&lt;/span&gt;
├── dubbo-config                &lt;span class=&#34;c1&#34;&gt;# 配置模块，主要实现API配置、属性配置、XML配置等&lt;/span&gt;
├── dubbo-configcenter          &lt;span class=&#34;c1&#34;&gt;# 动态配置中心模块&lt;/span&gt;
├── dubbo-container             &lt;span class=&#34;c1&#34;&gt;# 容器运行时，采用Main方法加载Spring容器&lt;/span&gt;
├── dubbo-demo                  &lt;span class=&#34;c1&#34;&gt;# 三种远程调用方式实例&lt;/span&gt;
├── dubbo-dependencies          &lt;span class=&#34;c1&#34;&gt;# &lt;/span&gt;
├── dubbo-dependencies-bom
├── dubbo-distribution
├── dubbo-filter                &lt;span class=&#34;c1&#34;&gt;# 过滤器&lt;/span&gt;
├── dubbo-metadata              &lt;span class=&#34;c1&#34;&gt;# 元数据信息&lt;/span&gt;
├── dubbo-monitor               &lt;span class=&#34;c1&#34;&gt;# 监控模块，主要监控接口调用次数及时间等信息&lt;/span&gt;
├── dubbo-plugin                &lt;span class=&#34;c1&#34;&gt;# 插件拓展模块&lt;/span&gt;
├── dubbo-registry              &lt;span class=&#34;c1&#34;&gt;# 服务发现与注册中心模块&lt;/span&gt;
├── dubbo-remoting              &lt;span class=&#34;c1&#34;&gt;# 远程通信模块，为消费者、生产者间提供远程调用能力&lt;/span&gt;
├── dubbo-rpc                   &lt;span class=&#34;c1&#34;&gt;# 抽象各种通信协议以及动态代理(易混淆remoting)&lt;/span&gt;
├── dubbo-serialization
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>[ Kubernetes ] 3-1.深入Service</title>
        <link>https://example.com/p/kubernetes-3-1.%E6%B7%B1%E5%85%A5service/</link>
        <pubDate>Fri, 18 Sep 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/kubernetes-3-1.%E6%B7%B1%E5%85%A5service/</guid>
        <description>&lt;h1 id=&#34;深入service&#34;&gt;深入Service&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Service是Kubernetes最为核心的概念。Service可以为一组具有相同功能的容器应用提供一个统一的入口地址，并且将请求负载分发至后端的各个容器应用上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;1service参数定义&#34;&gt;1.Service参数定义&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 必填，版本号&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 必填&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 必填，元数据&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 必填，Service名称(符合RFC 1035规范)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 必填，命名空间(默认default)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 自定义标签属性列表&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 自定义注解属性列表&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 必填，配置内容详细描述  &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 必填，LabelSelector配置，将选择具有特定Label标签的Pod对象作为管理对象&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 必填，可选值[ClusterIP | NodePort | LoadBalancer]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ClusterIP:虚拟服务IP地址，该地址用于Kubernetes集群内部Pod对象访问，&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#在Node节点上Kube-proxy通过设置的Iptables规则进行转发&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# NodePort:使用宿主机端口，使能够访问各Node的外部客户端通过Node的&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#IP地址和端口号即可访问到应用。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# LoadBalancer:使用外接负载均衡器完成到服务的负载分发，需要&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#spec.status.loadBalaner字段指定外部负载均衡器的IP地址，并同时定义&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#nodePort和clusterIP，用于公有云环境。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 虚拟服务IP地址：当type为ClusterIP时，如果不指定将自动进行分配；也可手动指定。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#当type为LoadBalancer时，必须指定&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusterIP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 是否支持Session，可选值为ClientIP，默认值为空。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#ClientIP表示将同一个客户端(有客户端IP地址决定)的访问请求都转发到同一个后端&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#Pod对象&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sessionAffinity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Service需要暴露的端口列表&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 端口协议：TCP/UDP(默认TCP)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 服务监听端口号&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 需要转发到后端Pod对象的端口号&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;targetPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# type为NodePort时，指定映射到物理机的端口号&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nodePort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# type为LoadBalancer时，设置外部负载均衡器的地址，用于公有云环境。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 外部负载均衡器&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;loadBalancer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>[ Kubernetes ] 2-1.了解Pod对象</title>
        <link>https://example.com/p/kubernetes-2-1.%E4%BA%86%E8%A7%A3pod%E5%AF%B9%E8%B1%A1/</link>
        <pubDate>Thu, 17 Sep 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/kubernetes-2-1.%E4%BA%86%E8%A7%A3pod%E5%AF%B9%E8%B1%A1/</guid>
        <description>&lt;h1 id=&#34;了解pod对象&#34;&gt;了解Pod对象&lt;/h1&gt;
&lt;h4 id=&#34;1pod参数定义&#34;&gt;1.Pod参数定义&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 必填,版本号&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 必填,元数据&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 必填,Pod对象的名称(命名规范需要符合RFC 1035规范)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 必填,Pod对象所属的命名空间,默认值为default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 自定义标签列表(取值类型:List)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 自定义标签注解(取值类型:List)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 必填,Pod对象中容器的详细定义  &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 必填,Pod对象容器列表(取值类型:List)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 必填,容器的名称(需要符合RFC 1035规范)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 必填,容器镜像名称&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 获取镜像的策略，默认值为:Always&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Always: 每次都尝试重新下载镜像&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Never: 仅使用本地镜像&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# IfNotPresent: 如果本地不存在，就下载镜像&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Always | Never | IfNotPresent]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 容器启动命令列表，若不指定则使用镜像打包时使用的启动命令&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 容器的启动命令参数列表&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 容器的工作目录&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;workingDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 挂载到容器内部的存储卷配置(取值类型:List)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 引用Pod定义的共享存储卷的名称，需使用镜像volumes[]部分定义的共享卷名称&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 存储卷在容器内Mount的绝对路径(应少于512个字符)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 是否只读模式,默认false(读写模式)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 容器需要暴露的端口号(取值类型:List)    &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 端口的名称&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 容器需要监听的端口号&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 容器所在主机需要监听的端口号，默认与containerPort相同&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# (设置hostPort时，同一台宿主机将无法启动该容器的第二副本，由于端口占用问题)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 端口协议[TCP/UDP],默认为TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 容器运行前需要设置的环境变量列表&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 环境变量的名称&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 环境变量的值&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 资源限制和资源请求的设置&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 资源限制设置&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;limits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# CPU限制(单位为：core)将用于docker run --cpu-shares参数&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 内存限制(单位为：MiB/GiB)将用于docker run --memory参数&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 资源限制设置(请求)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# CPU请求(单位为：core)将用于容器启动的初始化可用数量&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 内存请求(单位为：MiB/GiB)将用于容器启动的初始化可用数量&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 对Pod对象内各个容器进行安全检查的设置，当探测无响应几次后，将自动重启该容器&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 包含[exec | httpGet | TcpSocket]三种方式，任选其一即可&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;livenessProbe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 需要执行的脚本&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;httpGet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 请求路径&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 请求端口&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;scheme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;httpHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tcpSocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 完成容器启动后首次进行探测的时间(单位为：s)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;initialDelaySeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 对容器健康检查探测等待超时时间(单位为：s)，默认值为1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;timeoutSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 对容器健康检查的探测时间周期(单位为：s)，默认值为10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;periodSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;successThreshold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;failureThreshold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;securityContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;privileged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Pod对象的重启策略，可选值[Always | Never | OnFailure]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Always: Pod对象一旦终止，则不关心容器是如何停止的，kubelet都将重器容器&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Never: Pod对象终止后，kubelet将退出码返回给Master，不再重启该容器&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# OnFailure: 只有当Pod对象以非零退出码终止时，kubelet才会重启该容器&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# (容器正常结束的退出码为零)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;restartPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Always | Never | OnFailure]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 表示将Pod对象调度到包含这些label的Node上(以key:value形式指定)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nodeSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Pull镜像时使用的secret名称(以name:secretValue形式指定)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullSecrets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 是否使用主机模式(默认值为:false)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 如果设置为true，表示容器使用宿主机网络，不再使用Docker网桥&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 该Pod对象将无法在同一台宿主机上启动第二个副本&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostNetwork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 在该Pod对象上定义的共享储存卷列表&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 共享储存卷名称，一个Pod对象中每个储存卷定义一个名称(命名应按照RFC 1035规范)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Pod对象同生命周期的一个临时目录，值为{}空对象&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;emptyDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 挂载Pod对象所在宿主机的目录&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 将用于容器中mount的目录&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 挂载集群中预定义的secret对象到容器内部&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 挂载集群预定义的configMap对象到容器内部&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2pod的基本用法&#34;&gt;2.Pod的基本用法&lt;/h4&gt;
&lt;p&gt;Pod对象可以由1个或者多个容器组合而成。当两个或者多个容器应用为紧耦合关系，应该组合成一个整体对外提供服务，即将这两个容器打包为一个Pod对象。&lt;/p&gt;
&lt;h5 id=&#34;21-静态pod对象&#34;&gt;2.1 静态Pod对象&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;静态Pod对象是由Kubelet进行管理的仅存在于特定Node上的Pod对象。他们不可以通过API Server进行管理，无法与ReplicationController、Deployment或者DaemonSet进行关联，并且kubelet也无法对他们进行健康检查。静态Pod对象总是由kubelet进行创建，并且总是运行在kubelet所在的Node上运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;创建静态Pod对象的两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;配置文件&lt;/p&gt;
&lt;p&gt;a.设置kubelet的启动参数**[&amp;ndash;config]**: 指定kubelet需要监控的配置文件所在的目录，kubelet将会定期扫描该目录，并根据该目录下的*.yaml或者*.json进行创建.
b.重启kubelet服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP方式&lt;/p&gt;
&lt;p&gt;设置kubelet启动参数**[&amp;ndash;manifest-url]**: kubelet将会定期请求此URL下载Pod对象的定义文件，并以*.yaml或*.json文件格式解析，创建Pod对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;22-pod对象容器共享卷&#34;&gt;2.2 Pod对象容器共享卷&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;在同一个Pod对象中的多个容器能够共享Pod对象级别的存储卷。Volume可以被定义为各种类型，容器各自进行挂载操作，将一个Volume挂载为容器内容存储卷。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;配置文件示例：&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;volume-pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tomcat&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tomcat&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;app-logs&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/usr/local/tomcat/log&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;logreader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;busybox&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sh&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tail -f /logs/catalina*.log&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;app-logs&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/logs&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;app-logs &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;app-logs&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;emptyDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;23-pod对象的配置管理&#34;&gt;2.3 Pod对象的配置管理&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;为了提高应用部署的复用能力以及灵活性，可以将应用所需要的配置文件与程序进行分离。将应用打包为容器镜像后，可以通过环境变量配置、挂载外部文件的方式在创建容器时进行配置注入，但唯一的缺点&lt;strong&gt;维护性&lt;/strong&gt;与&lt;strong&gt;复杂性&lt;/strong&gt;将会在大规模容器集群中所体现。但在Kubernetes中可以通过&lt;strong&gt;ConfigMap&lt;/strong&gt;进行管理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1）ConfigMap的概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成为容器内的环境变量&lt;/li&gt;
&lt;li&gt;设置容器的启动命令参数&lt;/li&gt;
&lt;li&gt;通过Volume的形式挂载到容器内部&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ConfigMap以一个或者多个&lt;code&gt;[Key:Value]&lt;/code&gt;的形式保存在Kubernetes系统中。可以通过&lt;code&gt;*.yaml&lt;/code&gt;配置文件或者&lt;code&gt;kubelet create [-f configmap.yaml]&lt;/code&gt;命令进行创建配置管理内容。&lt;/p&gt;
&lt;p&gt;2）创建ConfigMap资源对象&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a) *.yaml实例&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ConfigMap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cm-appvars&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apploglevel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;appdatadir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/var/data    &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;b) kubelet命令&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1.创建configmap.yaml配置文件&lt;/span&gt;
kubelet create -f cm-appvars.yaml
&amp;gt; configmap &lt;span class=&#34;s2&#34;&gt;&amp;#34;cm-appvars&amp;#34;&lt;/span&gt; created

&lt;span class=&#34;c1&#34;&gt;# 2.查看创建完成的配置文件&lt;/span&gt;
kubelet get configmap
&lt;span class=&#34;c1&#34;&gt;#   NAME        DATA    AGE&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#   cm-appvars   2       3s&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 3.查看指定配置的详细内容&lt;/span&gt;
kubelet get configmap cm-appvars -o yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>[ Kubernetes ] 2-2.SpringBoot--Pods项目初体验</title>
        <link>https://example.com/p/kubernetes-2-2.springboot-pods%E9%A1%B9%E7%9B%AE%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
        <pubDate>Thu, 17 Sep 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/kubernetes-2-2.springboot-pods%E9%A1%B9%E7%9B%AE%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
        <description>&lt;h1 id=&#34;springboot--pods项目初体验&#34;&gt;SpringBoot&amp;ndash;Pods项目初体验&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;在SpringBoot项目中通过fabric8打包插件构建docker镜像&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过Kubernetes的接口请求Pod对象，相信信息如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pod&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;kubernetes-hello-world-779c4c748b-2rv27&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;generateName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;kubernetes-hello-world-779c4c748b-&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;selfLink&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/api/v1/namespaces/default/pods/kubernetes-hello-world-779c4c748b-2rv27&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;uid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dea46f9f-cd4b-11e9-b38e-025000000001&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;resourceVersion&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;34209&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;creationTimestamp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2019-09-02T06:35:35Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;kubernetes-hello-world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;org.springframework.cloud&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;pod-template-hash&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;779c4c748b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;provider&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;fabric8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1.1.0.M2&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;fabric8.io/docs-url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;scp://static.springframework.org/var/www/domains/springframework.org/static/htdocs/spring-cloud/docs/kubernetes-hello-world/1.1.0.M2/spring-cloud-kubernetes/spring-cloud-kubernetes-examples/kubernetes-hello-world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;fabric8.io/iconUrl&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;img/icons/spring-boot.svg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;fabric8.io/metrics-path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dashboard/file/kubernetes-pods.json/?var-project=kubernetes-hello-world\u0026var-version=1.1.0.M2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;fabric8.io/scm-con-url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;scm:git:git://github.com/spring-cloud-incubator/spring-cloud-kubernetes.git/spring-cloud-kubernetes-examples/kubernetes-hello-world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;fabric8.io/scm-devcon-url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;scm:git:ssh://git@github.com/spring-cloud-incubator/spring-cloud-kubernetes.git/spring-cloud-kubernetes-examples/kubernetes-hello-world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;fabric8.io/scm-tag&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HEAD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;fabric8.io/scm-url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://github.com/spring-cloud-incubator/spring-cloud-kubernetes/spring-cloud-kubernetes-examples/kubernetes-hello-world&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;ownerReferences&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;apps/v1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ReplicaSet&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;kubernetes-hello-world-779c4c748b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;uid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dea3c6a5-cd4b-11e9-b38e-025000000001&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;controller&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;blockOwnerDeletion&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;volumes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default-token-b4crd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;secret&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;secretName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default-token-b4crd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;defaultMode&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;420&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;containers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;spring-boot&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;cloud/kubernetes-hello-world:1.1.0.M2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;ports&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;containerPort&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;TCP&amp;#34;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;prometheus&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;containerPort&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9779&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;TCP&amp;#34;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;jolokia&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;containerPort&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8778&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;protocol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;TCP&amp;#34;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;KUBERNETES_NAMESPACE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;valueFrom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
              &lt;span class=&#34;nt&#34;&gt;&amp;#34;fieldRef&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;fieldPath&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;metadata.namespace&amp;#34;&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          
        &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;volumeMounts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default-token-b4crd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;readOnly&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;mountPath&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/var/run/secrets/kubernetes.io/serviceaccount&amp;#34;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;livenessProbe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;httpGet&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;scheme&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HTTP&amp;#34;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;initialDelaySeconds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;180&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;timeoutSeconds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;periodSeconds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;successThreshold&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;failureThreshold&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;readinessProbe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;httpGet&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;scheme&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HTTP&amp;#34;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;initialDelaySeconds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;timeoutSeconds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;periodSeconds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;successThreshold&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;failureThreshold&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;terminationMessagePath&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/dev/termination-log&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;terminationMessagePolicy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;File&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;imagePullPolicy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;IfNotPresent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;securityContext&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;privileged&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;procMount&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Default&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;restartPolicy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Always&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;terminationGracePeriodSeconds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;dnsPolicy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ClusterFirst&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;serviceAccountName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;serviceAccount&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;nodeName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;docker-desktop&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;securityContext&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;schedulerName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default-scheduler&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;tolerations&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;node.kubernetes.io/not-ready&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;operator&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Exists&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;effect&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;NoExecute&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;tolerationSeconds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;node.kubernetes.io/unreachable&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;operator&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Exists&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;effect&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;NoExecute&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;tolerationSeconds&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;priority&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;enableServiceLinks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;phase&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Running&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;conditions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Initialized&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;lastProbeTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;lastTransitionTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2019-09-02T06:35:35Z&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Ready&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;lastProbeTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;lastTransitionTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-01-17T01:47:07Z&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ContainersReady&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;lastProbeTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;lastTransitionTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-01-17T01:47:07Z&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;PodScheduled&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;lastProbeTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;lastTransitionTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2019-09-02T06:35:35Z&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;hostIP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;192.168.65.3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;podIP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;10.1.0.49&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;startTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2019-09-02T06:35:35Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;containerStatuses&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;spring-boot&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;state&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;running&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;startedAt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-01-17T01:46:50Z&amp;#34;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;lastState&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;terminated&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;exitCode&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;reason&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Error&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;startedAt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-01-16T09:29:52Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;finishedAt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-01-17T01:46:30Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;containerID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;docker://ec8892c9949c0f226636d68c0f0f9b675b60693011d510f3a218e579fe43f992&amp;#34;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;ready&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;restartCount&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;cloud/kubernetes-hello-world:1.1.0.M2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;imageID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;docker://sha256:559a7fbc5858f9b3ca2bb9ada10235dbc169846e988a46a80c8ab123560ea168&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;containerID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;docker://af0de58af170361c986110e79eeca49b85c0eef23ae688f52b23b5e95111fbe0&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;qosClass&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;BestEffort&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>[ Kubernetes ] 1-4.kubeadm命令使用</title>
        <link>https://example.com/p/kubernetes-1-4.kubeadm%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Mon, 14 Sep 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/kubernetes-1-4.kubeadm%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</guid>
        <description>&lt;h1 id=&#34;安装初始化k8s集群&#34;&gt;安装初始化K8s集群&lt;/h1&gt;
&lt;h2 id=&#34;1安装k8s&#34;&gt;1.安装K8s&lt;/h2&gt;
&lt;h3 id=&#34;11centos安装&#34;&gt;1.1CentOS安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;预先准备工作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 修改设置主机名称&lt;/span&gt;
hostnamectl set-hostname master
&lt;span class=&#34;c1&#34;&gt;# 绑定主机各节点hosts&lt;/span&gt;
192.168.0.1 master
192.168.0.2 node1
192.168.0.3 node2
&lt;span class=&#34;c1&#34;&gt;# 验证每节点的Mac地址与UUID是否唯一&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# mac地址注意查看网卡&lt;/span&gt;
cat /sys/class/net/eth1/address
cat /sys/class/dmi/id/product_uuid
&lt;span class=&#34;c1&#34;&gt;# 关闭缓存交换swap&lt;/span&gt;
swapoff -a  &lt;span class=&#34;c1&#34;&gt;# 临时关闭&lt;/span&gt;
sed -i.bak &lt;span class=&#34;s1&#34;&gt;&amp;#39;/swap/s/^/#/&amp;#39;&lt;/span&gt; /etc/fstab    &lt;span class=&#34;c1&#34;&gt;#永久关闭&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装Kubernetes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 设置K8s安装源，由于防火墙问题使用阿里云源&lt;/span&gt;
cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/yum.repos.d/kubernetes.repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg &lt;a href=&#34;https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg&#34;&gt;https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg&lt;/a&gt;
EOF
# 更新源缓存
yum clean all
yum -y makecache&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 查看k8s版本
yum list kubelet --showduplicates | sort -r 

# 默认安装最新版本
yum install -y kubelet kubeadm kubectl
# 选择指定版本进行安装
yum install -y kubelet-&amp;lt;version&amp;gt; kubeadm-&amp;lt;version&amp;gt; kubectl-&amp;lt;version&amp;gt;
```
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;12macos安装&#34;&gt;1.2MacOS安装&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Docker-Desktop版内置&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;需要访问科学上网&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2准备kubernetes依赖镜像&#34;&gt;2.准备Kubernetes依赖镜像&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;k8s.gcr.io/kube-apiserver:v1.17.1
k8s.gcr.io/kube-controller-manager:v1.17.1
k8s.gcr.io/kube-proxy:v1.17.1
k8s.gcr.io/kube-scheduler:v1.17.1
k8s.gcr.io/coredns:v1.17.1
k8s.gcr.io/etcd:v1.17.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于国外站点问题，需要科学上网，或者通过其他镜像仓库拉去，然后通过&lt;code&gt;docker tag&lt;/code&gt;打标签的形式保存在docker仓库&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 通过科学上网拉去官网仓库镜像&lt;/span&gt;
docker pull k8s.gcr.io/kube-apiserver:v1.17.1
...
k8s.gcr.io/etcd:v1.17.1
&lt;span class=&#34;c1&#34;&gt;## 然后通过本地惊醒仓库打包导出tar的形式&lt;/span&gt;
docker save k8s.gcr.io/kube-apiserver:v1.17.1 &amp;gt; k8s.tar.gz
&lt;span class=&#34;c1&#34;&gt;## 导入目标服务器的本地镜像仓库&lt;/span&gt;
docker load &amp;lt; k8s.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3使用kubeadm初始化集群主节点&#34;&gt;3.使用kubeadm初始化集群主节点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;初始化主节点&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubeadm init –apiserver-advertise-address&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;192.168.66.176 --kubernetes-version&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;v1.17.1 --pod-network-cidr&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10.244.0.0/16 --service-cidr&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10.96.0.0/12 --ignore-preflight-errors&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Swap
  
&lt;span class=&#34;c1&#34;&gt;# 增加Kubernetes本地全局变量配置&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;### 非root用户&lt;/span&gt;
mkdir -p &lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/.kube
sudo cp -i /etc/kubernetes/admin.conf &lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/.kube/config
sudo chown &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;id -u&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;:&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;id -g&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/.kube/config
&lt;span class=&#34;c1&#34;&gt;### root用户&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;export KUBECONFIG=/etc/kubernetes/admin.conf&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bash_profile
&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; .bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化主节点网络&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 使用flannel配置网络&lt;/span&gt;
kubectl apply -f kube-flannel.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关于节点污点问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;taint:污点的意思.如果某节点设置为污点，那么pod将不允许在此节点上运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看污点信息&lt;/span&gt;
kubectl describe node master&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;grep -i taints
&lt;span class=&#34;c1&#34;&gt;# 删除默认污点&lt;/span&gt;
kubectl taint nodes master node-role.kubernetes.io/master-
&lt;span class=&#34;c1&#34;&gt;# 设置污点&lt;/span&gt;
kubectl taint node master &lt;span class=&#34;nv&#34;&gt;key1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;value1:NoSchedule
&lt;span class=&#34;c1&#34;&gt;# 删除污点&lt;/span&gt;
kubectl taint nodes master  key1-    
&lt;span class=&#34;c1&#34;&gt;### 关于污点语法&lt;/span&gt;
kubectl taint node &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;node&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;value&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;effect&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   
 其中&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;effect&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; 可取值: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; NoSchedule &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; PreferNoSchedule &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; NoExecute &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  NoSchedule: 一定不能被调度
  PreferNoSchedule: 尽量不要调度
  NoExecute: 不仅不会调度, 还会驱逐Node上已有的Pod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Node节点加入集群&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查看令牌&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubeadm token list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;如果令牌过期可以重新生成令牌&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化令牌&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubeadm token create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成新的加密串&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; openssl rsa -pubin -outform der 2&amp;gt;/dev/null &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; openssl dgst -sha256 -hex &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/^.* //&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;node加入master&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubeadm join 192.168.66.175:6443 --token uirohl.1auw4f6ebu1c1etc &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;ndash;discovery-token-ca-cert-hash sha256:f0d231c5a175c4f84d94cf0d7df2efc96e4ac396482ed9e04880a9d2c9b6a84e
```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集群移除Node节点&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;### 已验证&lt;/span&gt;
  
&lt;span class=&#34;c1&#34;&gt;# 设置节点不可调度&lt;/span&gt;
kubectl cordon &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 恢复节点调度&lt;/span&gt;
kubectl uncordon &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
  
&lt;span class=&#34;c1&#34;&gt;# 驱逐节点上运行的业务容器&lt;/span&gt;
kubectl drain --ignore-daemonsets &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
  
&lt;span class=&#34;c1&#34;&gt;# 移除节点&lt;/span&gt;
kubectl delete node &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
  
&lt;span class=&#34;c1&#34;&gt;### master剔除node（待验证）&lt;/span&gt;
etcdctl --cacert&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc/etcd/pki/ca.pem --cert&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc/etcd/pki/server.pem --key&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc/etcd/pki/server-key.pem --endpoints&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;https://210.74.13.8:2379 del /registry --prefix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[ Kubernetes ] 1-2.Kubectl命令行工具</title>
        <link>https://example.com/p/kubernetes-1-2.kubectl%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Sat, 12 Sep 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/kubernetes-1-2.kubectl%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid>
        <description>&lt;h1 id=&#34;kubectl命令行工具&#34;&gt;Kubectl命令行工具&lt;/h1&gt;
&lt;h3 id=&#34;1kubectl用法&#34;&gt;1.kubectl用法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;$~: &lt;strong&gt;kubectl  [command]   [TYPE]  [NAME]  [flags]&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;[command]&lt;/strong&gt; &lt;code&gt;子命令。用于操作Kubernetes集群资源对象。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可取值：[create | delete | describe | get | apply]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;[TYPE]&lt;/strong&gt; &lt;code&gt;资源对象的类型。区分大小写&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;备注：可以通过单数形式、复数形式、简写形式表示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 例：不同写法的Type,但是效果一致&lt;/span&gt;
kubectl get pod pod1
kubectl get pods pod1
kubectl get po pod1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;[NAME]&lt;/strong&gt; &lt;code&gt;资源对象名称。区分大小写&lt;/code&gt;
备注： 如果不指定名称，将返回属于&lt;strong&gt;TYPE&lt;/strong&gt;的所有对象列表。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 例：返回所有对象列表&lt;/span&gt;
kubectl get pods
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;[flags]&lt;/strong&gt; &lt;code&gt;kubectl子命令的可选参数&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2kubectl操作实例&#34;&gt;2.kubectl操作实例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建资源对象&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 由配置文件(*.yaml)创建一次性对象&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 创建一个对象&lt;/span&gt;
kubectl create -f service.yaml
&lt;span class=&#34;c1&#34;&gt;# 创建对个对象&lt;/span&gt;
kubectl create -f service.yaml -f pod.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看资源对象&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看所有Pod列表&lt;/span&gt;
kubectl get pods
&lt;span class=&#34;c1&#34;&gt;# 查看指定对象&lt;/span&gt;
kubectl get service,pod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源对象详情&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 显示Node的详细信息&lt;/span&gt;
kubectl describe nodes node1
&lt;span class=&#34;c1&#34;&gt;# 显示Pod的详细信息&lt;/span&gt;
kubectl describe pods/service
&lt;span class=&#34;c1&#34;&gt;# 显示由node1管理的pod对象&lt;/span&gt;
kubectl describe pods node1-service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除资源对象&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 基于配置文件(*.yaml)定义中名称的Pod对象&lt;/span&gt;
kubectl delete -f service.yaml
&lt;span class=&#34;c1&#34;&gt;# 删除包含指定label的所有Pod和Service对象&lt;/span&gt;
kubectl delete pods,services -l &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;label-obj
&lt;span class=&#34;c1&#34;&gt;# 删除所有Pod对象&lt;/span&gt;
kubectl delete pods --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行资源对象&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 指定Pod对象的date命令，默认情况下在Pod对象的第一个容器中执行&lt;/span&gt;
kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; &amp;lt;pod-name&amp;gt; date
&lt;span class=&#34;c1&#34;&gt;# 指定Pod对象在某个特定容器中执行&lt;/span&gt;
kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; &amp;lt;pod-name&amp;gt; -c &amp;lt;container-name&amp;gt; date
&lt;span class=&#34;c1&#34;&gt;# 通过bash获取Pod对象中特定容器的TTY(可以理解为登录容器)&lt;/span&gt;
kubectl &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -ti &amp;lt;pod-name&amp;gt; -c &amp;lt;container-name&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看容器日志&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看容器输出到stdout日志&lt;/span&gt;
kubectl logs &amp;lt;pod-name&amp;gt;
&lt;span class=&#34;c1&#34;&gt;# 跟踪查看容器日志(与tail -f命令具有相同效果)&lt;/span&gt;
kubectl logs -f &amp;lt;pod-name&amp;gt; -c &amp;lt;container-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[ Kubernetes ] 1-3.kubeadm命令使用</title>
        <link>https://example.com/p/kubernetes-1-3.kubeadm%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Sat, 12 Sep 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/kubernetes-1-3.kubeadm%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</guid>
        <description>&lt;h1 id=&#34;kubeadm命令使用&#34;&gt;kubeadm命令使用&lt;/h1&gt;
&lt;h2 id=&#34;一kubeadm概述&#34;&gt;一、kubeadm概述&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$~:kubeadm --help

&lt;span class=&#34;c1&#34;&gt;# kubeadm [command]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;———— alpha &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;command&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   
    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;———— completion
    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;———— config
            &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;———— images
                    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;———— list 列出所有依赖镜像
            &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;———— pull 
    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;———— &lt;span class=&#34;nb&#34;&gt;help&lt;/span&gt; 查看命令详细描述
    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;———— init 初始化Kubernetes集群Master
    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;———— join 在Kubernetes集群中增加Node
    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;———— reset 重置Kubernetes集群
    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;———— token
    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;———— upgrade
    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;———— version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>[ Kubernetes ] 1-5.K8s之Helm包管理工具</title>
        <link>https://example.com/p/kubernetes-1-5.k8s%E4%B9%8Bhelm%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Sat, 12 Sep 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/kubernetes-1-5.k8s%E4%B9%8Bhelm%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid>
        <description>&lt;h1 id=&#34;k8s之helm包管理工具&#34;&gt;K8s之Helm包管理工具&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Helm 是 Deis 开发的一个用于 Kubernetes 应用的包管理工具，主要用来管理 Charts。有点类似于 Ubuntu 中的 APT 或 CentOS 中的 YUM。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;一安装&#34;&gt;一、安装&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/helm/helm/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Helm Release Link&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;1os-centos&#34;&gt;1.OS-CentOS&lt;/h3&gt;
&lt;p&gt;当前使用版本为&lt;a class=&#34;link&#34; href=&#34;https://get.helm.sh/helm-v3.1.2-linux-amd64.tar.gz&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Helm v3.1.2 linux&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 下载二进制可执行文件压缩包&lt;/span&gt;
wget -O /data/helm.tar.gz https://get.helm.sh/helm-v3.1.2-linux-amd64.tar.gz

&lt;span class=&#34;c1&#34;&gt;# 解压&lt;/span&gt;
tar -xzvf /data/helm.tar.gz

&lt;span class=&#34;c1&#34;&gt;# 移动helm二进制文件，方便全局访问&lt;/span&gt;
mv linux-amd64/helm /usr/local/bin/helm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2os-macos&#34;&gt;2.OS-MacOS&lt;/h3&gt;
&lt;h4 id=&#34;自动安装&#34;&gt;①.自动安装&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;PS：操作系统已安装brew工具&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;brew install helm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;手动安装&#34;&gt;②.手动安装&lt;/h4&gt;
&lt;p&gt;当前使用版本为&lt;a class=&#34;link&#34; href=&#34;https://get.helm.sh/helm-v3.1.2-darwin-amd64.tar.gz&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Helm v3.1.2 darwin&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 下载二进制可执行文件压缩包&lt;/span&gt;
wget -O ~/helm.tar.gz https://get.helm.sh/helm-v3.1.2-darwin-amd64.tar.gz

&lt;span class=&#34;c1&#34;&gt;# 解压缩&lt;/span&gt;
tar -xzvf ~/helm.tar.gz

&lt;span class=&#34;c1&#34;&gt;# 移动helm二进制文件，方便全局访问&lt;/span&gt;
mv darwin-amd64/helm /usr/local/bin/helm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;二入门&#34;&gt;二、入门&lt;/h2&gt;
&lt;h3 id=&#34;1调整helm源&#34;&gt;1.调整helm源&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看源&lt;/span&gt;
helm repo list

&lt;span class=&#34;c1&#34;&gt;# 设置国内镜像源(选用阿里云源)&lt;/span&gt;
helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2搜索应用&#34;&gt;2.搜索应用&lt;/h3&gt;
&lt;p&gt;搜索Nginx-Ingress&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;helm search repo nginx-ingress
&lt;span class=&#34;c1&#34;&gt;### 搜索结果如下 ###&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# NAME                    CHART VERSION   APP VERSION     DESCRIPTION                                       &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#stable/nginx-ingress    0.9.5           0.10.2          An nginx Ingress controller that uses ConfigMap...&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#stable/nginx-lego       0.3.1                           Chart for nginx-ingress-controller and kube-lego &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3安装应用&#34;&gt;3.安装应用&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 开启rbac权限，并通过externalIP方式进行工作&lt;/span&gt;
helm install --name nginx-ingress --set &lt;span class=&#34;s2&#34;&gt;&amp;#34;rbac.create=true,controller.service.externalIPs[0]=192.168.100.211,controller.service.externalIPs[1]=192.168.100.212,controller.service.externalIPs[2]=192.168.100.213&amp;#34;&lt;/span&gt; stable/nginx-ingress
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>[ Kubernetes ] 0.Kubernetes</title>
        <link>https://example.com/p/kubernetes-0.kubernetes/</link>
        <pubDate>Fri, 11 Sep 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/kubernetes-0.kubernetes/</guid>
        <description>&lt;h1 id=&#34;kubernetes&#34;&gt;Kubernetes&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Kubernetes&lt;/code&gt;(K8s)，译文成为【舵手】。从官网的Logo可以看出是轮船上的&lt;strong&gt;舵&lt;/strong&gt;。结合container(集装箱，容器)的概念，Kubernetes看起来则是管理这些容器的。&lt;code&gt;是一个自动化的容器编排平台，负责应用的部署、应用的弹性以及应用的管理，前提则是这些应用都是基于容器的&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;核心功能&#34;&gt;核心功能&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务的发现与负载均衡&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;附属组件&lt;strong&gt;KubeDNS&lt;/strong&gt;为系统内置了服务发现功能，可以将每一个Service增加DNS名称，使得集群内节点直接通过此名称访问到；同时&lt;strong&gt;Service&lt;/strong&gt;通过iptables、ipvs支持了负载均衡。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自动装箱&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;构建于容器之上，基于资源依赖及其他约束在不影响其可用性的情况下自动完成容器的部署工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自我修复&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;容器故障后自动重启、节点故障后自动重新进行容器调度、节点健康状态检查异常后会关闭容器进行重新创建。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;水平扩展&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过命令、UI手动水平扩展、基于CPU等资源负载率进行自动水平扩展。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自动发布与回滚&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;strong&gt;灰度&lt;/strong&gt;方式更新应用或其配置，过程中的应用健康状态将得到监控，以保证不在同一时刻kill掉所有实例；同时，过程中健康状态出现异常情况，将会立即自动执行回滚。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;存储编排&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pod对象自动挂载不同类型的存储系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;批量处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;支持批处理作业、CI持续集成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;秘钥与配置管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;K8s的configMap将配置与Docker镜像解耦，更新配置时，无需重新构建Docker镜像。同时，敏感数据将通过&lt;strong&gt;Secret&lt;/strong&gt;对象进行解耦，以保障一定程度上的最大安全。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[ Kubernetes ] 1-1.初识K8s</title>
        <link>https://example.com/p/kubernetes-1-1.%E5%88%9D%E8%AF%86k8s/</link>
        <pubDate>Fri, 11 Sep 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/kubernetes-1-1.%E5%88%9D%E8%AF%86k8s/</guid>
        <description>&lt;h1 id=&#34;初识k8s&#34;&gt;初识K8s&lt;/h1&gt;
&lt;h3 id=&#34;术语及原理&#34;&gt;术语及原理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Master(主节点:control plane)&lt;/strong&gt;
集群中的神经中枢网关。负责整个集群的&lt;strong&gt;资源管理&lt;/strong&gt;、&lt;strong&gt;Pod调度&lt;/strong&gt;、&lt;strong&gt;弹性伸缩&lt;/strong&gt;、&lt;strong&gt;安全控制&lt;/strong&gt;、&lt;strong&gt;系统监控&lt;/strong&gt;、&lt;strong&gt;纠错&lt;/strong&gt;等管理功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ApiServer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;集群的网关。&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;负责输出RESTful风格K8s接口，则是通往集群所有REST操作命令的入口，并负责接收、校验、相应所有的REST请求，最终结果状态存储在etcd中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Controller Manager&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;负责生命周期功能及API业务逻辑。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;**a.生命周期功能：**Namespace创建和生命周期、Event垃圾回收、Pod对象终止相关的垃圾回收、级联垃圾回收、Node的垃圾回收
**b.API业务逻辑：**由ReplicaSet执行的Pod对象扩展&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Scheduler&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在API Server确认Pod对象之后，由调度器(Scheduler)根据集群中各节点的可用资源状态、目标运行容器的资源需求做出调度策略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Etcd&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基于Raft协议开发的分布式键值存储，用于服务发现、共享配置、保证一致性(数据库的主从节点选择，分布式锁等)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a.etcd是独立的组件，并不属于K8s集群。
b.生产环境etcd应该按照&lt;strong&gt;集群方式&lt;/strong&gt;部署运行，以提升高可用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Node(从节点:worker node)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;工作节点&lt;/code&gt;。负责接收来自Master节点的工作指令并根据指令相应的创建或者销毁Pod对象，以及调整网络规则以合理的路由转发流量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pod&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes并不会直接运行容器，而是使用一个抽象的资源对象封装一个或者多个容器，此对象就是&lt;strong&gt;Pod对象&lt;/strong&gt;。
&lt;strong&gt;是K8s最小的调度单元。&lt;/strong&gt;
**一个Pod对象可以拥有多个Container容器应用。**通常情况下，这些在同一个Pod对象中的Container容器是高耦合。&lt;em&gt;因为其共用同一个Pod对象下的网络名称空间、存储资源、UTS命名空间(同一个主机名称)、PID命名空间(不同应用程序可以看到其他应用程序的PID)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pod Controller(Pod 控制器)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽说Pod对象是最小的调度单元，但实际应用中，并不会直接部署、管理Pod对象，而是借助&lt;strong&gt;Pod Controller&lt;/strong&gt;对其进行管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Replication Controller(复制控制器)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;K8s的核心概念，用于管理Pod的声明周期。在主节点中，控制管理器进程同RC的定义完成Pod的创建、监控、启停等操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Replica Set&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;保证在某个时间点儿上，一定数量的&lt;strong&gt;Pod对象&lt;/strong&gt;在运行。是Replication Controller的升级版本。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要区别在于&lt;strong&gt;Selector选择器&lt;/strong&gt;
Replica Set:支持集合级别的选择器。
Replication Controller:支持在等号描述的选择器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deployment&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为保证指定的&lt;strong&gt;Pod对象&lt;/strong&gt;的副本数量精确符合定义，否则将会按照「多退少补」原则进行自动管理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Label(标签)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将资源进行分类的标识符，一组附加在对象上的键值对类型数据。主要为了解决Pod对象与Service之间的关联关系。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个对象可以拥有多个标签，一个标签也可以附加在多个对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Service&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;建立在Pod对象之上的资源抽象，通过标签选择器选定一组Pod对象，并设定统一且固定的访问入口(通常情况下表现形式是IP地址)。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拥有唯一指定的名字&lt;/li&gt;
&lt;li&gt;拥有一个虚拟IP地址和端口号&lt;/li&gt;
&lt;li&gt;能够提供某种远程能力&lt;/li&gt;
&lt;li&gt;被映射到提供服务能力的一组容器之上&lt;/li&gt;
&lt;li&gt;Service的服务进程目前通过Socket方式对外提供服务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果Kubernetes集群存在DNS附件，将会在Service对象创建时为其自动指定一个DNS名称用于客户端服务发现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Volume(容器共享存储卷)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;独立于容器文件系统之外的存储空间，常用在扩展容器的存储空间并为其提供持久化存储能力。&lt;em&gt;临时卷&lt;/em&gt;与&lt;em&gt;本地卷&lt;/em&gt;一般位于Node本地，一旦Pod对象被调度至其他Node节点，此类型的存储卷将无法正常访问，所以此类存储卷用于数据缓存。持久数据将存放在&lt;strong&gt;Persistent Volume(持久卷)&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Persistent Volume(持久卷)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Persistent Volume Claims&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Annotation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外一种附加在对象之上的键值类型数据，但拥有更大的数据量。常用于将各种**非标识型元数据(metadata)**附加到对象，但不能标识和选择对象。K8s将不会直接使用，仅当方便工具或用户查找等用途。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a.build信息、release信息、Docker镜像信息等
b.日志库、监控库、分析库资源等资源库地址信息
c.程序调试工具信息
d.团队信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Namespace&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用Namespace来组织kubernetes的各种对象，可以实现用户的分组(多租户)，对不同的租户还可以进行单独的资源设置和管理，是的整个集群的资源配置非常灵活。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a.在同一命名空间中，同一类型资源对象的名称必须具有唯一性
b.名称空间空间通常用于实现租户或项目的资源隔离，以达到逻辑分组目的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ingress&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;解决Pod对象与外部网络隔离无法访问的组件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于K8s将Pod对象与外网进行隔离，同时Pod与Service等对象间的通信全是由K8s内部网络进行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[ Etcd ] 1.基础入门(1)</title>
        <link>https://example.com/p/etcd-1.%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A81/</link>
        <pubDate>Sun, 30 Aug 2020 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/etcd-1.%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A81/</guid>
        <description>&lt;h2 id=&#34;etcd&#34;&gt;ETCD&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;其中ETCD是一个用于存储关键数据的键值存储，ZK是一个用于管理配置等信息的中心化服务
ETCD包括 Raft 协议、存储两大模块.
etcd 的使用其实非常简单，它对外提供了 gRPC 接口，我们可以通过 Protobuf 和 gRPC 直接对 etcd 中存储的数据进行管理，也可以使用官方提供的 etcdctl 操作存储的数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;raft协议&#34;&gt;raft协议&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;每一个 Raft 集群中都包含多个服务器，在任意时刻，每一台服务器只可能处于 Leader、Follower 以及 Candidate 三种状态；在处于正常的状态时，集群中只会存在一个 Leader，其余的服务器都是 Follower。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;节点选举&#34;&gt;节点选举&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 Raft 协议的 etcd 集群在启动节点时，会遵循 Raft 协议的规则，所有节点一开始都被初始化为 Follower 状态，新加入的节点会在 NewNode 中做一些配置的初始化，包括用于接收各种信息的 Channel&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;竞选流程&#34;&gt;竞选流程&lt;/h3&gt;
&lt;p&gt;如果集群中的某一个 Follower 节点长时间内没有收到来自 Leader 的心跳请求，当前节点就会通过 MsgHup 消息进入预选举或者选举的流程。
如果收到 MsgHup 消息的节点不是 Leader 状态，就会根据当前集群的配置选择进入 PreElection 或者 Election 阶段，PreElection 阶段并不会真正增加当前节点的 Term，它的主要作用是得到当前集群能否成功选举出一个 Leader 的答案，如果当前集群中只有两个节点而且没有预选举阶段，那么这两个节点的 Term 会无休止的增加，预选举阶段就是为了解决这一问题而出现的。
当前节点会立刻调用 becomeCandidate 将当前节点的 Raft 状态变成候选人；在这之后，它会将票投给自己，如果当前集群只有一个节点，该节点就会直接成为集群中的 Leader 节点。&lt;/p&gt;
&lt;p&gt;如果集群中存在了多个节点，就会向集群中的其他节点发出 MsgVote 消息，请求其他节点投票，在 Step 函数中包含不同状态的节点接收到消息时的响应
如果当前节点投的票就是消息的来源或者当前节点没有投票也没有 Leader，那么就会向来源的节点投票，否则就会通知该节点当前节点拒绝投票。
每当收到一个 MsgVoteResp 类型的消息时，就会设置当前节点持有的 votes 数组，更新其中存储的节点投票状态并返回投『同意』票的人数，如果获得的票数大于法定人数 quorum，当前节点就会成为集群的 Leader 并向其他的节点发送当前节点当选的消息，通知其余节点更新 Raft 结构体中的 Term 等信息&lt;/p&gt;
&lt;p&gt;存储&lt;/p&gt;
&lt;p&gt;etcd 目前支持 V2 和 V3 两个大版本，这两个版本在实现上有比较大的不同，一方面是对外提供接口的方式，另一方面就是底层的存储引擎，V2 版本的实例是一个纯内存的实现，所有的数据都没有存储在磁盘上，而 V3 版本的实例就支持了数据的持久化。
在 V3 版本的设计中，etcd 通过 backend 后端这一设计，很好地封装了存储引擎的实现细节，为上层提供一个更一致的接口.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[ Etcd ] 2.基础入门(2)</title>
        <link>https://example.com/p/etcd-2.%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A82/</link>
        <pubDate>Sun, 30 Aug 2020 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/etcd-2.%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A82/</guid>
        <description>&lt;h1 id=&#34;etcd源码阅读与分析-raft-demo&#34;&gt;Etcd源码阅读与分析①-raft demo&lt;/h1&gt;
&lt;h2 id=&#34;etcd-与-zookeeper-对比&#34;&gt;Etcd 与 Zookeeper 对比&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一致性协议:配置共享&amp;amp;服务发现组件的核心基础。
&lt;ul&gt;
&lt;li&gt;Zookeeper采用ZAB协议(一种类Paxos协议)实现一致性&lt;/li&gt;
&lt;li&gt;Etcd采用Raft协议，相比Paxos协议更容易理解，工程化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;API接口: 包含有两个版本V2、V3
&lt;ul&gt;
&lt;li&gt;V2: 提供HTTP+Json方式调用&lt;/li&gt;
&lt;li&gt;V3: 提供grpc方式调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能
&lt;ul&gt;
&lt;li&gt;官方测试数据显示：10000+/s写入(优于Zookeeper性能)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安全
&lt;ul&gt;
&lt;li&gt;Etcd支持TSL(权限控制优于Zookeeper)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Etcd是一个基于Raft协议的简单内存KV项目&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;源码分析&#34;&gt;源码分析&lt;/h2&gt;
&lt;p&gt;本文档将以etcd作者在项目中所提供的demo程序进行源码试读。demo名称为raftexample。
路径在&lt;/p&gt;
&lt;h3 id=&#34;1项目结构&#34;&gt;1.项目结构&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;base&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;11:45&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;~/etcd:master ✗ ➭ tree -d -L &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; .
.
├── Documentation           &lt;span class=&#34;c1&#34;&gt;# 项目文档&lt;/span&gt;
├── auth                    &lt;span class=&#34;c1&#34;&gt;# 认证授权&lt;/span&gt;
├── client                  &lt;span class=&#34;c1&#34;&gt;# 客户端相关(v2)&lt;/span&gt;
├── clientv3                &lt;span class=&#34;c1&#34;&gt;# 客户端相关(v3)&lt;/span&gt;
├── contrib                 &lt;span class=&#34;c1&#34;&gt;# (待验证)&lt;/span&gt;
├── default.etcd            &lt;span class=&#34;c1&#34;&gt;# 已编译完成的etcd&lt;/span&gt;
├── embed                   &lt;span class=&#34;c1&#34;&gt;# 封装的etcd函数&lt;/span&gt;
├── etcdctl                 &lt;span class=&#34;c1&#34;&gt;# etcd操作命令，命令行客户端&lt;/span&gt;
├── etcdmain                &lt;span class=&#34;c1&#34;&gt;# main函数入口这里&lt;/span&gt;
├── etcdserver              &lt;span class=&#34;c1&#34;&gt;# 服务端相关&lt;/span&gt;
├── functional              &lt;span class=&#34;c1&#34;&gt;# 目测验证功能测试套件&lt;/span&gt;
├── hack                    &lt;span class=&#34;c1&#34;&gt;# 开发者相关&lt;/span&gt;
├── integration             &lt;span class=&#34;c1&#34;&gt;# (待验证)&lt;/span&gt;
├── lease                   &lt;span class=&#34;c1&#34;&gt;# 实现etcd租约&lt;/span&gt;
├── logos                   &lt;span class=&#34;c1&#34;&gt;# 日志相关&lt;/span&gt;
├── mvcc                    &lt;span class=&#34;c1&#34;&gt;# MVCC存储相关&lt;/span&gt;
├── pkg                     &lt;span class=&#34;c1&#34;&gt;# 通用依赖库&lt;/span&gt;
├── proxy                   &lt;span class=&#34;c1&#34;&gt;# 代理相关Http、Https、Socks&lt;/span&gt;
├── raft                    &lt;span class=&#34;c1&#34;&gt;# raft一致性协议实现&lt;/span&gt;
├── scripts                 &lt;span class=&#34;c1&#34;&gt;# 各类脚本&lt;/span&gt;
├── security                &lt;span class=&#34;c1&#34;&gt;# 安全相关&lt;/span&gt;
├── tests                   &lt;span class=&#34;c1&#34;&gt;# (待验证)&lt;/span&gt;
├── tools                   &lt;span class=&#34;c1&#34;&gt;# 工具&lt;/span&gt;
├── vendor                  &lt;span class=&#34;c1&#34;&gt;# go vendor依赖环境&lt;/span&gt;
├── version                 &lt;span class=&#34;c1&#34;&gt;# 版本信息&lt;/span&gt;
└── wal                     &lt;span class=&#34;c1&#34;&gt;# Write-Ahead-Log实现&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>[ Docker ] 8.文件系统之UFS</title>
        <link>https://example.com/p/docker-8.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B9%8Bufs/</link>
        <pubDate>Sun, 23 Aug 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/docker-8.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B9%8Bufs/</guid>
        <description>&lt;h1 id=&#34;文件系统之ufs&#34;&gt;文件系统之UFS&lt;/h1&gt;
&lt;h2 id=&#34;ufs&#34;&gt;UFS&lt;/h2&gt;
&lt;p&gt;联合文件系统[&lt;em&gt;&lt;strong&gt;Union File System&lt;/strong&gt;&lt;/em&gt;]，把其他文件系统联合到一个联合挂载点的文件系统服务(适用于Linux、FreeBSD、NetBSD OS)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;原理：&lt;/strong&gt;&lt;/em&gt; 使用branch把不同文件系统的文件、目录「透明的」进行覆盖，形成一个单一一直的文件系统。branch具有要么&lt;strong&gt;read-only&lt;/strong&gt;,要么&lt;strong&gt;read-write&lt;/strong&gt;的特点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;思想：&lt;/strong&gt;&lt;/em&gt; &lt;strong&gt;写时复制(copy-on-write)&lt;/strong&gt;,如果一个资源重复，但并未被修改，将不被立即创建出新的资源，直接为新旧实例提供共享。创建新资源将发生在第一次被修改写入时。该资源共享方式，可以明显降低未修改资源复制时的消耗，但同样的，也会在写入修改是增加部分开销。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AFUS&lt;/strong&gt;(Advanced Multi-Layered Unification FileSystem)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[ Docker ] 7.关于Linux的Cgroups</title>
        <link>https://example.com/p/docker-7.%E5%85%B3%E4%BA%8Elinux%E7%9A%84cgroups/</link>
        <pubDate>Sat, 22 Aug 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/docker-7.%E5%85%B3%E4%BA%8Elinux%E7%9A%84cgroups/</guid>
        <description>&lt;h1 id=&#34;关于linux的cgroups&#34;&gt;关于Linux的Cgroups&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux Cgroups(Control Groups)在Linux Namespace为进程隔离出一定空间的基础上为此进行的资源限制、控制以及统计的能力。资源包含有：&lt;strong&gt;CPU&lt;/strong&gt;、&lt;strong&gt;内存&lt;/strong&gt;、&lt;strong&gt;存储&lt;/strong&gt;、&lt;strong&gt;网络&lt;/strong&gt;等。通过Cgroups可以限制某个进程的资源占用、并且可以实时监控进程以及统计信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;cgroups各模块&#34;&gt;cgroups各模块&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;cgroup&lt;/strong&gt;: 针对进程进行分组的一种策略机制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每一个cgroup中包含有一组进程。并且可以使用&lt;em&gt;subsystem&lt;/em&gt;模块进行参数控制作用于此cgroup上的进程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;subsystem&lt;/strong&gt;: 此模块对资源进行控制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ubuntu OS可以通过&lt;code&gt;apt install cgroup-bin&lt;/code&gt;安装命令行工具，使用&lt;code&gt;lssubsys&lt;/code&gt;查看Kernel所支持的subsystem list。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;blkio:&lt;/code&gt; 设置对块设备输入输出进行控制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpu:&lt;/code&gt; 设置cgroup中进程的CPU调度策略&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpuacct:&lt;/code&gt; 统计cgroup中进程CPU占用情况&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpuset:&lt;/code&gt; 在多核机器上设置cgroup中进程可以使用的CPU和内存(内存仅适用于NUMA架构)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;devices:&lt;/code&gt; 控制cgroup中进程对设备的访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;freezer:&lt;/code&gt; 用于挂起(suspend)和恢复(resume)cgroup中的进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;memory:&lt;/code&gt; 限制cgroup中进程的内存占用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net_cls:&lt;/code&gt; 将cgroup中进程的网络包进行分类，以至于通过分类区区分不同cgroup中进程的网络包，并进行监控、限流等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net_prio:&lt;/code&gt; 设置cgroup中进程产生的网络流量的优先级&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ns:&lt;/code&gt; 使cgroup中进程在新的Namespace中fork出新进程(NEWNS)，同时创建出新的cgroup，并且此cgroup包含有新Namespace中的进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;hierarchy&lt;/strong&gt;: cgroup进程的继承关系。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如： 系统通过cgroup1针对一组定时任务进程进行CPU使用限制，同时其中一个进程还需要限制磁盘IO，这时候将可以通过cgroup2继承cgroup1限制CPU的同时增加磁盘IO限制。即cgroup2同时具有CPU、IO限制，并且不影响cgroup1组中其他进程的IO限制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cgroup各模块间关系&#34;&gt;cgroup各模块间关系&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;系统创建hierarchy后，系统下所有进程都将被加入cgroup中，cgroup为根节点，被hierarchy创建的cgroup将被作为此cgroup根节点下的子节点;&lt;/li&gt;
&lt;li&gt;subsystem与hierarchy是&lt;strong&gt;1:1关系&lt;/strong&gt;(即，一个subsystem只能作用于一个hierarchy之上);&lt;/li&gt;
&lt;li&gt;hierarchy与subsystem是&lt;strong&gt;1:n关系&lt;/strong&gt;(即，一个hierarchy可以作用于多个subsystem之上);&lt;/li&gt;
&lt;li&gt;一个进程可以分布在不同的cgroup中，但需满足cgroup分布在不同的hierarchy中;&lt;/li&gt;
&lt;li&gt;一个进程fork出一个子进程的同时，子进程与父进程在同一cgroup中，但可以根据需求调整到其他cgroup中。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[ Docker ] 5.Docker-本地构建none包处理</title>
        <link>https://example.com/p/docker-5.docker-%E6%9C%AC%E5%9C%B0%E6%9E%84%E5%BB%BAnone%E5%8C%85%E5%A4%84%E7%90%86/</link>
        <pubDate>Fri, 21 Aug 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/docker-5.docker-%E6%9C%AC%E5%9C%B0%E6%9E%84%E5%BB%BAnone%E5%8C%85%E5%A4%84%E7%90%86/</guid>
        <description>&lt;h1 id=&#34;docker-本地构建none包处理&#34;&gt;Docker-本地构建none包处理&lt;/h1&gt;
&lt;h3 id=&#34;踩坑打包构建dockerfile镜像&#34;&gt;踩坑①.打包构建Dockerfile镜像&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;每次本地打包构建Dockerfile镜像，如果更新镜像版本号会出现none的镜像在仓库中&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 停掉none相关的镜像进程占用&lt;/span&gt;
docker rm &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker ps -a &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;Exited&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print $1 }&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 递归依次从仓库移除这些镜像&lt;/span&gt;
docker rmi &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker images &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;^&amp;lt;none&amp;gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s2&#34;&gt;&amp;#34;{print &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$3&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;}&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 或者，使用一下命令进行移除&lt;/span&gt;
docker image prune
&lt;span class=&#34;c1&#34;&gt;# (此命令用于删除未使用的映像)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# docker image prune [options]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#   -- options可选值：&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#       -a  显示所有映像(默认隐藏中间映像)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#       -f  不提示确认，强制直接执行删除&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>[ Docker ] 6.关于命名空间(Linux Namespace)</title>
        <link>https://example.com/p/docker-6.%E5%85%B3%E4%BA%8E%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4linux-namespace/</link>
        <pubDate>Fri, 21 Aug 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/docker-6.%E5%85%B3%E4%BA%8E%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4linux-namespace/</guid>
        <description>&lt;h1 id=&#34;关于命名空间linux-namespace&#34;&gt;关于命名空间(Linux Namespace)&lt;/h1&gt;
&lt;h3 id=&#34;概念&#34;&gt;概念&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;1.Linux Namespace 是Kernel的一个功能，可以针对一系列的系统资源进行隔离。&lt;code&gt;例如：PID(process id)、UID(User id)、Network so on.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2.就像chroot允许把当前目录变成根目录一样进行隔离。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;3.Namespace进行隔离用户，当前用户将在特定的Namespace中具有root权限。但在真是物理机层面，此用户仍然是以UID运行的那个用户。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;linux包含的namespace类型&#34;&gt;Linux包含的Namespace类型&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Params&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Kernel&lt;/th&gt;
&lt;th&gt;Effect Information&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Mount&lt;/td&gt;
&lt;td&gt;CLONE_NEWNS&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.4.19&lt;/td&gt;
&lt;td&gt;隔离Namespace下的文件系统&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;UTS&lt;/td&gt;
&lt;td&gt;CLONE_NEWUTS&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.6.19&lt;/td&gt;
&lt;td&gt;用作隔离nodename和domainname&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;IPC&lt;/td&gt;
&lt;td&gt;CLONE_NEWIPC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.6.19&lt;/td&gt;
&lt;td&gt;隔离System V IPC 和POSIX Message queues&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PID&lt;/td&gt;
&lt;td&gt;CLONE_NEWPID&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.6.24&lt;/td&gt;
&lt;td&gt;针对进程ID进行隔离&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Network&lt;/td&gt;
&lt;td&gt;CLONE_NEWNET&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.6.29&lt;/td&gt;
&lt;td&gt;用于隔离网络设备、IP地址端口等网络栈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;User&lt;/td&gt;
&lt;td&gt;CLONE_NEWUSER&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3.8&lt;/td&gt;
&lt;td&gt;用于隔离用户及用户组&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;demo-codinghttpsgithubcombungeeropesimple-dockertreemastersrcsimplenamespace&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/bungeerope/simple-docker/tree/master/src/simple/namespace&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;#Demo Coding&lt;/a&gt;&lt;/h3&gt;
</description>
        </item>
        <item>
        <title>[ Docker ] 4.SpringBoot项目Docker化</title>
        <link>https://example.com/p/docker-4.springboot%E9%A1%B9%E7%9B%AEdocker%E5%8C%96/</link>
        <pubDate>Thu, 20 Aug 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/docker-4.springboot%E9%A1%B9%E7%9B%AEdocker%E5%8C%96/</guid>
        <description>&lt;h1 id=&#34;springboot项目docker化&#34;&gt;SpringBoot项目Docker化&lt;/h1&gt;
&lt;h2 id=&#34;一&#34;&gt;一&lt;/h2&gt;
</description>
        </item>
        <item>
        <title>[ Docker ] 2.Docker安装</title>
        <link>https://example.com/p/docker-2.docker%E5%AE%89%E8%A3%85/</link>
        <pubDate>Tue, 18 Aug 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/docker-2.docker%E5%AE%89%E8%A3%85/</guid>
        <description>&lt;h1 id=&#34;docker安装&#34;&gt;Docker安装&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;存储库安装&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装&lt;code&gt;yum-config-manager&lt;/code&gt;所需依赖包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$~:sudo yum install -y yum-utils &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    device-mapper-persistent-data &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    lvm2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过&lt;code&gt;yum-config-manager&lt;/code&gt;添加存储库&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$~:sudo yum-config-manager &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --add-repo &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    https://download.docker.com/linux/centos/docker-ce.repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;列出存储库中排序后可用的全部版本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;yum list docker-ce --showduplicates &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sort -r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进行安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 指定版本号安装&lt;/span&gt;
sudo yum install docker-ce-&amp;lt;VERSION_STRING&amp;gt; docker-ce-cli-&amp;lt;VERSION_STRING&amp;gt; containerd.io
&lt;span class=&#34;c1&#34;&gt;# 安装最新版本（不指定版本号默认为最新）&lt;/span&gt;
sudo yum install docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装docker-compose&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 下载二进制可执行文件，并保存在指定路径&lt;/span&gt;
sudo curl -L &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://github.com/docker/compose/releases/download/1.25.0/docker-compose-&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;uname -s&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;uname -m&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; -o /usr/local/bin/docker-compose
&lt;span class=&#34;c1&#34;&gt;# 修改文件权限&lt;/span&gt;
sudo chmod +x /usr/local/bin/docker-compose
&lt;span class=&#34;c1&#34;&gt;# 创建软链到全局可执行路径&lt;/span&gt;
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;软件包安装&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[ Docker ] 3.Docker之jdk1.8最简镜像构建</title>
        <link>https://example.com/p/docker-3.docker%E4%B9%8Bjdk1.8%E6%9C%80%E7%AE%80%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/</link>
        <pubDate>Tue, 18 Aug 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/docker-3.docker%E4%B9%8Bjdk1.8%E6%9C%80%E7%AE%80%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/</guid>
        <description>&lt;h1 id=&#34;docker之jdk18最简镜像构建&#34;&gt;Docker之jdk1.8最简镜像构建&lt;/h1&gt;
&lt;h2 id=&#34;1准备jre&#34;&gt;1.准备JRE&lt;/h2&gt;
&lt;p&gt;在&lt;a class=&#34;link&#34; href=&#34;https://www.java.com/en/download/manual.jsp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java下载网站&lt;/a&gt;下载JRE。
&lt;code&gt;Tips:此JRE为Oracle作品，而非Openjdk&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;2精简jre中无关文件&#34;&gt;2.精简JRE中无关文件&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 进入已经下载jre压缩包的路径,执行解压&lt;/span&gt;
tar xzvf ~/Downloads/jre-8u241-linux-x64.tar.gz&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; jre1.8.0_241
&lt;span class=&#34;c1&#34;&gt;# 删除说明、其他文档&lt;/span&gt;
rm -rf COPYRIGHT LICENSE README &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;THIRDPARTYLICENSEREADME-JAVAFX.txt &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;THIRDPARTYLICENSEREADME.txt &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;Welcome.html

&lt;span class=&#34;c1&#34;&gt;# 删除非必要依赖文件&lt;/span&gt;
rm -rf     lib/plugin.jar &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           lib/ext/jfxrt.jar &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           bin/javaws &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           lib/javaws.jar &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           lib/desktop &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           plugin &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           lib/deploy* &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           lib/*javafx* &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           lib/*jfx* &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           lib/amd64/libdecora_sse.so &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           lib/amd64/libprism_*.so &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           lib/amd64/libfxplugins.so &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           lib/amd64/libglass.so &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           lib/amd64/libgstreamer-lite.so &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           lib/amd64/libjavafx*.so &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           lib/amd64/libjfx*.so

&lt;span class=&#34;c1&#34;&gt;# 移除完成后文件大小共111M，然后进行压缩;压缩后大小为44M&lt;/span&gt;
tar czvf jre8.tar.gz *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3编写dockerfile&#34;&gt;3.编写DockerFile&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-DockerFile&#34; data-lang=&#34;DockerFile&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; docker.io/jeanblanchard/alpine-glibc&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;MAINTAINER&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; cheneyin xy410257@163.com&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ADD&lt;/span&gt; jre8.tar.gz /usr/local/java/jdk8/&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; JAVA_HOME /usr/local/java/jdk8&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; PATH &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/bin&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /opt&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Tips:由于Java依赖于glibc，基础镜像选择alpine-glibc并非alpine&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;4构建打包&#34;&gt;4.构建打包&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker build -t touch_star/java8:1.0 .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5测试运行&#34;&gt;5.测试运行&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run -it touch_star/java8:1.0

&lt;span class=&#34;c1&#34;&gt;####    Print   ####&lt;/span&gt;
/opt &lt;span class=&#34;c1&#34;&gt;# java -version&lt;/span&gt;
java version &lt;span class=&#34;s2&#34;&gt;&amp;#34;1.8.0_241&amp;#34;&lt;/span&gt;
Java&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;TM&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; SE Runtime Environment &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;build 1.8.0_241-b07&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Java HotSpot&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;TM&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; 64-Bit Server VM &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;build 25.241-b07, mixed mode&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
/opt &lt;span class=&#34;c1&#34;&gt;# &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>[ Docker ] 1.Docker命令</title>
        <link>https://example.com/p/docker-1.docker%E5%91%BD%E4%BB%A4/</link>
        <pubDate>Sun, 16 Aug 2020 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/docker-1.docker%E5%91%BD%E4%BB%A4/</guid>
        <description>&lt;h1 id=&#34;docker命令&#34;&gt;Docker命令&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;docker [option] command&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;option&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;config string:&lt;/strong&gt; 客户端配置文件的位置&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;context string[-c]:&lt;/strong&gt; 用于连接到守护程序的上下文的名称&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;debug[-D]:&lt;/strong&gt; 调试模式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;host list[-H]:&lt;/strong&gt; 要连接的守护程序套接字&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;log-level string[-l]:&lt;/strong&gt; 日志等级[ debug | info | warn | error | fatal ]默认为&lt;em&gt;info&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;tls:&lt;/strong&gt; 使用加密模式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;tlscacert string:&lt;/strong&gt; 签名证书文件路径&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;tlscert string:&lt;/strong&gt; 密钥文件路径&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;tlskey string:&lt;/strong&gt; key文件路径&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;tlsverify:&lt;/strong&gt; 使用加密并验证远程连接&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;version[-v]:&lt;/strong&gt; 版本信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Management Commands&lt;/strong&gt;(管理命令)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;builder:&lt;/strong&gt; 管理构建&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;config:&lt;/strong&gt; 管理Docker配置&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;container:&lt;/strong&gt; 管理容器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;context:&lt;/strong&gt; 管理镜像构建上下文&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;image:&lt;/strong&gt; 管理镜像&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;network:&lt;/strong&gt; 管理网络&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;node:&lt;/strong&gt; 管理Swarm节点&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;plugin:&lt;/strong&gt; 管理插件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;secret:&lt;/strong&gt; 管理Docker secrets&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;service:&lt;/strong&gt; 管理服务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stack:&lt;/strong&gt; 管理Docker stacks&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;swarm:&lt;/strong&gt; 管理Swarm集群&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;system:&lt;/strong&gt; 查看系统信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;trust:&lt;/strong&gt; 管理对Docker映像的信任&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;volume:&lt;/strong&gt; 管理卷&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Commands&lt;/strong&gt;(命令)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;attach:&lt;/strong&gt;  将本地标准输入，输出和错误流附加到正在运行的容器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;build:&lt;/strong&gt;  从Dockerfile构建镜像&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;commit:&lt;/strong&gt;  根据容器的更改创建新镜像&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cp:&lt;/strong&gt;  在容器和本地文件系统之间复制文件/文件夹&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;create:&lt;/strong&gt;  创建一个新的容器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;deploy:&lt;/strong&gt;  部署新堆栈或更新现有堆栈&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;diff:&lt;/strong&gt;  检查容器文件系统上文件或目录的更改&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;events:&lt;/strong&gt;  从服务器获取实时事件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;exec:&lt;/strong&gt;  在正在运行的容器中运行命令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;export:&lt;/strong&gt;  将容器的文件系统导出为tar存档&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;history:&lt;/strong&gt;  显示镜像的历史记录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;images:&lt;/strong&gt;  显示镜像列表&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;import:&lt;/strong&gt;  从tarball导入内容以创建文件系统映像&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;info:&lt;/strong&gt;  显示系统范围的信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;inspect:&lt;/strong&gt;  返回有关Docker对象的低级信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kill:&lt;/strong&gt;  杀死一个或多个正在运行的容器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;load:&lt;/strong&gt;  从tar存档或STDIN加载镜像&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;login:&lt;/strong&gt;  登录Docker镜像仓库&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;logout:&lt;/strong&gt;  退出Docker镜像仓库&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;logs:&lt;/strong&gt;  提取容器的日志&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pause:&lt;/strong&gt;  暂停一个或多个容器中的所有进程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;port:&lt;/strong&gt;  列出端口映射或容器的特定映射&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ps:&lt;/strong&gt;  显示所有容器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pull:&lt;/strong&gt;  从镜像仓库中提取镜像或存储库&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;push:&lt;/strong&gt;  提交镜像或存储库到镜像仓库&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rename:&lt;/strong&gt;  为容器重新命名&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;restart:&lt;/strong&gt;  重启一个或多个容器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rm:&lt;/strong&gt;  移除一个或者多个容器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rmi:&lt;/strong&gt;  移除一个或者多个镜像&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;run:&lt;/strong&gt;  在新容器中执行命令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;save:&lt;/strong&gt;  保存一个或多个镜像到tar存档（默认情况下流式传输到STDOUT）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;search:&lt;/strong&gt;  从Docker Hub中搜索镜像&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;start:&lt;/strong&gt;  运行一个或者多个停止状态的容器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stats:&lt;/strong&gt;   显示实时的容器资源使用情况统计流&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stop:&lt;/strong&gt;  停止一个或者多个运行状态的容器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tag:&lt;/strong&gt;  创建一个引用了SOURCE_IMAGE的标签TARGET_IMAGE&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;top:&lt;/strong&gt;  显示某个容器的运行进程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unpause:&lt;/strong&gt;  取消暂停一个或多个容器中的所有进程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;update:&lt;/strong&gt;  更新一个或多个容器的配置&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;version:&lt;/strong&gt;  显示docker的版本信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wait:&lt;/strong&gt;  阻塞一个或多个容器直到停止，然后打印其退出代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>1.Go并发之协程</title>
        <link>https://example.com/p/1.go%E5%B9%B6%E5%8F%91%E4%B9%8B%E5%8D%8F%E7%A8%8B/</link>
        <pubDate>Wed, 22 Apr 2020 21:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/1.go%E5%B9%B6%E5%8F%91%E4%B9%8B%E5%8D%8F%E7%A8%8B/</guid>
        <description>&lt;h1 id=&#34;go并发之协程&#34;&gt;Go并发之协程&lt;/h1&gt;
&lt;h4 id=&#34;首先需要了解几个概念&#34;&gt;首先需要了解几个概念：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;channel(通道)&lt;/li&gt;
&lt;li&gt;select&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1协程线程与进程&#34;&gt;1.协程、线程与进程&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;进程&lt;/code&gt;，属于操作系统，是系统资源分配的最小单位。充分利用CPU资源实现并发。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;线程&lt;/code&gt;，所属于进程，是进程的内部实现，大大降低了上下文切换的消耗，突破&lt;em&gt;&lt;strong&gt;一个进程只可以处理一件事&lt;/strong&gt;&lt;/em&gt;的缺陷，从而&lt;strong&gt;提高了系统的并发性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;协程&lt;/code&gt;，粒度更细，属于线程中的调度。填补了线程在IO上性能的缺陷，避免陷入内核级上下文切换所导致的性能损耗。&lt;/p&gt;
&lt;h3 id=&#34;2协程实现原理&#34;&gt;2.协程实现原理&lt;/h3&gt;
&lt;p&gt;线程实现原理&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;线程是操作系统的内核对象，多线程情况下，线程达到一定数量，将会导致上下文频繁切换，CPU的额外消耗会提升。
高并发的网络编程如果一个线程对应一个socket连接将不是最好的处理方式，所以操作系统提供基于事件模式的异步编程模型。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;协程实现原理&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>[ MySQL ] 2-1.MySQL基础</title>
        <link>https://example.com/p/mysql-2-1.mysql%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Mon, 06 Jan 2020 01:13:47 +0800</pubDate>
        
        <guid>https://example.com/p/mysql-2-1.mysql%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;h1 id=&#34;mysql基础&#34;&gt;Mysql基础&lt;/h1&gt;
&lt;h2 id=&#34;mysql引擎&#34;&gt;Mysql引擎&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MyISAM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InnoDB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Memory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Archive&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;功能点&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;MyISAM&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;InnoDB&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Memory&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Archive&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;存储限制&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;256TB&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RAM&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64TB&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;事务&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;全文检索&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B+ Tree索引&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;哈希索引&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据缓存&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;外键&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>[ MySQL ] 2.MySQL索引</title>
        <link>https://example.com/p/mysql-2.mysql%E7%B4%A2%E5%BC%95/</link>
        <pubDate>Mon, 06 Jan 2020 01:13:47 +0800</pubDate>
        
        <guid>https://example.com/p/mysql-2.mysql%E7%B4%A2%E5%BC%95/</guid>
        <description>&lt;h1 id=&#34;mysql索引&#34;&gt;MySQL索引&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Index(索引)，在存储引擎中用于快速找到记录的一种数据结构。索引用来快速寻找特定值的记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果没有索引，执行查询时，MySQL必须从第一个记录开始扫描整个表的所有记录，知道找到符合要求的记录。&lt;!-- raw HTML omitted --&gt;
如果存在索引，MySQL无需扫描全表即可迅速查找到目标记录所在的位置。&lt;/p&gt;
&lt;h2 id=&#34;1-索引类型&#34;&gt;1. 索引类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hash索引：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;底层实现是基于哈希表，是一种以Key-Value形式存储数据的结构。&lt;/li&gt;
&lt;li&gt;多个数据在存储关系上是没有任何顺序关系的。对于区间查询是无法通过索引查询的，&lt;/li&gt;
&lt;li&gt;只能通过全表扫描的方式进行。Hash索引适用于等值查询场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B+ Tree索引：(MySQL引擎Innodb实现方式)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B+ Tree索引是一种多路平衡查询树。&lt;/li&gt;
&lt;li&gt;其节点是天然有序的(左节点 &amp;lt; 父节点 &amp;lt; 右节点)。&lt;/li&gt;
&lt;li&gt;对于范围查询时候不需要做全表扫描。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相比Hash索引，B+ Tree的优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hash索引适合等值查询，但是无法进行范围查询&lt;/li&gt;
&lt;li&gt;Hash索引没办法利用索引完成排序&lt;/li&gt;
&lt;li&gt;Hash索引不支持多列联合索引的最左匹配规则&lt;/li&gt;
&lt;li&gt;如果有大量重复键值的情况下，Hash索引的效率会很低，因为存在Hash碰撞问题&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-mysql索引失效的几种情况&#34;&gt;2. MySQL索引失效的几种情况&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果条件中有or，即使其中有条件带索引也不会使用&lt;/li&gt;
&lt;li&gt;对于多列索引，不是使用的第一部分(第一个)，则不会使用索引&lt;/li&gt;
&lt;li&gt;like查询是以%开头&lt;/li&gt;
&lt;li&gt;如果列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引&lt;/li&gt;
&lt;li&gt;如果mysql估计使用全表扫描要比使用索引快,则不使用索引&lt;/li&gt;
&lt;li&gt;not in ,not exist.&lt;/li&gt;
&lt;li&gt;范围查询&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;索引的底层实现是b树为何不采用红黑树b树&#34;&gt;索引的底层实现是B+树，为何不采用红黑树，B树?&lt;/h2&gt;
&lt;p&gt;（1）：B+Tree非叶子节点只存储键值信息，降低B+Tree的高度，所有叶子节点之间都有一个链指针，数据记录都存放在叶子节点中&lt;/p&gt;
&lt;p&gt;（2）： 红黑树这种结构，h明显要深的多，效率明显比B-Tree差很多&lt;/p&gt;
&lt;p&gt;（3）：B+树也存在劣势，由于键会重复出现，因此会占用更多的空间。但是与带来的性能优势相比，空间劣势往往可以接受，因此B+树的在数据库中的使用比B树更加广泛&lt;/p&gt;
&lt;h2 id=&#34;七种事务传播行为&#34;&gt;七种事务传播行为&lt;/h2&gt;
&lt;p&gt;（1）Propagation.REQUIRED&amp;lt;默认&amp;gt; 如果当前存在事务，则加入该事务，如果当前不存在事务，则创建一个新的事务。&lt;/p&gt;
&lt;p&gt;（2）Propagation.SUPPORTS 如果当前存在事务，则加入该事务；如果当前不存在事务，则以非事务的方式继续运行。&lt;/p&gt;
&lt;p&gt;（3）Propagation.MANDATORY 如果当前存在事务，则加入该事务；如果当前不存在事务，则抛出异常。&lt;/p&gt;
&lt;p&gt;（4）Propagation.REQUIRES_NEW 重新创建一个新的事务，如果当前存在事务，延缓当前的事务。&lt;/p&gt;
&lt;p&gt;（5）Propagation.NOT_SUPPORTED 以非事务的方式运行，如果当前存在事务，暂停当前的事务。&lt;/p&gt;
&lt;p&gt;（6）Propagation.NEVER 以非事务的方式运行，如果当前存在事务，则抛出异常。&lt;/p&gt;
&lt;p&gt;（7）Propagation.NESTED 如果没有，就新建一个事务；如果有，就在当前事务中嵌套其他事务。&lt;/p&gt;
&lt;h2 id=&#34;3-强制索引&#34;&gt;3. 强制索引&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;强制索引&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;force&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PRI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;禁止索引&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ignore&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PRI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>[ Redis ] 1. Redis</title>
        <link>https://example.com/p/redis-1.-redis/</link>
        <pubDate>Mon, 06 Jan 2020 01:13:47 +0800</pubDate>
        
        <guid>https://example.com/p/redis-1.-redis/</guid>
        <description>&lt;h1 id=&#34;redis&#34;&gt;Redis&lt;/h1&gt;
&lt;h2 id=&#34;1-什么是跳表&#34;&gt;1. 什么是跳表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;跳跃表是一种有序的数据结构，它通过在每个节点中维持多个指向其他的几点指针，从而达到快速访问队尾目的。跳跃表的效率可以和平衡树想媲美了，最关键是它的实现相对于平衡树来说，代码的实现上简单很多&lt;/li&gt;
&lt;li&gt;跳跃表 level 层级完全是随机的。一般来说，层级越多，访问节点的速度越快。&lt;/li&gt;
&lt;li&gt;一是实现有序集合键，二是集群节点中用作内部数据结构。&lt;/li&gt;
&lt;li&gt;相比于红黑树、平衡二叉树，跳表不仅查找、插入、删除时间复杂度都是O(logN)，并且实现简单很多。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-redis中bitmap&#34;&gt;2. Redis中BitMap&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bitmap并不是一种独立的数据结构，而是基于String数据结构进行的位图操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最大空间即为String数据结构所支持的512MB，&lt;/li&gt;
&lt;li&gt;所以bitmap所支持的最大offset为2^32-1.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一般使用场景用于大数据签到、日活统计、在线统计等等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其主要优点可以节省大量空间。&lt;/li&gt;
&lt;li&gt;例如：
进行日活统计：
&lt;ul&gt;
&lt;li&gt;使用日期作为key，用户ID作为偏移量，1为当日活跃，0为不活跃&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;### 基本操作演示(以下为Redis-cli命令)&lt;/span&gt;
  
  &lt;span class=&#34;c1&#34;&gt;# 设置一个字符串 1Aa &lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# 存储在redis中的二进制为 0b001100010100000101100001&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; testkey 1Aa

  &lt;span class=&#34;c1&#34;&gt;# 进行bitmap操作&lt;/span&gt;
  setbit testkey &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
  setbit testkey &lt;span class=&#34;m&#34;&gt;18&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# testkey对象index为10的bit值为1&lt;/span&gt;
  getbit testkey &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; 
  &lt;span class=&#34;c1&#34;&gt;# testkey对象index为18的bit值为1&lt;/span&gt;
  getbit testkey &lt;span class=&#34;m&#34;&gt;18&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# 进行位统计 ,结果为bit上为1的和，&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# testkey输出结果为 8&lt;/span&gt;
  bitcount testkey

  &lt;span class=&#34;c1&#34;&gt;# testkey输出结果为 3&lt;/span&gt;
  bitcount testkey &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-redis事务&#34;&gt;3. redis事务&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Multi开启事务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exec执行事务块内命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Discard 取消事务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Watch 监视一个或多个key，如果事务执行前key被改动，事务将打断&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-redis的同步机制&#34;&gt;4. Redis的同步机制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;全量拷贝，
&lt;ul&gt;
&lt;li&gt;1.slave第一次启动时，连接Master，发送PSYNC命令，&lt;/li&gt;
&lt;li&gt;2.master会执行bgsave命令来生成rdb文件，期间的所有写命令将被写入缓冲区。
&lt;ul&gt;
&lt;li&gt;master bgsave执行完毕，向slave发送rdb文件&lt;/li&gt;
&lt;li&gt;slave收到rdb文件，丢弃所有旧数据，开始载入rdb文件&lt;/li&gt;
&lt;li&gt;rdb文件同步结束之后，slave执行从master缓冲区发送过来的所以写命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;此后 master 每执行一个写命令，就向slave发送相同的写命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;增量拷贝
&lt;ul&gt;
&lt;li&gt;如果出现网络闪断或者命令丢失等异常情况，从节点之前保存了自身已复制的偏移量和主节点的运行ID&lt;/li&gt;
&lt;li&gt;主节点根据偏移量把复制积压缓冲区里的数据发送给从节点，保证主从复制进入正常状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-缓存淘汰策略&#34;&gt;5. 缓存淘汰策略&lt;/h2&gt;
&lt;p&gt;（1）：先进先出算法（FIFO）&lt;/p&gt;
&lt;p&gt;（2）：最近使用最少Least Frequently Used（LFU）&lt;/p&gt;
&lt;p&gt;（3）：最长时间未被使用的Least Recently Used（LRU）&lt;/p&gt;
&lt;p&gt;当存在热点数据时，LRU的效率很好，但偶发性的、周期性的批量操作会导致LRU命中率急剧下降，缓存污染情况比较严重&lt;/p&gt;
&lt;h2 id=&#34;6redis过期key删除策略&#34;&gt;6.redis过期key删除策略&lt;/h2&gt;
&lt;p&gt;（1）：惰性删除，cpu友好，但是浪费cpu资源&lt;/p&gt;
&lt;p&gt;（2）：定时删除（不常用）&lt;/p&gt;
&lt;p&gt;（3）：定期删除，cpu友好，节省空间&lt;/p&gt;
&lt;h2 id=&#34;7缓存击穿原因以及处理办法&#34;&gt;7.缓存击穿原因以及处理办法&lt;/h2&gt;
&lt;p&gt;频繁请求查询系统中不存在的数据导致；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理方法：
&lt;ul&gt;
&lt;li&gt;cache null策略，查询反馈结果为null仍然缓存这个null结果，设置不超过5分钟过期时间&lt;/li&gt;
&lt;li&gt;布隆过滤器，所有可能存在的数据映射到足够大的bitmap中 google布隆过滤器：基于内存，重启失效不支持大数据量，无法在分布式场景 redis布隆过滤器：可扩展性，不存在重启失效问题，需要网络io，性能低于google&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8缓存雪崩以及处理办法&#34;&gt;8.缓存雪崩以及处理办法&lt;/h2&gt;
&lt;p&gt;同一时刻大量缓存失效；&lt;/p&gt;
&lt;p&gt;处理方法：&lt;/p&gt;
&lt;p&gt;（1）：缓存数据增加过期标记&lt;/p&gt;
&lt;p&gt;（2）：设置不同的缓存失效时间&lt;/p&gt;
&lt;p&gt;（3）：双层缓存策略C1为短期，C2为长期&lt;/p&gt;
&lt;p&gt;（4）：定时更新策略&lt;/p&gt;
&lt;h2 id=&#34;9redis如何做持久化&#34;&gt;9.Redis如何做持久化&lt;/h2&gt;
&lt;p&gt;bgsave做镜像全量持久化，aof做增量持久化。因为bgsave会耗费较长时间，不够实时，在停机的时候会导致大量丢失数据 ，所以需要aof来配合使用。在redis实例重启时，会使用bgsave持久化文件重新构建内存，再使用aof重放近期的操作指令来 实 现完整恢复重启之前的状态。&lt;/p&gt;
&lt;h2 id=&#34;bgsave的原理是什么&#34;&gt;bgsave的原理是什么？&lt;/h2&gt;
&lt;p&gt;fork和cow。fork是指redis通过创建子进程来进行bgsave操作，cow指的是copy on write，子进程创建后，父子进程共享数据段，父进程继续提供读写服务，写进的页面数据会逐渐和子进程分离开来。&lt;/p&gt;
&lt;h2 id=&#34;rdb与aof区别&#34;&gt;RDB与AOF区别&lt;/h2&gt;
&lt;p&gt;（1）：R文件格式紧凑，方便数据恢复，保存rdb文件时父进程会fork出子进程由其完成具体持久化工作，最大化redis性能，恢复大数据集速度更快，只有手动提交save命令或关闭命令时才触发备份操作；&lt;/p&gt;
&lt;p&gt;（2）：A记录对服务器的每次写操作（默认1s写入一次），保存数据更完整，在redis重启是会重放这些命令来恢复数据，操作效率高，故障丢失数据更少，但是文件体积更大；&lt;/p&gt;
&lt;h2 id=&#34;redis如何实现延时队列&#34;&gt;redis如何实现延时队列？&lt;/h2&gt;
&lt;p&gt;使用sortedset，想要执行时间的时间戳作为score，消息内容作为key调用zadd来生产消息，消费者用zrangebyscore指令获取N秒之前的数据轮询进行处理。&lt;/p&gt;
&lt;h2 id=&#34;为啥redis-zset使用跳跃链表而不用红黑树实现&#34;&gt;为啥redis zset使用跳跃链表而不用红黑树实现?&lt;/h2&gt;
&lt;p&gt;（1）：skiplist的复杂度和红黑树一样，而且实现起来更简单。&lt;/p&gt;
&lt;p&gt;（2）：在并发环境下红黑树在插入和删除时需要rebalance，性能不如跳表。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>1.ElasticSearch集群搭建</title>
        <link>https://example.com/p/1.elasticsearch%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</link>
        <pubDate>Sun, 22 Dec 2019 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/1.elasticsearch%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</guid>
        <description>&lt;h1 id=&#34;elasticsearch集群搭建&#34;&gt;ElasticSearch集群搭建&lt;/h1&gt;
&lt;h3 id=&#34;注&#34;&gt;注：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#A:修改/etc/security/limits.conf&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&amp;lt;domain&amp;gt;      &amp;lt;type&amp;gt;  &amp;lt;item&amp;gt;         &amp;lt;value&amp;gt;&lt;/span&gt;
   *            soft    nofile          &lt;span class=&#34;m&#34;&gt;65536&lt;/span&gt;
   *            hard    nofile          &lt;span class=&#34;m&#34;&gt;131072&lt;/span&gt;
   *            soft    nproc           &lt;span class=&#34;m&#34;&gt;2048&lt;/span&gt;
   *            hard    nproc           &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#B:修改/etc/sysctl.conf&lt;/span&gt;
vm.max_map_count&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;262144&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 保存执行：&lt;/span&gt;
sysctl -p
&lt;span class=&#34;c1&#34;&gt;# 或者&lt;/span&gt;
sysctl -w vm.max_map_count&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;262144&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>2.ElasticSearch集群原理</title>
        <link>https://example.com/p/2.elasticsearch%E9%9B%86%E7%BE%A4%E5%8E%9F%E7%90%86/</link>
        <pubDate>Sun, 22 Dec 2019 15:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/2.elasticsearch%E9%9B%86%E7%BE%A4%E5%8E%9F%E7%90%86/</guid>
        <description>&lt;h1 id=&#34;elasticsearch集群原理&#34;&gt;ElasticSearch集群原理&lt;/h1&gt;
&lt;h3 id=&#34;一关于es集群需要思考几个问题&#34;&gt;一、关于ES集群需要思考几个问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;需要多大规模的集群？&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 首先从两个方面考虑&lt;/span&gt;
①.数据量有多大？数据增长情况如何？
②.服务器硬件设施配置：CPU、Memory、Disk

&lt;span class=&#34;c1&#34;&gt;# 推算依据&lt;/span&gt;
ES Jvm heap 最大设置为32G。
30G heap大约可以存储数据量10T；服务器memory若为128G，可运行多个实例节点。

&lt;span class=&#34;c1&#34;&gt;# 应用场景&lt;/span&gt;
A:用于构建业务搜索模块，且多是垂直领域搜索。（数据量级几千万至十亿级,一般需要2-4台机器）
B:用于大规模数据的实时联机处理分析&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OLAP&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,例如ELK，数据规模可达上千亿乃至更多，需要几十甚至上百实例节点。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;集群中节点角色如何分配？&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 一个节点可以充当一个或多个角色，默认三个角色都有&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 节点角色&lt;/span&gt;
①.Master
    node.master: &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# 实例节点为主节点&lt;/span&gt;
②.DataNode
    node.data: &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;# 默认是数据节点。&lt;/span&gt;
③.CoordinateNode
    &lt;span class=&#34;c1&#34;&gt;# 以上两项置为false，则此节点为协调节点；&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# 协调节点：一个节点只作为接收请求、转发请求到其他节点、汇总各个节点返回数据等功能的节点。&lt;/span&gt;
    
&lt;span class=&#34;c1&#34;&gt;# 具体分配&lt;/span&gt;
A:小规模集群不需要具体区分；
B:中、大规模集群&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;十个节点以上&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;，并发查询量大，查询的合并量大，可以增加独立的协调节点。角色分开的好处是分工分开，不互影响。如不会因协调角色负载过高而影响数据节点的能力。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;如何避免脑裂问题发生？&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;索引应该设置多少个分片？&lt;/li&gt;
&lt;li&gt;分片应该设置多少个副本？&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>1.MySQL之热备份工具(xtrabackup)</title>
        <link>https://example.com/p/1.mysql%E4%B9%8B%E7%83%AD%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7xtrabackup/</link>
        <pubDate>Fri, 22 Nov 2019 19:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/1.mysql%E4%B9%8B%E7%83%AD%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7xtrabackup/</guid>
        <description>&lt;h1 id=&#34;mysql之热备份工具xtrabackup&#34;&gt;MySQL之热备份工具(xtrabackup)&lt;/h1&gt;
&lt;h2 id=&#34;1原理&#34;&gt;1.原理&lt;/h2&gt;
&lt;h2 id=&#34;2安装&#34;&gt;2.安装&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;进入&lt;a class=&#34;link&#34; href=&#34;https://www.percona.com/downloads/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;xtrabackup官网&lt;/a&gt;选择&lt;strong&gt;Percona XtraBackup&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3实战&#34;&gt;3.实战&lt;/h2&gt;
</description>
        </item>
        <item>
        <title>1.MySQL编译安装过程</title>
        <link>https://example.com/p/1.mysql%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</link>
        <pubDate>Fri, 22 Nov 2019 19:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/1.mysql%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</guid>
        <description>&lt;h1 id=&#34;编译安装过程&#34;&gt;编译安装过程&lt;/h1&gt;
&lt;h3 id=&#34;1预编译&#34;&gt;1.预编译&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cmake . -DCMAKE_INSTALL_PREFIX&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/data/ops/mysql/ &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-DMYSQL_DATADIR&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/data/ops/mysql/data &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-DWITH_BOOST&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;../boost_1_59_0 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-DSYSCONFDIR&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-DWITH_INNOBASE_STORAGE_ENGINE&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-DWITH_PARTITION_STORAGE_ENGINE&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-DWITH_FEDERATED_STORAGE_ENGINE&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-DWITH_BLACKHOLE_STORAGE_ENGINE&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-DWITH_MYISAM_STORAGE_ENGINE&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-DENABLED_LOCAL_INFILE&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-DENABLE_DTRACE&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-DDEFAULT_CHARSET&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;utf8mb4 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-DDEFAULT_COLLATION&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;utf8mb4_general_ci &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-DWITH_EMBEDDED_SERVER&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2编译安装&#34;&gt;2.编译安装&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;make -j &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;grep processor /proc/cpuinfo &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; wc -l&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#编译很消耗系统资源，小内存可能编译通不过make install&lt;/span&gt;
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3启动配置&#34;&gt;3.启动配置&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ls -lrt /usr/local/mysql
&lt;span class=&#34;c1&#34;&gt;# 创建启动脚本，并增加可执行权限&lt;/span&gt;
cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld
chmod +x /etc/init.d/mysqld
&lt;span class=&#34;c1&#34;&gt;# 开机自启动&lt;/span&gt;
systemctl &lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; mysqld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4修改mysql配置文件&#34;&gt;4.修改Mysql配置文件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5添加环境变量&#34;&gt;5.添加环境变量&lt;/h3&gt;
&lt;h3 id=&#34;6初始化数据库&#34;&gt;6.初始化数据库&lt;/h3&gt;
&lt;h3 id=&#34;7启动数据库&#34;&gt;7.启动数据库&lt;/h3&gt;
</description>
        </item>
        <item>
        <title> [ Zookeeper ] 2. Zookeeper基础</title>
        <link>https://example.com/p/zookeeper-2.-zookeeper%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Tue, 12 Nov 2019 01:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/zookeeper-2.-zookeeper%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;h1 id=&#34;zookeeper基础&#34;&gt;Zookeeper基础&lt;/h1&gt;
&lt;h2 id=&#34;1-zab协议&#34;&gt;1. ZAB协议&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ZAB协议是为分布式协调服务Zookeeper专有的一种协议，此协议是为了应对崩溃恢复的原子广播&lt;/li&gt;
&lt;li&gt;崩溃恢复
&lt;ul&gt;
&lt;li&gt;整个zk集群刚启动或者Leader节点宕机、重启或者不可以正常提供服务时超出一半的情况下，所有节点将会进入崩溃恢复模式&lt;/li&gt;
&lt;li&gt;首先通过选举产生Leader&lt;/li&gt;
&lt;li&gt;然后集群中的Follwer节点与新产生的Leader节点进行数据同步&lt;/li&gt;
&lt;li&gt;一旦集群中一半数量的节点与Leader节点完成了数据同步，集群就会退出崩溃恢复模式，进入到消息广播模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;消息广播
&lt;ul&gt;
&lt;li&gt;Leader节点开始接受客户端的事务请求，生成事务的提案进行事务请求处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>1.zookeeper分布式部署</title>
        <link>https://example.com/p/1.zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/</link>
        <pubDate>Tue, 12 Nov 2019 01:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/1.zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/</guid>
        <description>&lt;h1 id=&#34;zookeeper分布式部署&#34;&gt;zookeeper分布式部署&lt;/h1&gt;
&lt;h3 id=&#34;一配置服务器ip地址映射&#34;&gt;一.配置服务器IP地址映射&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;[root@localhost zk]~#: vim /etc/hosts&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;192.168.1.111 zoo1
192.168.1.112 zoo2
192.168.1.113 zoo3
192.168.1.114 zoo4
192.168.1.115 zoo5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;二修改配置zk文件&#34;&gt;二.修改配置ZK文件&lt;/h3&gt;
&lt;p&gt;1.下载Zookeeper&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 进入ZK路径&lt;/span&gt;
wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.5.6/apache-zookeeper-3.5.6-bin.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.修改配置文件
进入&lt;code&gt;conf&lt;/code&gt;目录，在配置文件前，先&lt;code&gt;cp zoo_sample.cfg zoo.cfg&lt;/code&gt;,然后&lt;code&gt;vim zoo.cfg&lt;/code&gt;。配置如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;tickTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2000&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;initLimit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;syncLimit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dataDir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ops&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zookeeper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.5.6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conf&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;clientPort&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2181&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;zoo1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2888&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3888&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;zoo2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2888&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3888&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;zoo3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2888&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3888&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3.启动ZK
①.在每个节点的服务器依次启动服务：
&lt;code&gt;[root@localhost zk]~#: ./bin/zkServer.sh start&lt;/code&gt;
在启动过程中日志会出现异常，由于其他节点还未启动，所以属于正常情况（正常情况下，仅有最后一个节点启动不会出现异常）。待所有节点全部启动，集群会逐渐稳定下来。
②.查询每一个节点角色
&lt;code&gt;[root@localhost zk]~#: ./bin/zkServer.sh status&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# LeaderNode&lt;/span&gt;
ZooKeeper JMX enabled by default
Using config: /data/ops/zk/zookeeper-3.5.6-follower/bin/../conf/zoo.cfg
Client port found: 2181. Client address: localhost.
Mode: leader
&lt;span class=&#34;c1&#34;&gt;# FollowerNode&lt;/span&gt;
ZooKeeper JMX enabled by default
Using config: /data/ops/zk/zookeeper-3.5.6-master/bin/../conf/zoo.cfg
Client port found: 2181. Client address: localhost.
Mode: follower
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>[Nginx] 1.Nginx入门</title>
        <link>https://example.com/p/nginx-1.nginx%E5%85%A5%E9%97%A8/</link>
        <pubDate>Tue, 12 Nov 2019 01:36:27 +0800</pubDate>
        
        <guid>https://example.com/p/nginx-1.nginx%E5%85%A5%E9%97%A8/</guid>
        <description>&lt;h1 id=&#34;1nginx入门&#34;&gt;1.Nginx入门&lt;/h1&gt;
&lt;h3 id=&#34;一nginx为什么受青睐&#34;&gt;一、Nginx为什么受青睐&lt;/h3&gt;
&lt;p&gt;​	在介绍&lt;em&gt;&lt;strong&gt;Nginx&lt;/strong&gt;&lt;/em&gt;具体的安装、配置以及原理之前先聊聊概念常识问题。那就是目前为什么&lt;em&gt;&lt;strong&gt;Nginx&lt;/strong&gt;&lt;/em&gt;深受青睐？那我们先从&lt;em&gt;&lt;strong&gt;Nginx&lt;/strong&gt;&lt;/em&gt;是什么开始聊起。&lt;/p&gt;
&lt;h4 id=&#34;1nginx是什么&#34;&gt;1.Nginx是什么&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;简单介绍&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   ***Nginx***来自于俄罗斯，是在**RamblerMedia**工作的**Igor Sysoev**使用***C***语言编写而成的跨平台轻量级高性能的*Web*服务器。***Nginx***可以运行在**Linux**、**FreeBSD**、**Solaris**(*Sun*公司的类*Unix OS*)、**MacOS**、以及**Windows**等操作系统。操作系统的不同，也给***Nginx***带来了一些好处，***Nginx***会使用当前操作系统中特有的一些高效**API**来提高自身的性能。
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Nginx和它的对手们&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Nginx&lt;/strong&gt;&lt;/em&gt;的对手们有&lt;strong&gt;Apache&lt;/strong&gt;、&lt;strong&gt;Lighttpd&lt;/strong&gt;、&lt;strong&gt;Tomcat&lt;/strong&gt;、&lt;strong&gt;Jetty&lt;/strong&gt;、&lt;strong&gt;IIS&lt;/strong&gt;，它们同为&lt;em&gt;Web&lt;/em&gt;服务器：具备&lt;em&gt;Web&lt;/em&gt;服务器的基本功能；基于&lt;em&gt;Rest&lt;/em&gt;架构风格，以**&lt;em&gt;统一资源描述符（URI）&lt;em&gt;&lt;strong&gt;或&lt;/strong&gt;&lt;/em&gt;统一资源定位符（URL）&lt;em&gt;&lt;em&gt;&lt;em&gt;作为沟通依据，通过&lt;/em&gt;HTTP&lt;/em&gt;为浏览器等&lt;/em&gt;Client&lt;/em&gt;程序提供各种网络服务。&lt;/p&gt;
&lt;p&gt;但是，这些&lt;em&gt;Web&lt;/em&gt;服务器呢，都多多少少因为各自的定位与发展方向都不尽相同，使得每一款&lt;em&gt;Web&lt;/em&gt;服务器都各有特色：&lt;/p&gt;
&lt;p&gt;​	1.&lt;strong&gt;Tomcat、Jetty：&lt;strong&gt;都是面向Java语言设计的。但是它们在性能方面与&lt;/strong&gt;Nginx&lt;/strong&gt;没有什么可比性，因为这两款服务器都是重量级选手。可能有伙伴会很疑惑，我已经用&lt;em&gt;Tomcat&lt;/em&gt;跑起服务，同样配置后可以直接访问为什么还要在加层外套&lt;strong&gt;Nginx&lt;/strong&gt;，对于这个问题，在后边对这一点进行详细的分析。【】&lt;/p&gt;
&lt;p&gt;​	2.&lt;strong&gt;IIS：&lt;strong&gt;这位选手呢，来自于微软家族。然后特点大家可能就很清楚了，它只能在Windows OS运行（不过网上也有工具可以把它运行在&lt;em&gt;LinuxOS&lt;/em&gt;中，但是并不是很完美哦）。可能拉低它颜值的就是&lt;/strong&gt;稳定性&lt;/strong&gt;与&lt;strong&gt;性能&lt;/strong&gt;了，&lt;em&gt;Windows OS&lt;/em&gt;作为服务器的话，稳定性和部分性能都不能和类&lt;em&gt;Unix OS&lt;/em&gt;进行媲美，所以呢，在高性能&lt;em&gt;Web&lt;/em&gt;服务器的场合中，&lt;strong&gt;IIS&lt;/strong&gt;可能就要被“淘汰”了。&lt;/p&gt;
&lt;p&gt;​	3.&lt;strong&gt;Apache：&lt;strong&gt;这是一位压轴级选手，是发展周期最长的，毫无疑问是&lt;/strong&gt;世界第一大&lt;em&gt;Web&lt;/em&gt;服务器&lt;/strong&gt;，在2012年遥遥领先其他选手。它毕竟有很多优秀的地方：&lt;strong&gt;稳定&lt;/strong&gt;、&lt;strong&gt;开源&lt;/strong&gt;、&lt;strong&gt;跨平台&lt;/strong&gt;等。但是美中不足的是，它被设计成为了&lt;strong&gt;重量级&lt;/strong&gt;、&lt;strong&gt;不支持高并发&lt;/strong&gt;的&lt;em&gt;Web&lt;/em&gt;服务器。如果有数以万计的&lt;em&gt;HTTP&lt;/em&gt;请求同时访问，服务器就会面临大量内存消耗的问题，操作系统也会跟着收到牵连，毕竟Apache的进程做进程间切换时会给服务器的CPU带来重大压力，同时会伴随着响应效率降低，这致命的一击，导致这位来自“贵族世家”的选手在&lt;strong&gt;高性能Web服务器&lt;/strong&gt;的舞台上没有了地位。&lt;/p&gt;
&lt;p&gt;​	4.&lt;strong&gt;Lighttpd：&lt;strong&gt;与&lt;/strong&gt;Nginx&lt;/strong&gt;同样是轻量级、高性能的Web服务器。但是它并没有得到国内开发者的钟爱，而是被欧美的开发者们所追捧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;恩宠&amp;ndash;Nginx&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nginx&lt;/strong&gt;的代码也是开源的而且是最自由的&lt;em&gt;&lt;strong&gt;2-clause BSD-like license&lt;/strong&gt;&lt;/em&gt;许可证。&lt;strong&gt;Nginx&lt;/strong&gt;使用的架构是&lt;strong&gt;基于事件驱动&lt;/strong&gt;的，能够并发处理百万级别的TCP连接。由于&lt;strong&gt;Nginx&lt;/strong&gt;的高度模块化和具有最自由的许可证，让&lt;strong&gt;Nginx&lt;/strong&gt;的第三方模块扩展功能更加充实。优秀的设计还带来了极佳的稳定性体验。所以，&lt;strong&gt;Nginx&lt;/strong&gt;大量应用于大流量的网站来高效处理大规模高并发连接。种种迹象表明，&lt;strong&gt;Nginx&lt;/strong&gt;在性能方面很出色。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2nginx的特点&#34;&gt;2.Nginx的特点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;更快&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;快主要体现在两方面：①在正常的情况下，单次请求会得到更快的响应；②在数以万计的并发请求中，&lt;strong&gt;Nginx&lt;/strong&gt;可以比其他&lt;em&gt;Web&lt;/em&gt;服务器更快的响应请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高扩展性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nginx&lt;/strong&gt;的高度模块化决定了其具有高扩展性。它完全是由多个不同功能、不同层次、不同类型以及耦合度极低的模块组合而成。它的模块都是嵌入到二进制文件中执行，使得第三方开发的模块也一样完美支持性能。所以高并发的网站完全可以根据自身项目业务特性定制属于自己的模块。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高可靠性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个特点应该是选择&lt;em&gt;Web&lt;/em&gt;服务器最基本的条件。&lt;strong&gt;Nginx&lt;/strong&gt;的稳定性，大家有目共睹。国内多家高流量并发的网站在核心的服务器上大规模使用&lt;strong&gt;Nginx&lt;/strong&gt;。官方提供的常用模块是非常稳定的，每一个Worker进程都相对独立，把耦合性降至最低。&lt;em&gt;master&lt;/em&gt;进程在其中一个&lt;em&gt;Worker&lt;/em&gt;进程出错时可以快速“拉起”新的&lt;em&gt;Worker&lt;/em&gt;子进程提供相应的服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;低内存消耗&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;据数据测试，一般情况下，1W个不活跃的&lt;em&gt;HTTP Keep-Alive&lt;/em&gt;连接在&lt;strong&gt;Nginx&lt;/strong&gt;中消耗只有2.5MB的内存。（这也是&lt;strong&gt;Nginx&lt;/strong&gt;能够支持高并发连接的基础）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单机支持10W+的并发连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于现在是海量数据时代，高并发无疑成为大家青睐的对象。理论上，&lt;strong&gt;Nginx&lt;/strong&gt;支持的并发连接数量取决于内存，10W+的并发连接并没有到极限。但是，能否及时处理更多的并发连接应该取决于项目业务的需求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;热部署&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;master&lt;/em&gt;管理进程和&lt;em&gt;Worker&lt;/em&gt;进程是相互隔离的，这使得&lt;strong&gt;Nginx&lt;/strong&gt;能够彰显热部署的能力。通俗点来说，就是完全可以在&lt;em&gt;7*24&lt;/em&gt;h不停止服务正常工作的情况下，可以升级&lt;strong&gt;Nginx&lt;/strong&gt;的可执行文件、更新配置选项、更新日志文件等功能操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;最自由的BSD许可协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;俗话说**“众人拾柴火焰高”**。也正是BSD许可协议带来的极大优势，为**Nginx**提供更强劲的发展动力。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;综上所述选择nginx的核心理由还是由于它能在支持高并发请求的同时保持高效的服务&#34;&gt;&lt;strong&gt;综上所述，选择&lt;em&gt;Nginx&lt;/em&gt;的核心理由还是由于它能在支持高并发请求的同时保持高效的服务。&lt;/strong&gt;&lt;/h5&gt;
&lt;hr&gt;
&lt;h3 id=&#34;二nginx的安装&#34;&gt;二、Nginx的安装&lt;/h3&gt;
&lt;h4 id=&#34;1源码安装&#34;&gt;1.源码安装&lt;/h4&gt;
&lt;p&gt;在正式安装&lt;strong&gt;Nginx&lt;/strong&gt;前需要保证服务器主机已经安装有&lt;strong&gt;编译环境&lt;em&gt;GCC&lt;/em&gt;开发库&lt;/strong&gt;之类的环境。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC编译环境工具安装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;①&lt;em&gt;Ubuntu OS&lt;/em&gt;编译环境使用如下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;apt-get install build-essential
apt-get install libtool
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;②CentOS编译环境使用如下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;yum install -y gcc automake autoconf libtool make
yum install -y gcc -c++
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装完成编译环境，就可以着手准备&lt;strong&gt;Nginx&lt;/strong&gt;所需要的类库&lt;strong&gt;PCRE库&lt;/strong&gt;、&lt;strong&gt;zlib库&lt;/strong&gt;、&lt;strong&gt;OpenSSL开发库&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PCRE库安装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先介绍一下PCRE库的作用，为&lt;strong&gt;Nginx&lt;/strong&gt;的&lt;em&gt;HTTP&lt;/em&gt;模块提供&lt;strong&gt;解析正则表达式&lt;/strong&gt;的基础。这里直接通过下载源码的方式进行编译安装。根据需要的版本在&lt;a class=&#34;link&#34; href=&#34;https://ftp.pcre.org/pub/pcre/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PCRE源码&lt;/a&gt;中选择URL然后用下边命令进行下载&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;wget https://ftp.pcre.org/pub/pcre/pcre-8.42.tar.gz
&lt;span class=&#34;c1&#34;&gt;## 现在完成后，对源码包进行解压&lt;/span&gt;
tar -xzvf pcre-8.42.tar.gz
&lt;span class=&#34;c1&#34;&gt;## 解压完成进入pcre-8.42目录&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; pcre-8.42
&lt;span class=&#34;c1&#34;&gt;## 执行配置&lt;/span&gt;
./configure
&lt;span class=&#34;c1&#34;&gt;## 进行编译并安装&lt;/span&gt;
make 
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Zlib库安装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Zlib库主要是针对HTTP包的内容&lt;strong&gt;做gzip格式的压缩&lt;/strong&gt;。例如，&lt;strong&gt;Nginx&lt;/strong&gt;的配置&lt;em&gt;nginx.conf&lt;/em&gt;文件中配置&lt;em&gt;&lt;strong&gt;gzip on&lt;/strong&gt;&lt;/em&gt;。&lt;a class=&#34;link&#34; href=&#34;http://zlib.net/zlib-1.2.11.tar.gz&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Zlib-1.2.11下载&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 使用Wget命令下载源码&lt;/span&gt;
wget http://zlib.net/zlib-1.2.11.tar.gz
&lt;span class=&#34;c1&#34;&gt;## 进行解压&lt;/span&gt;
tar -xzvf zlib-1.2.11.tar.gz
&lt;span class=&#34;c1&#34;&gt;## 进入zlib目录进行配置编译安装操作&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; zlib-1.2.11
./configure
make 
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Openssl安装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果对版本没有特殊要求，OpenSSL我们采用命令安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## CentOS 安装命令&lt;/span&gt;
yum install openssl openssl-devel

&lt;span class=&#34;c1&#34;&gt;## Ubuntu/Debian 安装命令&lt;/span&gt;
sudo apt-get install openssl        
sudo apt-get install libssl-devel  

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nginx安装&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先去&lt;a class=&#34;link&#34; href=&#34;http://nginx.org/en/download.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Nginx&lt;/strong&gt;官网&lt;/a&gt;下载合适版本的源码。同时我们可以直接在服务器使用wget命令进行下载。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;wget http://nginx.org/download/nginx-1.14.0.tar.gz
&lt;span class=&#34;c1&#34;&gt;## 解压Nginx源码&lt;/span&gt;
tar -xzvf nginx-1.14.0.tar.gz
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; nginx-1.14.0

&lt;span class=&#34;c1&#34;&gt;## 进行配置项的配置:(以下只是选择了编译Nginx源码时的部分配置选项)&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# --sbin-path: 指定了可执行文件的放置路径,默认路径在&amp;lt;prefix&amp;gt;/sbin/nginx&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# --conf-path: 指定了配置选项文件的放置路径,默认路径在&amp;lt;prefix&amp;gt;/conf/nginx.conf&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# --pid-path: 指定了pid文件的放置路径,默认路径在&amp;lt;prefix&amp;gt;/logs&amp;gt;nginx.pid&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# --with-http_ssl_module:安装http_ssl_module，使得Nginx支持SSL协议，保证HTTPS服务。&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# --with-pcre: 指定PCRE库源码的路径，编译Nginx时会进入此路径对源码进行编译。&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# --with-zlib: 指定Zlib库源码的路径，编译Nginx时会进入此路径对源码进行编译。&lt;/span&gt;
./configure  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--sbin-path&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/local/nginx/nginx &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;
--conf-path&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/local/nginx/nginx.conf &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--pid-path&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/local/nginx/nginx.pid &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--with-http_ssl_module &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--with-pcre&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/opt/app/openet/oetal1/cheney/pcre-8.42 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--with-zlib&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/opt/app/openet/oetal1/cheney/zlib-1.2.11 

&lt;span class=&#34;c1&#34;&gt;## 配置完成后进行编译安装&lt;/span&gt;
make 
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装完成之后可以进行简单的测试，进入配置的**${&amp;ndash;sbin-path}**路径下启动Nginx。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 直接使用默认配置执行nginx可执行文件启动服务&lt;/span&gt;
/usr/local/nginx/sbin/nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在保证服务器主机端口可以访问的情况下，使用浏览器访问主机IP地址，例如&lt;em&gt;&lt;strong&gt;http://127.0.0.1&lt;/strong&gt;&lt;/em&gt;，可以看到Nginx服务的默认主页。这就说明&lt;strong&gt;Nginx&lt;/strong&gt;服务正常启动了。然后可以根据项目具体的业务需求，对&lt;strong&gt;Nginx&lt;/strong&gt;进行特殊配置进行详细定制。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;nginx的具体配值问题下篇文章进行详细介绍&#34;&gt;Nginx的具体配值问题，下篇文章进行详细介绍。&lt;/h3&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://example.com/p/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/</guid>
        <description>&lt;h1 id=&#34;三pod对象详解&#34;&gt;三、Pod对象详解&lt;/h1&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://example.com/p/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/</guid>
        <description>&lt;h1 id=&#34;4-1k8s构建高可用mysql集群&#34;&gt;4-1.K8s构建高可用Mysql集群&lt;/h1&gt;
&lt;h2 id=&#34;一mysql高可用架构图&#34;&gt;一、MySQL高可用架构图&lt;/h2&gt;
&lt;h3 id=&#34;1主从复制读写分离&#34;&gt;1.主从复制+读写分离&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;此方案更适用于数据库读数据的场景(针对数据强一致性非严格的情况)，毕竟Replication存在一定的时延。
通过快速扩容Slave节点提高MySQL集群读取数据能力，不用过度依赖于Master节点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;media/Kubernetes-Mysql-HA1.png&#34; alt=&#34;K8s之MySQL高可用架构图&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;实现过程&#34;&gt;实现过程&lt;/h2&gt;
&lt;h3 id=&#34;为其提供pv存储盘&#34;&gt;①.为其提供PV存储盘&lt;/h3&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://example.com/p/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/</guid>
        <description>&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://example.com/p/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/</guid>
        <description>&lt;h1 id=&#34;1kuberbetes-dashboardweb-ui&#34;&gt;1.Kuberbetes-dashboard(Web UI)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Kuberbetes-dashboard是基于web的Kubernetes用户界面。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://example.com/p/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/</guid>
        <description>&lt;h1 id=&#34;云原生&#34;&gt;云原生&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;media/15867070269322.jpg&#34; alt=&#34;Kubernetes&#34;  /&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://example.com/p/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/</guid>
        <description>&lt;h3 id=&#34;目录&#34;&gt;目录&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;README.md&#34; &gt;云原生探索&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;Goland/README.md&#34; &gt;第一部分-Goland学习&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Goland/concurrent/README.md&#34; &gt;Go并发&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Goland/concurrent/goroutine.md&#34; &gt;协程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;Docker/README.md&#34; &gt;第二部分-Docker&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Docker/docker/1-command.md&#34; &gt;1.Docker命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Docker/docker/2-dockerInstall.md&#34; &gt;2.Docker安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Docker/docker/3-jdk_mirror.md&#34; &gt;3.Docker之jdk最简镜像构建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Docker/docker/4-docker4SpringBoot.md&#34; &gt;4.Docker-SpringBoot构建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Docker/docker/5-docker4rmNone.md&#34; &gt;5.Docker-本地构建none包处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Docker/docker/6-namespace-linux4docker.md&#34; &gt;6.Docker-Linux Namespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Docker/docker/7-cgroup-linux4docker.md&#34; &gt;7.Docker-Linux cgroup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Docker/docker/8-ufs-linux4docker.md&#34; &gt;8.Docker-Linux UFS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;Kubernetes/README.md&#34; &gt;第三部分-Kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Kubernetes/1-k8s-base/README.md&#34; &gt;1.初识K8s&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Kubernetes/1-k8s-base/1_concept.md&#34; &gt;1-1.K8s基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Kubernetes/1-k8s-base/2_kubectl.md&#34; &gt;1-2.Kubectl工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Kubernetes/1-k8s-base/3_kubeadm.md&#34; &gt;1-3.Kubeadm工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Kubernetes/1-k8s-base/4_k8s_install.md&#34; &gt;1-4.Kubenetes集群初始化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Kubernetes/1-k8s-base/5_helm.md&#34; &gt;1-5.Kubenetes之Helm包管理工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Kubernetes/2-k8s-pod/README.md&#34; &gt;2.深入Pod&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Kubernetes/2-k8s-pod/1.k8s-pod.md&#34; &gt;2-1.Pod对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Kubernetes/2-k8s-pod/2.pods-example.md&#34; &gt;2-2.Pod示例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Kubernetes/2-k8s-pod/3.pod-detial.md&#34; &gt;2-3.Pod详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Kubernetes/2-k8s-service/README.md&#34; &gt;3.深入Service&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Kubernetes/2-k8s-service/1.k8s-service.md&#34; &gt;3-1.Service对象&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Kubernetes/4-k8s-deployFile/README.md&#34; &gt;4.K8s服务构建&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Kubernetes/4-k8s-deployFile/1.Mysql-k8s.md&#34; &gt;4-1.Mysql-K8s主从构建&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Kubernetes/k8s-plugin/README.md&#34; &gt;K8s-PlugIn&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Kubernetes/k8s-plugin/1-k8s_dashboard.md&#34; &gt;1.Dashboard插件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;ServiceMesh/README.md&#34; &gt;第四部分-ServiceMesh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://example.com/p/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/</guid>
        <description>&lt;h1 id=&#34;go编程之指针&#34;&gt;Go编程之指针&lt;/h1&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://example.com/p/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/</guid>
        <description>&lt;h1 id=&#34;一opencv-java的入门&#34;&gt;一、OpenCV-Java的入门&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://opencv-java-tutorials.readthedocs.io/en/latest/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenCV的Java官方文档地址&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;1opencv的java环境构建&#34;&gt;1.OpenCV的Java环境构建&lt;/h3&gt;
&lt;p&gt;首先，声明一下在本文中选用的环境配置如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MacOS操作系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IntelliJ IDEA开发编译器&lt;/p&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MacOS的安装有两种方式：一种是靠强大的BrewHome安装器自动安装；另外一种就是相对麻烦的手动安装了。&lt;/p&gt;
&lt;p&gt;在这里我选择的是BrewHome进行安装。（前提是MacOS已经安装了BrewHome）&lt;/p&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://example.com/p/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/</guid>
        <description>&lt;h2 id=&#34;一相关概念的简介&#34;&gt;一、相关概念的简介&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;在了解&lt;strong&gt;深度学习&lt;/strong&gt;前应该还有两个专业名词大家也想必是耳熟能详，那么就是&lt;strong&gt;人工智能&lt;/strong&gt;、&lt;strong&gt;机器学习&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;人工智能(Artificial Intelligence)&lt;/code&gt;&lt;/strong&gt;：也就是我们经常听到的&lt;em&gt;&lt;strong&gt;AI&lt;/strong&gt;&lt;/em&gt;。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。但是在早期的时候，人工智能充满了局限性，只是在&lt;strong&gt;特定&lt;/strong&gt;的环境范围下。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;机器学习(Machine Learning)&lt;/code&gt;&lt;/strong&gt;：简称ML。机器学习其实是人工智能的一个分支。如果&lt;strong&gt;一个程序&lt;/strong&gt;可以在**任务*(T)&lt;em&gt;&lt;strong&gt;上，随着&lt;/strong&gt;经验&lt;/em&gt;(E)***的增加，*&lt;em&gt;效果&lt;/em&gt;(P)***也可以随之增加，则就可以说这个程序可以从经验中得到学习。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;深度学习(Deep Learning)&lt;/code&gt;&lt;/strong&gt;：简称DL。深度学习也是机器学习的一个分支。主要是在机器学习的基础之上有所改进：它除了可以学习&lt;strong&gt;特征&lt;/strong&gt;和&lt;strong&gt;任务&lt;/strong&gt;之间的关联，还可以自动的将简单的特征组合成更加复杂的特征，并使用这些组合特征解决问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;二了解机器学习ml&#34;&gt;二、了解机器学习(ML)&lt;/h2&gt;
&lt;hr&gt;
&lt;h4 id=&#34;1--用例子认识机器学习的概念&#34;&gt;1.  用例子认识机器学习的概念&lt;/h4&gt;
&lt;p&gt;其实，邮件系统中判断收到的邮件是否为垃圾邮件就可以看做是一个机器学习的过程。首先对垃圾邮件分类概念进行一个拆分、类比：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;一个程序&lt;/code&gt;                 &amp;lt;======&amp;gt;    需要用到的机器学习算法，比如逻辑回归算法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;任务&lt;/code&gt;&lt;em&gt;&lt;code&gt;(T)&lt;/code&gt;&lt;/em&gt;           &amp;lt;======&amp;gt;    区分此邮件是否是垃圾邮件这个任务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;经验&lt;/code&gt;&lt;em&gt;&lt;code&gt;(E)&lt;/code&gt;&lt;/em&gt;           &amp;lt;======&amp;gt;    已经区分过是否为垃圾邮件的历史事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;效果&lt;/code&gt;&lt;em&gt;&lt;code&gt;(P)&lt;/code&gt;&lt;/em&gt;           &amp;lt;======&amp;gt;    机器学习算法在区分此邮件是否是垃圾邮件这个任务的精确率&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;在整个过程中，首先会从每一封邮件中抽取出对分类结果可能有影响的因素（比如：发件人的地址、邮件的标题、收件人的数量、邮件正题内容，so on）。这样的每一个**&lt;code&gt;因素&lt;/code&gt;**其实可以成为是一个**&lt;code&gt;特征&lt;/code&gt;** ***&lt;code&gt;(feature)&lt;/code&gt;***。然而机器学习算法中的**逻辑回归算法**可以从训练数据中计算出每个特征和预测结果的相关度。例如，在垃圾邮件分类过程中，可能会发现如果一个邮件的收件人越多，那么这封邮件是垃圾邮件的可能性越大。
在对一封完全未知的邮件进行区分时，**逻辑回归算法**会根据这封邮件中抽取到的每一个**特征**以及**这些特征**和垃圾邮件的**相关度**进行判断是否为垃圾邮件。
所以，从例子中不难看出：一般情况下，在&lt;code&gt;训练数据&lt;/code&gt;达到一定数量之前，越多的训练数据可以使得&lt;code&gt;逻辑回归算法&lt;/code&gt;对未知邮件做出的判断&lt;code&gt;越精确&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也就是说**&lt;code&gt;逻辑回归算法&lt;/code&gt;可以根据&lt;code&gt;训练数据【经验(E)】&lt;/code&gt;提高&lt;code&gt;垃圾邮件分类问题【任务(T)】&lt;/code&gt;上的&lt;code&gt;准确率【效果(P)】&lt;/code&gt;**&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2机器学习的分类&#34;&gt;2.机器学习的分类&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;有监督学习(Supervised Learning)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;有监督学习可分为&lt;code&gt;回归&lt;/code&gt;和&lt;code&gt;分类&lt;/code&gt;问题。例如上述示例&lt;strong&gt;垃圾邮件分类&lt;/strong&gt;就属于&lt;strong&gt;有监督学习&lt;/strong&gt;。
1.在回归问题中，我们会预测一个连续值；也就是我们试图将输入变量和输出用一个连续函数对应起来。
2.在分类问题中，我们会预测一个离散值，我们试图将输入变量与离散的类别对应起来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无监督学习(Unsupervised Leanring)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这种学习方式，数据并不被特别标识，学习模型是为了推断出数据的一些内在结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;增强式学习(Reinforcement Learning)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;输入数据作为对模型的反馈，不像监督模型那样，输入数据仅仅是作为一个检查模型对错的方式，在强化学习下，输入数据直接反馈到模型，模型必须对此立刻作出调整。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://example.com/p/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/</guid>
        <description>&lt;h3 id=&#34;一关于神经网络&#34;&gt;一、关于神经网络&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;训练神经网络主要包含以下四部分：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;层&lt;/strong&gt;，多个层组合成网络(模型)&lt;/li&gt;
&lt;li&gt;输入数据和相应的目标&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;损失函数&lt;/strong&gt;，即用于学习的反馈信号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化器&lt;/strong&gt;，决定学习过程如何进行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://example.com/p/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/p/</guid>
        <description>&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
</description>
        </item>
        
    </channel>
</rss>
