<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redis on Quinn</title>
    <link>https://touch-star.com/tags/redis/</link>
    <description>Recent content in redis on Quinn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 06 Jan 2020 01:13:47 +0800</lastBuildDate>
    
	<atom:link href="https://touch-star.com/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[ Redis ] 1. Redis</title>
      <link>https://touch-star.com/post/middleware/database/nosql/redis/1_redis_interview/</link>
      <pubDate>Mon, 06 Jan 2020 01:13:47 +0800</pubDate>
      
      <guid>https://touch-star.com/post/middleware/database/nosql/redis/1_redis_interview/</guid>
      <description>Redis 1. 什么是跳表  跳跃表是一种有序的数据结构，它通过在每个节点中维持多个指向其他的几点指针，从而达到快速访问队尾目的。跳跃表的效率可以和平衡树想媲美了，最关键是它的实现相对于平衡树来说，代码的实现上简单很多 跳跃表 level 层级完全是随机的。一般来说，层级越多，访问节点的速度越快。 一是实现有序集合键，二是集群节点中用作内部数据结构。 相比于红黑树、平衡二叉树，跳表不仅查找、插入、删除时间复杂度都是O(logN)，并且实现简单很多。  2. Redis中BitMap   Bitmap并不是一种独立的数据结构，而是基于String数据结构进行的位图操作。
 最大空间即为String数据结构所支持的512MB， 所以bitmap所支持的最大offset为2^32-1.    一般使用场景用于大数据签到、日活统计、在线统计等等。
 其主要优点可以节省大量空间。 例如： 进行日活统计：  使用日期作为key，用户ID作为偏移量，1为当日活跃，0为不活跃      1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  ### 基本操作演示(以下为Redis-cli命令) # 设置一个字符串 1Aa # 存储在redis中的二进制为 0b001100010100000101100001 set testkey 1Aa # 进行bitmap操作 setbit testkey 10 1 setbit testkey 18 0 # testkey对象index为10的bit值为1 getbit testkey 10 # testkey对象index为18的bit值为1 getbit testkey 18 # 进行位统计 ,结果为bit上为1的和， # testkey输出结果为 8 bitcount testkey # testkey输出结果为 3 bitcount testkey 0 0   </description>
    </item>
    
  </channel>
</rss>