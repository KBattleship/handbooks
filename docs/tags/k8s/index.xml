<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>k8s on Quinn</title>
    <link>https://touch-star.com/tags/k8s/</link>
    <description>Recent content in k8s on Quinn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 18 Sep 2020 15:36:27 +0800</lastBuildDate>
    
	<atom:link href="https://touch-star.com/tags/k8s/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[ Kubernetes ] 3-1.深入Service</title>
      <link>https://touch-star.com/post/cloudnative/kubernetes/3_k8s_service/1_k8s_service/</link>
      <pubDate>Fri, 18 Sep 2020 15:36:27 +0800</pubDate>
      
      <guid>https://touch-star.com/post/cloudnative/kubernetes/3_k8s_service/1_k8s_service/</guid>
      <description>深入Service  Service是Kubernetes最为核心的概念。Service可以为一组具有相同功能的容器应用提供一个统一的入口地址，并且将请求负载分发至后端的各个容器应用上。
 1.Service参数定义 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57  # 必填，版本号apiVersion:v1# 必填kind:Service# 必填，元数据metadata:# 必填，Service名称(符合RFC 1035规范)name:string# 必填，命名空间(默认default)namespace:string# 自定义标签属性列表labels:- name:string# 自定义注解属性列表annotations:- name:string# 必填，配置内容详细描述 spec:# 必填，LabelSelector配置，将选择具有特定Label标签的Pod对象作为管理对象selector:[]# 必填，可选值[ClusterIP | NodePort | LoadBalancer]## ClusterIP:虚拟服务IP地址，该地址用于Kubernetes集群内部Pod对象访问，#在Node节点上Kube-proxy通过设置的Iptables规则进行转发## NodePort:使用宿主机端口，使能够访问各Node的外部客户端通过Node的#IP地址和端口号即可访问到应用。## LoadBalancer:使用外接负载均衡器完成到服务的负载分发，需要#spec.</description>
    </item>
    
    <item>
      <title>[ Kubernetes ] 2-1.了解Pod对象</title>
      <link>https://touch-star.com/post/cloudnative/kubernetes/2_k8s_pod/1_k8s_pod/</link>
      <pubDate>Thu, 17 Sep 2020 15:36:27 +0800</pubDate>
      
      <guid>https://touch-star.com/post/cloudnative/kubernetes/2_k8s_pod/1_k8s_pod/</guid>
      <description>了解Pod对象 1.Pod参数定义 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144  # 必填,版本号apiVersion:stringkind:Pod# 必填,元数据metadata:# 必填,Pod对象的名称(命名规范需要符合RFC 1035规范)name:string# 必填,Pod对象所属的命名空间,默认值为defaultnamespace:string# 自定义标签列表(取值类型:List)labels:- name:string# 自定义标签注解(取值类型:List)annotations:- name:string# 必填,Pod对象中容器的详细定义 spec:# 必填,Pod对象容器列表(取值类型:List)containers:# 必填,容器的名称(需要符合RFC 1035规范)- name:string# 必填,容器镜像名称image:string# 获取镜像的策略，默认值为:Always# Always: 每次都尝试重新下载镜像# Never: 仅使用本地镜像# IfNotPresent: 如果本地不存在，就下载镜像imagePullPolicy:[Always|Never|IfNotPresent]# 容器启动命令列表，若不指定则使用镜像打包时使用的启动命令command:[string]# 容器的启动命令参数列表args:[string]# 容器的工作目录workingDir:string# 挂载到容器内部的存储卷配置(取值类型:List)volumeMounts:# 引用Pod定义的共享存储卷的名称，需使用镜像volumes[]部分定义的共享卷名称- name:string# 存储卷在容器内Mount的绝对路径(应少于512个字符)mountPath:string# 是否只读模式,默认false(读写模式)readOnly:boolean# 容器需要暴露的端口号(取值类型:List) ports:# 端口的名称- name:string# 容器需要监听的端口号containerPort:int# 容器所在主机需要监听的端口号，默认与containerPort相同# (设置hostPort时，同一台宿主机将无法启动该容器的第二副本，由于端口占用问题)hostPort:int# 端口协议[TCP/UDP],默认为TCPprotocol:string# 容器运行前需要设置的环境变量列表env:# 环境变量的名称- name:string# 环境变量的值value:string# 资源限制和资源请求的设置resource:# 资源限制设置limits:# CPU限制(单位为：core)将用于docker run --cpu-shares参数cpu:string# 内存限制(单位为：MiB/GiB)将用于docker run --memory参数memory:string# 资源限制设置(请求)requests:# CPU请求(单位为：core)将用于容器启动的初始化可用数量cpu:string# 内存请求(单位为：MiB/GiB)将用于容器启动的初始化可用数量memory:string# 对Pod对象内各个容器进行安全检查的设置，当探测无响应几次后，将自动重启该容器# 包含[exec | httpGet | TcpSocket]三种方式，任选其一即可livenessProbe:exec:# 需要执行的脚本command:[string]httpGet:# 请求路径path:string# 请求端口port:numberhost:stringscheme:stringhttpHeader:- name:stringvalue:stringtcpSocket:port:number# 完成容器启动后首次进行探测的时间(单位为：s)initialDelaySeconds:0# 对容器健康检查探测等待超时时间(单位为：s)，默认值为1timeoutSeconds:0# 对容器健康检查的探测时间周期(单位为：s)，默认值为10periodSeconds:0successThreshold:0failureThreshold:0securityContext:privileged:boolean## Pod对象的重启策略，可选值[Always | Never | OnFailure]## Always: Pod对象一旦终止，则不关心容器是如何停止的，kubelet都将重器容器## Never: Pod对象终止后，kubelet将退出码返回给Master，不再重启该容器## OnFailure: 只有当Pod对象以非零退出码终止时，kubelet才会重启该容器# (容器正常结束的退出码为零)#restartPolicy:[Always|Never|OnFailure]# 表示将Pod对象调度到包含这些label的Node上(以key:value形式指定)nodeSelector:object# Pull镜像时使用的secret名称(以name:secretValue形式指定)imagePullSecrets:- name:string# 是否使用主机模式(默认值为:false)## 如果设置为true，表示容器使用宿主机网络，不再使用Docker网桥# 该Pod对象将无法在同一台宿主机上启动第二个副本hostNetwork:boolean# 在该Pod对象上定义的共享储存卷列表volumes:# 共享储存卷名称，一个Pod对象中每个储存卷定义一个名称(命名应按照RFC 1035规范)- name:string# Pod对象同生命周期的一个临时目录，值为{}空对象emptyDir:{}# 挂载Pod对象所在宿主机的目录hostPath:# 将用于容器中mount的目录path:string# 挂载集群中预定义的secret对象到容器内部secret:secretName:stringitems:- key:stringpath:string# 挂载集群预定义的configMap对象到容器内部configMap:name:stringitems:- key:stringpath:string  2.</description>
    </item>
    
    <item>
      <title>[ Kubernetes ] 2-2.SpringBoot--Pods项目初体验</title>
      <link>https://touch-star.com/post/cloudnative/kubernetes/2_k8s_pod/2_pods_example/</link>
      <pubDate>Thu, 17 Sep 2020 15:36:27 +0800</pubDate>
      
      <guid>https://touch-star.com/post/cloudnative/kubernetes/2_k8s_pod/2_pods_example/</guid>
      <description>SpringBoot&amp;ndash;Pods项目初体验  在SpringBoot项目中通过fabric8打包插件构建docker镜像
 通过Kubernetes的接口请求Pod对象，相信信息如下：
{ &amp;#34;kind&amp;#34;: &amp;#34;Pod&amp;#34;, &amp;#34;apiVersion&amp;#34;: &amp;#34;v1&amp;#34;, &amp;#34;metadata&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;kubernetes-hello-world-779c4c748b-2rv27&amp;#34;, &amp;#34;generateName&amp;#34;: &amp;#34;kubernetes-hello-world-779c4c748b-&amp;#34;, &amp;#34;namespace&amp;#34;: &amp;#34;default&amp;#34;, &amp;#34;selfLink&amp;#34;: &amp;#34;/api/v1/namespaces/default/pods/kubernetes-hello-world-779c4c748b-2rv27&amp;#34;, &amp;#34;uid&amp;#34;: &amp;#34;dea46f9f-cd4b-11e9-b38e-025000000001&amp;#34;, &amp;#34;resourceVersion&amp;#34;: &amp;#34;34209&amp;#34;, &amp;#34;creationTimestamp&amp;#34;: &amp;#34;2019-09-02T06:35:35Z&amp;#34;, &amp;#34;labels&amp;#34;: { &amp;#34;app&amp;#34;: &amp;#34;kubernetes-hello-world&amp;#34;, &amp;#34;group&amp;#34;: &amp;#34;org.</description>
    </item>
    
    <item>
      <title>[ Kubernetes ] 1-4.kubeadm命令使用</title>
      <link>https://touch-star.com/post/cloudnative/kubernetes/1_k8s_base/4_k8s_install/</link>
      <pubDate>Mon, 14 Sep 2020 15:36:27 +0800</pubDate>
      
      <guid>https://touch-star.com/post/cloudnative/kubernetes/1_k8s_base/4_k8s_install/</guid>
      <description>安装初始化K8s集群 1.安装K8s 1.1CentOS安装   预先准备工作
1 2 3 4 5 6 7 8 9 10 11 12 13  # 修改设置主机名称 hostnamectl set-hostname master # 绑定主机各节点hosts 192.168.0.1 master 192.168.0.2 node1 192.168.0.3 node2 # 验证每节点的Mac地址与UUID是否唯一 # mac地址注意查看网卡 cat /sys/class/net/eth1/address cat /sys/class/dmi/id/product_uuid # 关闭缓存交换swap swapoff -a # 临时关闭 sed -i.bak &amp;#39;/swap/s/^/#/&amp;#39; /etc/fstab #永久关闭     安装Kubernetes
1 2  # 设置K8s安装源，由于防火墙问题使用阿里云源 cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/yum.repos.d/kubernetes.repo     [kubernetes] name=Kubernetes baseurl=https://mirrors.</description>
    </item>
    
    <item>
      <title>[ Kubernetes ] 1-2.Kubectl命令行工具</title>
      <link>https://touch-star.com/post/cloudnative/kubernetes/1_k8s_base/2_kubectl/</link>
      <pubDate>Sat, 12 Sep 2020 15:36:27 +0800</pubDate>
      
      <guid>https://touch-star.com/post/cloudnative/kubernetes/1_k8s_base/2_kubectl/</guid>
      <description>Kubectl命令行工具 1.kubectl用法  $~: kubectl [command] [TYPE] [NAME] [flags]
   [command] 子命令。用于操作Kubernetes集群资源对象。
可取值：[create | delete | describe | get | apply]
  [TYPE] 资源对象的类型。区分大小写
备注：可以通过单数形式、复数形式、简写形式表示。
1 2 3 4  # 例：不同写法的Type,但是效果一致 kubectl get pod pod1 kubectl get pods pod1 kubectl get po pod1     [NAME] 资源对象名称。区分大小写 备注： 如果不指定名称，将返回属于TYPE的所有对象列表。
1 2  # 例：返回所有对象列表 kubectl get pods     [flags] kubectl子命令的可选参数
  2.</description>
    </item>
    
    <item>
      <title>[ Kubernetes ] 1-3.kubeadm命令使用</title>
      <link>https://touch-star.com/post/cloudnative/kubernetes/1_k8s_base/3_kubeadm/</link>
      <pubDate>Sat, 12 Sep 2020 15:36:27 +0800</pubDate>
      
      <guid>https://touch-star.com/post/cloudnative/kubernetes/1_k8s_base/3_kubeadm/</guid>
      <description>kubeadm命令使用 一、kubeadm概述 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  $~:kubeadm --help # kubeadm [command] |———— alpha [command] |———— completion |———— config |———— images |———— list 列出所有依赖镜像 |———— pull |———— help 查看命令详细描述 |———— init 初始化Kubernetes集群Master |———— join 在Kubernetes集群中增加Node |———— reset 重置Kubernetes集群 |———— token |———— upgrade |———— version   </description>
    </item>
    
    <item>
      <title>[ Kubernetes ] 1-5.K8s之Helm包管理工具</title>
      <link>https://touch-star.com/post/cloudnative/kubernetes/1_k8s_base/5_helm/</link>
      <pubDate>Sat, 12 Sep 2020 15:36:27 +0800</pubDate>
      
      <guid>https://touch-star.com/post/cloudnative/kubernetes/1_k8s_base/5_helm/</guid>
      <description>K8s之Helm包管理工具  Helm 是 Deis 开发的一个用于 Kubernetes 应用的包管理工具，主要用来管理 Charts。有点类似于 Ubuntu 中的 APT 或 CentOS 中的 YUM。
 一、安装 Helm Release Link
1.OS-CentOS 当前使用版本为Helm v3.1.2 linux
1 2 3 4 5 6 7 8  # 下载二进制可执行文件压缩包 wget -O /data/helm.tar.gz https://get.helm.sh/helm-v3.1.2-linux-amd64.tar.gz # 解压 tar -xzvf /data/helm.tar.gz # 移动helm二进制文件，方便全局访问 mv linux-amd64/helm /usr/local/bin/helm   2.OS-MacOS ①.自动安装 PS：操作系统已安装brew工具
1  brew install helm   ②.手动安装 当前使用版本为Helm v3.1.2 darwin
1 2 3 4 5 6 7 8  # 下载二进制可执行文件压缩包 wget -O ~/helm.</description>
    </item>
    
    <item>
      <title>[ Kubernetes ] 0.Kubernetes</title>
      <link>https://touch-star.com/post/cloudnative/kubernetes/index-readme/</link>
      <pubDate>Fri, 11 Sep 2020 15:36:27 +0800</pubDate>
      
      <guid>https://touch-star.com/post/cloudnative/kubernetes/index-readme/</guid>
      <description>Kubernetes Kubernetes(K8s)，译文成为【舵手】。从官网的Logo可以看出是轮船上的舵。结合container(集装箱，容器)的概念，Kubernetes看起来则是管理这些容器的。是一个自动化的容器编排平台，负责应用的部署、应用的弹性以及应用的管理，前提则是这些应用都是基于容器的。
核心功能   服务的发现与负载均衡
附属组件KubeDNS为系统内置了服务发现功能，可以将每一个Service增加DNS名称，使得集群内节点直接通过此名称访问到；同时Service通过iptables、ipvs支持了负载均衡。
  自动装箱
构建于容器之上，基于资源依赖及其他约束在不影响其可用性的情况下自动完成容器的部署工作。
  自我修复
容器故障后自动重启、节点故障后自动重新进行容器调度、节点健康状态检查异常后会关闭容器进行重新创建。
  水平扩展
通过命令、UI手动水平扩展、基于CPU等资源负载率进行自动水平扩展。
  自动发布与回滚
使用灰度方式更新应用或其配置，过程中的应用健康状态将得到监控，以保证不在同一时刻kill掉所有实例；同时，过程中健康状态出现异常情况，将会立即自动执行回滚。
  存储编排
Pod对象自动挂载不同类型的存储系统。
  批量处理
支持批处理作业、CI持续集成。
  秘钥与配置管理
K8s的configMap将配置与Docker镜像解耦，更新配置时，无需重新构建Docker镜像。同时，敏感数据将通过Secret对象进行解耦，以保障一定程度上的最大安全。
  </description>
    </item>
    
    <item>
      <title>[ Kubernetes ] 1-1.初识K8s</title>
      <link>https://touch-star.com/post/cloudnative/kubernetes/1_k8s_base/1_concept/</link>
      <pubDate>Fri, 11 Sep 2020 15:36:27 +0800</pubDate>
      
      <guid>https://touch-star.com/post/cloudnative/kubernetes/1_k8s_base/1_concept/</guid>
      <description>初识K8s 术语及原理   Master(主节点:control plane) 集群中的神经中枢网关。负责整个集群的资源管理、Pod调度、弹性伸缩、安全控制、系统监控、纠错等管理功能。
  ApiServer
集群的网关。
 负责输出RESTful风格K8s接口，则是通往集群所有REST操作命令的入口，并负责接收、校验、相应所有的REST请求，最终结果状态存储在etcd中。
   Controller Manager
负责生命周期功能及API业务逻辑。
 **a.生命周期功能：**Namespace创建和生命周期、Event垃圾回收、Pod对象终止相关的垃圾回收、级联垃圾回收、Node的垃圾回收 **b.API业务逻辑：**由ReplicaSet执行的Pod对象扩展
   Scheduler
在API Server确认Pod对象之后，由调度器(Scheduler)根据集群中各节点的可用资源状态、目标运行容器的资源需求做出调度策略。
  Etcd
基于Raft协议开发的分布式键值存储，用于服务发现、共享配置、保证一致性(数据库的主从节点选择，分布式锁等)。
 a.etcd是独立的组件，并不属于K8s集群。 b.生产环境etcd应该按照集群方式部署运行，以提升高可用。
     Node(从节点:worker node)
工作节点。负责接收来自Master节点的工作指令并根据指令相应的创建或者销毁Pod对象，以及调整网络规则以合理的路由转发流量。
  Pod
Kubernetes并不会直接运行容器，而是使用一个抽象的资源对象封装一个或者多个容器，此对象就是Pod对象。 是K8s最小的调度单元。 **一个Pod对象可以拥有多个Container容器应用。**通常情况下，这些在同一个Pod对象中的Container容器是高耦合。因为其共用同一个Pod对象下的网络名称空间、存储资源、UTS命名空间(同一个主机名称)、PID命名空间(不同应用程序可以看到其他应用程序的PID)
  Pod Controller(Pod 控制器)
虽说Pod对象是最小的调度单元，但实际应用中，并不会直接部署、管理Pod对象，而是借助Pod Controller对其进行管理。
  Replication Controller(复制控制器)
K8s的核心概念，用于管理Pod的声明周期。在主节点中，控制管理器进程同RC的定义完成Pod的创建、监控、启停等操作。
  Replica Set
保证在某个时间点儿上，一定数量的Pod对象在运行。是Replication Controller的升级版本。
 主要区别在于Selector选择器 Replica Set:支持集合级别的选择器。 Replication Controller:支持在等号描述的选择器。</description>
    </item>
    
    <item>
      <title>[ Etcd ] 1.基础入门(1)</title>
      <link>https://touch-star.com/post/middleware/register_center/etcd/etcd_interview/</link>
      <pubDate>Sun, 30 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://touch-star.com/post/middleware/register_center/etcd/etcd_interview/</guid>
      <description>ETCD  其中ETCD是一个用于存储关键数据的键值存储，ZK是一个用于管理配置等信息的中心化服务 ETCD包括 Raft 协议、存储两大模块. etcd 的使用其实非常简单，它对外提供了 gRPC 接口，我们可以通过 Protobuf 和 gRPC 直接对 etcd 中存储的数据进行管理，也可以使用官方提供的 etcdctl 操作存储的数据。
 raft协议  每一个 Raft 集群中都包含多个服务器，在任意时刻，每一台服务器只可能处于 Leader、Follower 以及 Candidate 三种状态；在处于正常的状态时，集群中只会存在一个 Leader，其余的服务器都是 Follower。
 节点选举  使用 Raft 协议的 etcd 集群在启动节点时，会遵循 Raft 协议的规则，所有节点一开始都被初始化为 Follower 状态，新加入的节点会在 NewNode 中做一些配置的初始化，包括用于接收各种信息的 Channel
 竞选流程 如果集群中的某一个 Follower 节点长时间内没有收到来自 Leader 的心跳请求，当前节点就会通过 MsgHup 消息进入预选举或者选举的流程。 如果收到 MsgHup 消息的节点不是 Leader 状态，就会根据当前集群的配置选择进入 PreElection 或者 Election 阶段，PreElection 阶段并不会真正增加当前节点的 Term，它的主要作用是得到当前集群能否成功选举出一个 Leader 的答案，如果当前集群中只有两个节点而且没有预选举阶段，那么这两个节点的 Term 会无休止的增加，预选举阶段就是为了解决这一问题而出现的。 当前节点会立刻调用 becomeCandidate 将当前节点的 Raft 状态变成候选人；在这之后，它会将票投给自己，如果当前集群只有一个节点，该节点就会直接成为集群中的 Leader 节点。</description>
    </item>
    
  </channel>
</rss>